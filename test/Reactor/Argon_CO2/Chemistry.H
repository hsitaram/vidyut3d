#ifndef MECHANISM_H
#define MECHANISM_H

#include <AMReX_Gpu.H>
#include <AMReX_REAL.H>

/* Elements
0  E
1  O
2  C
3  Ar
*/

// Species
#define E_ID 0
#define O_ID 1
#define O2_ID 2
#define AR_ID 3
#define CO2_ID 4
#define CO_ID 5
#define CO2v1_ID 6
#define CO2v2_ID 7
#define CO2v3_ID 8
#define CO2v4_ID 9
#define CO2p_ID 10
#define Om_ID 11
#define Op_ID 12
#define COp_ID 13
#define ARe_ID 14
#define ARp_ID 15

#define NUM_ELEMENTS 4
#define NUM_SPECIES 16
#define NUM_IONS 5
#define NUM_REACTIONS 68

#define NUM_FIT 4

//  ALWAYS on CPU stuff -- can have different def depending on if we are CPU or
//  GPU based. Defined in mechanism.cpp
void atomicWeight(amrex::Real* awt);
//  MISC
void CKAWT(amrex::Real* awt);
void CKNCF(int* ncf);
void CKSYME_STR(amrex::Vector<std::string>& ename);
void CKSYMS_STR(amrex::Vector<std::string>& kname);
void GET_RMAP(int* _rmap);
void CKINU(const int i, int& nspec, int* ki, int* nu);
void CKKFKR(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real* x,
  amrex::Real* q_f,
  amrex::Real* q_r);
void progressRateFR(
  amrex::Real* q_f, amrex::Real* q_r, amrex::Real* sc, amrex::Real T);
//  SPARSE INFORMATION
void SPARSITY_INFO(int* nJdata, const int* consP, int NCELLS);
void SPARSITY_INFO_SYST(int* nJdata, const int* consP, int NCELLS);
void SPARSITY_INFO_SYST_SIMPLIFIED(int* nJdata, const int* consP);
void
SPARSITY_PREPROC_CSC(int* rowVals, int* colPtrs, const int* consP, int NCELLS);
void SPARSITY_PREPROC_CSR(
  int* colVals, int* rowPtrs, const int* consP, int NCELLS, int base);
void SPARSITY_PREPROC_SYST_CSR(
  int* colVals, int* rowPtrs, const int* consP, int NCELLS, int base);
void SPARSITY_PREPROC_SYST_SIMPLIFIED_CSC(
  int* rowVals, int* colPtrs, int* indx, const int* consP);
void SPARSITY_PREPROC_SYST_SIMPLIFIED_CSR(
  int* colVals, int* rowPtr, const int* consP, int base);

// A few mechanism parameters
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKINDX(int& mm, int& kk, int& ii, int& nfit)
{
  mm = 4;
  kk = 16;
  ii = 68;
  nfit = -1; // Why do you need this anyway ?
}

//  inverse molecular weights
#ifdef AMREX_USE_GPU
AMREX_GPU_CONSTANT const amrex::Real global_imw[16] = {
  1822.8884868472639482, // E
  0.0625039064941559,    // O
  0.0312519532470779,    // O2
  0.0250312891113892,    // AR
  0.0227226249176305,    // CO2
  0.0357015351660121,    // CO
  0.0227226249176305,    // CO2v1
  0.0227226249176305,    // CO2v2
  0.0227226249176305,    // CO2v3
  0.0227226249176305,    // CO2v4
  0.0227229081626688,    // CO2p
  0.0625017634094834,    // Om
  0.0625060497257993,    // Op
  0.0357022343994464,    // COp
  0.0250312891113892,    // ARe
  0.0250316328373182,    // ARp
};
#endif
const amrex::Real h_global_imw[16] = {
  1822.8884868472639482, // E
  0.0625039064941559,    // O
  0.0312519532470779,    // O2
  0.0250312891113892,    // AR
  0.0227226249176305,    // CO2
  0.0357015351660121,    // CO
  0.0227226249176305,    // CO2v1
  0.0227226249176305,    // CO2v2
  0.0227226249176305,    // CO2v3
  0.0227226249176305,    // CO2v4
  0.0227229081626688,    // CO2p
  0.0625017634094834,    // Om
  0.0625060497257993,    // Op
  0.0357022343994464,    // COp
  0.0250312891113892,    // ARe
  0.0250316328373182,    // ARp
};

//  molecular weights
#ifdef AMREX_USE_GPU
AMREX_GPU_CONSTANT const amrex::Real global_mw[16] = {
  0.000549,  // E
  15.999000, // O
  31.998000, // O2
  39.950000, // AR
  44.009000, // CO2
  28.010000, // CO
  44.009000, // CO2v1
  44.009000, // CO2v2
  44.009000, // CO2v3
  44.009000, // CO2v4
  44.008451, // CO2p
  15.999549, // Om
  15.998451, // Op
  28.009451, // COp
  39.950000, // ARe
  39.949451, // ARp
};
#endif
const amrex::Real h_global_mw[16] = {
  0.000549,  // E
  15.999000, // O
  31.998000, // O2
  39.950000, // AR
  44.009000, // CO2
  28.010000, // CO
  44.009000, // CO2v1
  44.009000, // CO2v2
  44.009000, // CO2v3
  44.009000, // CO2v4
  44.008451, // CO2p
  15.999549, // Om
  15.998451, // Op
  28.009451, // COp
  39.950000, // ARe
  39.949451, // ARp
};

//  inverse molecular weights
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
get_imw(amrex::Real* imw_new)
{
  imw_new[0] = 1822.8884868472639482; // E
  imw_new[1] = 0.0625039064941559;    // O
  imw_new[2] = 0.0312519532470779;    // O2
  imw_new[3] = 0.0250312891113892;    // AR
  imw_new[4] = 0.0227226249176305;    // CO2
  imw_new[5] = 0.0357015351660121;    // CO
  imw_new[6] = 0.0227226249176305;    // CO2v1
  imw_new[7] = 0.0227226249176305;    // CO2v2
  imw_new[8] = 0.0227226249176305;    // CO2v3
  imw_new[9] = 0.0227226249176305;    // CO2v4
  imw_new[10] = 0.0227229081626688;   // CO2p
  imw_new[11] = 0.0625017634094834;   // Om
  imw_new[12] = 0.0625060497257993;   // Op
  imw_new[13] = 0.0357022343994464;   // COp
  imw_new[14] = 0.0250312891113892;   // ARe
  imw_new[15] = 0.0250316328373182;   // ARp
}

//  inverse molecular weight
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE amrex::Real
imw(const int n)
{
#if AMREX_DEVICE_COMPILE
  return global_imw[n];
#else
  return h_global_imw[n];
#endif
}
//  molecular weights
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
get_mw(amrex::Real* mw_new)
{
  mw_new[0] = 0.000549;   // E
  mw_new[1] = 15.999000;  // O
  mw_new[2] = 31.998000;  // O2
  mw_new[3] = 39.950000;  // AR
  mw_new[4] = 44.009000;  // CO2
  mw_new[5] = 28.010000;  // CO
  mw_new[6] = 44.009000;  // CO2v1
  mw_new[7] = 44.009000;  // CO2v2
  mw_new[8] = 44.009000;  // CO2v3
  mw_new[9] = 44.009000;  // CO2v4
  mw_new[10] = 44.008451; // CO2p
  mw_new[11] = 15.999549; // Om
  mw_new[12] = 15.998451; // Op
  mw_new[13] = 28.009451; // COp
  mw_new[14] = 39.950000; // ARe
  mw_new[15] = 39.949451; // ARp
}

//  molecular weight
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE amrex::Real
mw(const int n)
{
#if AMREX_DEVICE_COMPILE
  return global_mw[n];
#else
  return h_global_mw[n];
#endif
}

//  Returns R, Rc, Patm
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRP(amrex::Real& ru, amrex::Real& ruc, amrex::Real& pa)
{
  ru = 8.31446261815324e+07;
  ruc = 1.98721558317399615845;
  pa = 1.01325e+06;
}

// compute Cv/R at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
cv_R(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: E
    species[0] = +1.50025150e+00 + 0.00000000e+00 * tc[1] +
                 0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
                 0.00000000e+00 * tc[4];
    // species 1: O
    species[1] = +2.16826710e+00 - 3.27931884e-03 * tc[1] +
                 6.64306396e-06 * tc[2] - 6.12806624e-09 * tc[3] +
                 2.11265971e-12 * tc[4];
    // species 2: O2
    species[2] = +2.78245636e+00 - 2.99673416e-03 * tc[1] +
                 9.84730201e-06 * tc[2] - 9.68129509e-09 * tc[3] +
                 3.24372837e-12 * tc[4];
    // species 4: CO2
    species[4] = +1.35677352e+00 + 8.98459677e-03 * tc[1] -
                 7.12356269e-06 * tc[2] + 2.45919022e-09 * tc[3] -
                 1.43699548e-13 * tc[4];
    // species 5: CO
    species[5] = +2.57953347e+00 - 6.10353680e-04 * tc[1] +
                 1.01681433e-06 * tc[2] + 9.07005884e-10 * tc[3] -
                 9.04424499e-13 * tc[4];
    // species 6: CO2v1
    species[6] = +1.35677352e+00 + 8.98459677e-03 * tc[1] -
                 7.12356269e-06 * tc[2] + 2.45919022e-09 * tc[3] -
                 1.43699548e-13 * tc[4];
    // species 7: CO2v2
    species[7] = +1.35677352e+00 + 8.98459677e-03 * tc[1] -
                 7.12356269e-06 * tc[2] + 2.45919022e-09 * tc[3] -
                 1.43699548e-13 * tc[4];
    // species 8: CO2v3
    species[8] = +1.35677352e+00 + 8.98459677e-03 * tc[1] -
                 7.12356269e-06 * tc[2] + 2.45919022e-09 * tc[3] -
                 1.43699548e-13 * tc[4];
    // species 9: CO2v4
    species[9] = +1.35677352e+00 + 8.98459677e-03 * tc[1] -
                 7.12356269e-06 * tc[2] + 2.45919022e-09 * tc[3] -
                 1.43699548e-13 * tc[4];
    // species 10: CO2p
    species[10] = +1.35677352e+00 + 8.98459677e-03 * tc[1] -
                  7.12356269e-06 * tc[2] + 2.45919022e-09 * tc[3] -
                  1.43699548e-13 * tc[4];
    // species 11: Om
    species[11] = +2.16826710e+00 - 3.27931884e-03 * tc[1] +
                  6.64306396e-06 * tc[2] - 6.12806624e-09 * tc[3] +
                  2.11265971e-12 * tc[4];
    // species 12: Op
    species[12] = +2.16826710e+00 - 3.27931884e-03 * tc[1] +
                  6.64306396e-06 * tc[2] - 6.12806624e-09 * tc[3] +
                  2.11265971e-12 * tc[4];
    // species 13: COp
    species[13] = +2.57953347e+00 - 6.10353680e-04 * tc[1] +
                  1.01681433e-06 * tc[2] + 9.07005884e-10 * tc[3] -
                  9.04424499e-13 * tc[4];
  } else {
    // species 0: E
    species[0] = +1.50025150e+00 + 0.00000000e+00 * tc[1] +
                 0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
                 0.00000000e+00 * tc[4];
    // species 1: O
    species[1] = +1.56942078e+00 - 8.59741137e-05 * tc[1] +
                 4.19484589e-08 * tc[2] - 1.00177799e-11 * tc[3] +
                 1.22833691e-15 * tc[4];
    // species 2: O2
    species[2] = +2.28253784e+00 + 1.48308754e-03 * tc[1] -
                 7.57966669e-07 * tc[2] + 2.09470555e-10 * tc[3] -
                 2.16717794e-14 * tc[4];
    // species 4: CO2
    species[4] = +2.85746029e+00 + 4.41437026e-03 * tc[1] -
                 2.21481404e-06 * tc[2] + 5.23490188e-10 * tc[3] -
                 4.72084164e-14 * tc[4];
    // species 5: CO
    species[5] = +1.71518561e+00 + 2.06252743e-03 * tc[1] -
                 9.98825771e-07 * tc[2] + 2.30053008e-10 * tc[3] -
                 2.03647716e-14 * tc[4];
    // species 6: CO2v1
    species[6] = +2.85746029e+00 + 4.41437026e-03 * tc[1] -
                 2.21481404e-06 * tc[2] + 5.23490188e-10 * tc[3] -
                 4.72084164e-14 * tc[4];
    // species 7: CO2v2
    species[7] = +2.85746029e+00 + 4.41437026e-03 * tc[1] -
                 2.21481404e-06 * tc[2] + 5.23490188e-10 * tc[3] -
                 4.72084164e-14 * tc[4];
    // species 8: CO2v3
    species[8] = +2.85746029e+00 + 4.41437026e-03 * tc[1] -
                 2.21481404e-06 * tc[2] + 5.23490188e-10 * tc[3] -
                 4.72084164e-14 * tc[4];
    // species 9: CO2v4
    species[9] = +2.85746029e+00 + 4.41437026e-03 * tc[1] -
                 2.21481404e-06 * tc[2] + 5.23490188e-10 * tc[3] -
                 4.72084164e-14 * tc[4];
    // species 10: CO2p
    species[10] = +2.85746029e+00 + 4.41437026e-03 * tc[1] -
                  2.21481404e-06 * tc[2] + 5.23490188e-10 * tc[3] -
                  4.72084164e-14 * tc[4];
    // species 11: Om
    species[11] = +1.56942078e+00 - 8.59741137e-05 * tc[1] +
                  4.19484589e-08 * tc[2] - 1.00177799e-11 * tc[3] +
                  1.22833691e-15 * tc[4];
    // species 12: Op
    species[12] = +1.56942078e+00 - 8.59741137e-05 * tc[1] +
                  4.19484589e-08 * tc[2] - 1.00177799e-11 * tc[3] +
                  1.22833691e-15 * tc[4];
    // species 13: COp
    species[13] = +1.71518561e+00 + 2.06252743e-03 * tc[1] -
                  9.98825771e-07 * tc[2] + 2.30053008e-10 * tc[3] -
                  2.03647716e-14 * tc[4];
  }

  // species with no change at a midpoint T
  // species 3: AR
  species[3] = +1.50000000e+00 + 0.00000000e+00 * tc[1] +
               0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
               0.00000000e+00 * tc[4];
  // species 14: ARe
  species[14] = +1.50000000e+00 + 0.00000000e+00 * tc[1] +
                0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
                0.00000000e+00 * tc[4];
  // species 15: ARp
  species[15] = +1.50000000e+00 + 0.00000000e+00 * tc[1] +
                0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
                0.00000000e+00 * tc[4];
}

// compute Cp/R at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
cp_R(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: E
    species[0] = +2.50025150e+00 + 0.00000000e+00 * tc[1] +
                 0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
                 0.00000000e+00 * tc[4];
    // species 1: O
    species[1] = +3.16826710e+00 - 3.27931884e-03 * tc[1] +
                 6.64306396e-06 * tc[2] - 6.12806624e-09 * tc[3] +
                 2.11265971e-12 * tc[4];
    // species 2: O2
    species[2] = +3.78245636e+00 - 2.99673416e-03 * tc[1] +
                 9.84730201e-06 * tc[2] - 9.68129509e-09 * tc[3] +
                 3.24372837e-12 * tc[4];
    // species 4: CO2
    species[4] = +2.35677352e+00 + 8.98459677e-03 * tc[1] -
                 7.12356269e-06 * tc[2] + 2.45919022e-09 * tc[3] -
                 1.43699548e-13 * tc[4];
    // species 5: CO
    species[5] = +3.57953347e+00 - 6.10353680e-04 * tc[1] +
                 1.01681433e-06 * tc[2] + 9.07005884e-10 * tc[3] -
                 9.04424499e-13 * tc[4];
    // species 6: CO2v1
    species[6] = +2.35677352e+00 + 8.98459677e-03 * tc[1] -
                 7.12356269e-06 * tc[2] + 2.45919022e-09 * tc[3] -
                 1.43699548e-13 * tc[4];
    // species 7: CO2v2
    species[7] = +2.35677352e+00 + 8.98459677e-03 * tc[1] -
                 7.12356269e-06 * tc[2] + 2.45919022e-09 * tc[3] -
                 1.43699548e-13 * tc[4];
    // species 8: CO2v3
    species[8] = +2.35677352e+00 + 8.98459677e-03 * tc[1] -
                 7.12356269e-06 * tc[2] + 2.45919022e-09 * tc[3] -
                 1.43699548e-13 * tc[4];
    // species 9: CO2v4
    species[9] = +2.35677352e+00 + 8.98459677e-03 * tc[1] -
                 7.12356269e-06 * tc[2] + 2.45919022e-09 * tc[3] -
                 1.43699548e-13 * tc[4];
    // species 10: CO2p
    species[10] = +2.35677352e+00 + 8.98459677e-03 * tc[1] -
                  7.12356269e-06 * tc[2] + 2.45919022e-09 * tc[3] -
                  1.43699548e-13 * tc[4];
    // species 11: Om
    species[11] = +3.16826710e+00 - 3.27931884e-03 * tc[1] +
                  6.64306396e-06 * tc[2] - 6.12806624e-09 * tc[3] +
                  2.11265971e-12 * tc[4];
    // species 12: Op
    species[12] = +3.16826710e+00 - 3.27931884e-03 * tc[1] +
                  6.64306396e-06 * tc[2] - 6.12806624e-09 * tc[3] +
                  2.11265971e-12 * tc[4];
    // species 13: COp
    species[13] = +3.57953347e+00 - 6.10353680e-04 * tc[1] +
                  1.01681433e-06 * tc[2] + 9.07005884e-10 * tc[3] -
                  9.04424499e-13 * tc[4];
  } else {
    // species 0: E
    species[0] = +2.50025150e+00 + 0.00000000e+00 * tc[1] +
                 0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
                 0.00000000e+00 * tc[4];
    // species 1: O
    species[1] = +2.56942078e+00 - 8.59741137e-05 * tc[1] +
                 4.19484589e-08 * tc[2] - 1.00177799e-11 * tc[3] +
                 1.22833691e-15 * tc[4];
    // species 2: O2
    species[2] = +3.28253784e+00 + 1.48308754e-03 * tc[1] -
                 7.57966669e-07 * tc[2] + 2.09470555e-10 * tc[3] -
                 2.16717794e-14 * tc[4];
    // species 4: CO2
    species[4] = +3.85746029e+00 + 4.41437026e-03 * tc[1] -
                 2.21481404e-06 * tc[2] + 5.23490188e-10 * tc[3] -
                 4.72084164e-14 * tc[4];
    // species 5: CO
    species[5] = +2.71518561e+00 + 2.06252743e-03 * tc[1] -
                 9.98825771e-07 * tc[2] + 2.30053008e-10 * tc[3] -
                 2.03647716e-14 * tc[4];
    // species 6: CO2v1
    species[6] = +3.85746029e+00 + 4.41437026e-03 * tc[1] -
                 2.21481404e-06 * tc[2] + 5.23490188e-10 * tc[3] -
                 4.72084164e-14 * tc[4];
    // species 7: CO2v2
    species[7] = +3.85746029e+00 + 4.41437026e-03 * tc[1] -
                 2.21481404e-06 * tc[2] + 5.23490188e-10 * tc[3] -
                 4.72084164e-14 * tc[4];
    // species 8: CO2v3
    species[8] = +3.85746029e+00 + 4.41437026e-03 * tc[1] -
                 2.21481404e-06 * tc[2] + 5.23490188e-10 * tc[3] -
                 4.72084164e-14 * tc[4];
    // species 9: CO2v4
    species[9] = +3.85746029e+00 + 4.41437026e-03 * tc[1] -
                 2.21481404e-06 * tc[2] + 5.23490188e-10 * tc[3] -
                 4.72084164e-14 * tc[4];
    // species 10: CO2p
    species[10] = +3.85746029e+00 + 4.41437026e-03 * tc[1] -
                  2.21481404e-06 * tc[2] + 5.23490188e-10 * tc[3] -
                  4.72084164e-14 * tc[4];
    // species 11: Om
    species[11] = +2.56942078e+00 - 8.59741137e-05 * tc[1] +
                  4.19484589e-08 * tc[2] - 1.00177799e-11 * tc[3] +
                  1.22833691e-15 * tc[4];
    // species 12: Op
    species[12] = +2.56942078e+00 - 8.59741137e-05 * tc[1] +
                  4.19484589e-08 * tc[2] - 1.00177799e-11 * tc[3] +
                  1.22833691e-15 * tc[4];
    // species 13: COp
    species[13] = +2.71518561e+00 + 2.06252743e-03 * tc[1] -
                  9.98825771e-07 * tc[2] + 2.30053008e-10 * tc[3] -
                  2.03647716e-14 * tc[4];
  }

  // species with no change at a midpoint T
  // species 3: AR
  species[3] = +2.50000000e+00 + 0.00000000e+00 * tc[1] +
               0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
               0.00000000e+00 * tc[4];
  // species 14: ARe
  species[14] = +2.50000000e+00 + 0.00000000e+00 * tc[1] +
                0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
                0.00000000e+00 * tc[4];
  // species 15: ARp
  species[15] = +2.50000000e+00 + 0.00000000e+00 * tc[1] +
                0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
                0.00000000e+00 * tc[4];
}

// compute the g/(RT) at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
gibbs(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];
  const amrex::Real invT = 1.0 / T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: E
    species[0] = -7.459783900000000e+02 * invT + 1.423710750000000e+01 -
                 2.500251500000000e+00 * tc[0] - 0.000000000000000e+00 * tc[1] -
                 0.000000000000000e+00 * tc[2] - 0.000000000000000e+00 * tc[3] -
                 0.000000000000000e+00 * tc[4];
    // species 1: O
    species[1] = +2.912225920000000e+04 * invT + 1.116333640000000e+00 -
                 3.168267100000000e+00 * tc[0] + 1.639659420000000e-03 * tc[1] -
                 1.107177326666667e-06 * tc[2] + 5.106721866666666e-10 * tc[3] -
                 1.056329855000000e-13 * tc[4];
    // species 2: O2
    species[2] = -1.063943560000000e+03 * invT + 1.247806300000001e-01 -
                 3.782456360000000e+00 * tc[0] + 1.498367080000000e-03 * tc[1] -
                 1.641217001666667e-06 * tc[2] + 8.067745908333334e-10 * tc[3] -
                 1.621864185000000e-13 * tc[4];
    // species 4: CO2
    species[4] = -4.837196970000000e+04 * invT - 7.544278700000000e+00 -
                 2.356773520000000e+00 * tc[0] - 4.492298385000000e-03 * tc[1] +
                 1.187260448333333e-06 * tc[2] - 2.049325183333333e-10 * tc[3] +
                 7.184977399999999e-15 * tc[4];
    // species 5: CO
    species[5] = -1.434408600000000e+04 * invT + 7.112418999999992e-02 -
                 3.579533470000000e+00 * tc[0] + 3.051768400000000e-04 * tc[1] -
                 1.694690550000000e-07 * tc[2] - 7.558382366666667e-11 * tc[3] +
                 4.522122495000000e-14 * tc[4];
    // species 6: CO2v1
    species[6] = -4.837196970000000e+04 * invT - 7.544278700000000e+00 -
                 2.356773520000000e+00 * tc[0] - 4.492298385000000e-03 * tc[1] +
                 1.187260448333333e-06 * tc[2] - 2.049325183333333e-10 * tc[3] +
                 7.184977399999999e-15 * tc[4];
    // species 7: CO2v2
    species[7] = -4.837196970000000e+04 * invT - 7.544278700000000e+00 -
                 2.356773520000000e+00 * tc[0] - 4.492298385000000e-03 * tc[1] +
                 1.187260448333333e-06 * tc[2] - 2.049325183333333e-10 * tc[3] +
                 7.184977399999999e-15 * tc[4];
    // species 8: CO2v3
    species[8] = -4.837196970000000e+04 * invT - 7.544278700000000e+00 -
                 2.356773520000000e+00 * tc[0] - 4.492298385000000e-03 * tc[1] +
                 1.187260448333333e-06 * tc[2] - 2.049325183333333e-10 * tc[3] +
                 7.184977399999999e-15 * tc[4];
    // species 9: CO2v4
    species[9] = -4.837196970000000e+04 * invT - 7.544278700000000e+00 -
                 2.356773520000000e+00 * tc[0] - 4.492298385000000e-03 * tc[1] +
                 1.187260448333333e-06 * tc[2] - 2.049325183333333e-10 * tc[3] +
                 7.184977399999999e-15 * tc[4];
    // species 10: CO2p
    species[10] = -4.837196970000000e+04 * invT - 7.544278700000000e+00 -
                  2.356773520000000e+00 * tc[0] -
                  4.492298385000000e-03 * tc[1] +
                  1.187260448333333e-06 * tc[2] -
                  2.049325183333333e-10 * tc[3] + 7.184977399999999e-15 * tc[4];
    // species 11: Om
    species[11] = +2.912225920000000e+04 * invT + 1.116333640000000e+00 -
                  3.168267100000000e+00 * tc[0] +
                  1.639659420000000e-03 * tc[1] -
                  1.107177326666667e-06 * tc[2] +
                  5.106721866666666e-10 * tc[3] - 1.056329855000000e-13 * tc[4];
    // species 12: Op
    species[12] = +2.912225920000000e+04 * invT + 1.116333640000000e+00 -
                  3.168267100000000e+00 * tc[0] +
                  1.639659420000000e-03 * tc[1] -
                  1.107177326666667e-06 * tc[2] +
                  5.106721866666666e-10 * tc[3] - 1.056329855000000e-13 * tc[4];
    // species 13: COp
    species[13] = -1.434408600000000e+04 * invT + 7.112418999999992e-02 -
                  3.579533470000000e+00 * tc[0] +
                  3.051768400000000e-04 * tc[1] -
                  1.694690550000000e-07 * tc[2] -
                  7.558382366666667e-11 * tc[3] + 4.522122495000000e-14 * tc[4];
  } else {
    // species 0: E
    species[0] = -7.459784500000000e+02 * invT + 1.423710750000000e+01 -
                 2.500251500000000e+00 * tc[0] - 0.000000000000000e+00 * tc[1] -
                 0.000000000000000e+00 * tc[2] - 0.000000000000000e+00 * tc[3] -
                 0.000000000000000e+00 * tc[4];
    // species 1: O
    species[1] = +2.921757910000000e+04 * invT - 2.214917859999999e+00 -
                 2.569420780000000e+00 * tc[0] + 4.298705685000000e-05 * tc[1] -
                 6.991409816666667e-09 * tc[2] + 8.348149916666666e-13 * tc[3] -
                 6.141684549999999e-17 * tc[4];
    // species 2: O2
    species[2] = -1.088457720000000e+03 * invT - 2.170693450000000e+00 -
                 3.282537840000000e+00 * tc[0] - 7.415437700000000e-04 * tc[1] +
                 1.263277781666667e-07 * tc[2] - 1.745587958333333e-11 * tc[3] +
                 1.083588970000000e-15 * tc[4];
    // species 4: CO2
    species[4] = -4.875916600000000e+04 * invT + 1.585822230000000e+00 -
                 3.857460290000000e+00 * tc[0] - 2.207185130000000e-03 * tc[1] +
                 3.691356733333334e-07 * tc[2] - 4.362418233333334e-11 * tc[3] +
                 2.360420820000000e-15 * tc[4];
    // species 5: CO
    species[5] = -1.415187240000000e+04 * invT - 5.103502110000000e+00 -
                 2.715185610000000e+00 * tc[0] - 1.031263715000000e-03 * tc[1] +
                 1.664709618333334e-07 * tc[2] - 1.917108400000000e-11 * tc[3] +
                 1.018238580000000e-15 * tc[4];
    // species 6: CO2v1
    species[6] = -4.875916600000000e+04 * invT + 1.585822230000000e+00 -
                 3.857460290000000e+00 * tc[0] - 2.207185130000000e-03 * tc[1] +
                 3.691356733333334e-07 * tc[2] - 4.362418233333334e-11 * tc[3] +
                 2.360420820000000e-15 * tc[4];
    // species 7: CO2v2
    species[7] = -4.875916600000000e+04 * invT + 1.585822230000000e+00 -
                 3.857460290000000e+00 * tc[0] - 2.207185130000000e-03 * tc[1] +
                 3.691356733333334e-07 * tc[2] - 4.362418233333334e-11 * tc[3] +
                 2.360420820000000e-15 * tc[4];
    // species 8: CO2v3
    species[8] = -4.875916600000000e+04 * invT + 1.585822230000000e+00 -
                 3.857460290000000e+00 * tc[0] - 2.207185130000000e-03 * tc[1] +
                 3.691356733333334e-07 * tc[2] - 4.362418233333334e-11 * tc[3] +
                 2.360420820000000e-15 * tc[4];
    // species 9: CO2v4
    species[9] = -4.875916600000000e+04 * invT + 1.585822230000000e+00 -
                 3.857460290000000e+00 * tc[0] - 2.207185130000000e-03 * tc[1] +
                 3.691356733333334e-07 * tc[2] - 4.362418233333334e-11 * tc[3] +
                 2.360420820000000e-15 * tc[4];
    // species 10: CO2p
    species[10] = -4.875916600000000e+04 * invT + 1.585822230000000e+00 -
                  3.857460290000000e+00 * tc[0] -
                  2.207185130000000e-03 * tc[1] +
                  3.691356733333334e-07 * tc[2] -
                  4.362418233333334e-11 * tc[3] + 2.360420820000000e-15 * tc[4];
    // species 11: Om
    species[11] = +2.921757910000000e+04 * invT - 2.214917859999999e+00 -
                  2.569420780000000e+00 * tc[0] +
                  4.298705685000000e-05 * tc[1] -
                  6.991409816666667e-09 * tc[2] +
                  8.348149916666666e-13 * tc[3] - 6.141684549999999e-17 * tc[4];
    // species 12: Op
    species[12] = +2.921757910000000e+04 * invT - 2.214917859999999e+00 -
                  2.569420780000000e+00 * tc[0] +
                  4.298705685000000e-05 * tc[1] -
                  6.991409816666667e-09 * tc[2] +
                  8.348149916666666e-13 * tc[3] - 6.141684549999999e-17 * tc[4];
    // species 13: COp
    species[13] = -1.415187240000000e+04 * invT - 5.103502110000000e+00 -
                  2.715185610000000e+00 * tc[0] -
                  1.031263715000000e-03 * tc[1] +
                  1.664709618333334e-07 * tc[2] -
                  1.917108400000000e-11 * tc[3] + 1.018238580000000e-15 * tc[4];
  }

  // species with no change at a midpoint T
  // species 3: AR
  species[3] = -7.453750000000000e+02 * invT - 1.866000000000000e+00 -
               2.500000000000000e+00 * tc[0] - 0.000000000000000e+00 * tc[1] -
               0.000000000000000e+00 * tc[2] - 0.000000000000000e+00 * tc[3] -
               0.000000000000000e+00 * tc[4];
  // species 14: ARe
  species[14] = -7.453750000000000e+02 * invT - 1.866000000000000e+00 -
                2.500000000000000e+00 * tc[0] - 0.000000000000000e+00 * tc[1] -
                0.000000000000000e+00 * tc[2] - 0.000000000000000e+00 * tc[3] -
                0.000000000000000e+00 * tc[4];
  // species 15: ARp
  species[15] = -7.453750000000000e+02 * invT - 1.866000000000000e+00 -
                2.500000000000000e+00 * tc[0] - 0.000000000000000e+00 * tc[1] -
                0.000000000000000e+00 * tc[2] - 0.000000000000000e+00 * tc[3] -
                0.000000000000000e+00 * tc[4];
}

// compute the a/(RT) at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
helmholtz(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];
  const amrex::Real invT = 1.0 / T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: E
    species[0] = -7.45978390e+02 * invT + 1.32371075e+01 -
                 2.50025150e+00 * tc[0] - 0.00000000e+00 * tc[1] -
                 0.00000000e+00 * tc[2] - 0.00000000e+00 * tc[3] -
                 0.00000000e+00 * tc[4];
    // species 1: O
    species[1] = +2.91222592e+04 * invT + 1.16333640e-01 -
                 3.16826710e+00 * tc[0] + 1.63965942e-03 * tc[1] -
                 1.10717733e-06 * tc[2] + 5.10672187e-10 * tc[3] -
                 1.05632985e-13 * tc[4];
    // species 2: O2
    species[2] = -1.06394356e+03 * invT - 8.75219370e-01 -
                 3.78245636e+00 * tc[0] + 1.49836708e-03 * tc[1] -
                 1.64121700e-06 * tc[2] + 8.06774591e-10 * tc[3] -
                 1.62186418e-13 * tc[4];
    // species 4: CO2
    species[4] = -4.83719697e+04 * invT - 8.54427870e+00 -
                 2.35677352e+00 * tc[0] - 4.49229839e-03 * tc[1] +
                 1.18726045e-06 * tc[2] - 2.04932518e-10 * tc[3] +
                 7.18497740e-15 * tc[4];
    // species 5: CO
    species[5] = -1.43440860e+04 * invT - 9.28875810e-01 -
                 3.57953347e+00 * tc[0] + 3.05176840e-04 * tc[1] -
                 1.69469055e-07 * tc[2] - 7.55838237e-11 * tc[3] +
                 4.52212249e-14 * tc[4];
    // species 6: CO2v1
    species[6] = -4.83719697e+04 * invT - 8.54427870e+00 -
                 2.35677352e+00 * tc[0] - 4.49229839e-03 * tc[1] +
                 1.18726045e-06 * tc[2] - 2.04932518e-10 * tc[3] +
                 7.18497740e-15 * tc[4];
    // species 7: CO2v2
    species[7] = -4.83719697e+04 * invT - 8.54427870e+00 -
                 2.35677352e+00 * tc[0] - 4.49229839e-03 * tc[1] +
                 1.18726045e-06 * tc[2] - 2.04932518e-10 * tc[3] +
                 7.18497740e-15 * tc[4];
    // species 8: CO2v3
    species[8] = -4.83719697e+04 * invT - 8.54427870e+00 -
                 2.35677352e+00 * tc[0] - 4.49229839e-03 * tc[1] +
                 1.18726045e-06 * tc[2] - 2.04932518e-10 * tc[3] +
                 7.18497740e-15 * tc[4];
    // species 9: CO2v4
    species[9] = -4.83719697e+04 * invT - 8.54427870e+00 -
                 2.35677352e+00 * tc[0] - 4.49229839e-03 * tc[1] +
                 1.18726045e-06 * tc[2] - 2.04932518e-10 * tc[3] +
                 7.18497740e-15 * tc[4];
    // species 10: CO2p
    species[10] = -4.83719697e+04 * invT - 8.54427870e+00 -
                  2.35677352e+00 * tc[0] - 4.49229839e-03 * tc[1] +
                  1.18726045e-06 * tc[2] - 2.04932518e-10 * tc[3] +
                  7.18497740e-15 * tc[4];
    // species 11: Om
    species[11] = +2.91222592e+04 * invT + 1.16333640e-01 -
                  3.16826710e+00 * tc[0] + 1.63965942e-03 * tc[1] -
                  1.10717733e-06 * tc[2] + 5.10672187e-10 * tc[3] -
                  1.05632985e-13 * tc[4];
    // species 12: Op
    species[12] = +2.91222592e+04 * invT + 1.16333640e-01 -
                  3.16826710e+00 * tc[0] + 1.63965942e-03 * tc[1] -
                  1.10717733e-06 * tc[2] + 5.10672187e-10 * tc[3] -
                  1.05632985e-13 * tc[4];
    // species 13: COp
    species[13] = -1.43440860e+04 * invT - 9.28875810e-01 -
                  3.57953347e+00 * tc[0] + 3.05176840e-04 * tc[1] -
                  1.69469055e-07 * tc[2] - 7.55838237e-11 * tc[3] +
                  4.52212249e-14 * tc[4];
  } else {
    // species 0: E
    species[0] = -7.45978450e+02 * invT + 1.32371075e+01 -
                 2.50025150e+00 * tc[0] - 0.00000000e+00 * tc[1] -
                 0.00000000e+00 * tc[2] - 0.00000000e+00 * tc[3] -
                 0.00000000e+00 * tc[4];
    // species 1: O
    species[1] = +2.92175791e+04 * invT - 3.21491786e+00 -
                 2.56942078e+00 * tc[0] + 4.29870569e-05 * tc[1] -
                 6.99140982e-09 * tc[2] + 8.34814992e-13 * tc[3] -
                 6.14168455e-17 * tc[4];
    // species 2: O2
    species[2] = -1.08845772e+03 * invT - 3.17069345e+00 -
                 3.28253784e+00 * tc[0] - 7.41543770e-04 * tc[1] +
                 1.26327778e-07 * tc[2] - 1.74558796e-11 * tc[3] +
                 1.08358897e-15 * tc[4];
    // species 4: CO2
    species[4] = -4.87591660e+04 * invT + 5.85822230e-01 -
                 3.85746029e+00 * tc[0] - 2.20718513e-03 * tc[1] +
                 3.69135673e-07 * tc[2] - 4.36241823e-11 * tc[3] +
                 2.36042082e-15 * tc[4];
    // species 5: CO
    species[5] = -1.41518724e+04 * invT - 6.10350211e+00 -
                 2.71518561e+00 * tc[0] - 1.03126372e-03 * tc[1] +
                 1.66470962e-07 * tc[2] - 1.91710840e-11 * tc[3] +
                 1.01823858e-15 * tc[4];
    // species 6: CO2v1
    species[6] = -4.87591660e+04 * invT + 5.85822230e-01 -
                 3.85746029e+00 * tc[0] - 2.20718513e-03 * tc[1] +
                 3.69135673e-07 * tc[2] - 4.36241823e-11 * tc[3] +
                 2.36042082e-15 * tc[4];
    // species 7: CO2v2
    species[7] = -4.87591660e+04 * invT + 5.85822230e-01 -
                 3.85746029e+00 * tc[0] - 2.20718513e-03 * tc[1] +
                 3.69135673e-07 * tc[2] - 4.36241823e-11 * tc[3] +
                 2.36042082e-15 * tc[4];
    // species 8: CO2v3
    species[8] = -4.87591660e+04 * invT + 5.85822230e-01 -
                 3.85746029e+00 * tc[0] - 2.20718513e-03 * tc[1] +
                 3.69135673e-07 * tc[2] - 4.36241823e-11 * tc[3] +
                 2.36042082e-15 * tc[4];
    // species 9: CO2v4
    species[9] = -4.87591660e+04 * invT + 5.85822230e-01 -
                 3.85746029e+00 * tc[0] - 2.20718513e-03 * tc[1] +
                 3.69135673e-07 * tc[2] - 4.36241823e-11 * tc[3] +
                 2.36042082e-15 * tc[4];
    // species 10: CO2p
    species[10] = -4.87591660e+04 * invT + 5.85822230e-01 -
                  3.85746029e+00 * tc[0] - 2.20718513e-03 * tc[1] +
                  3.69135673e-07 * tc[2] - 4.36241823e-11 * tc[3] +
                  2.36042082e-15 * tc[4];
    // species 11: Om
    species[11] = +2.92175791e+04 * invT - 3.21491786e+00 -
                  2.56942078e+00 * tc[0] + 4.29870569e-05 * tc[1] -
                  6.99140982e-09 * tc[2] + 8.34814992e-13 * tc[3] -
                  6.14168455e-17 * tc[4];
    // species 12: Op
    species[12] = +2.92175791e+04 * invT - 3.21491786e+00 -
                  2.56942078e+00 * tc[0] + 4.29870569e-05 * tc[1] -
                  6.99140982e-09 * tc[2] + 8.34814992e-13 * tc[3] -
                  6.14168455e-17 * tc[4];
    // species 13: COp
    species[13] = -1.41518724e+04 * invT - 6.10350211e+00 -
                  2.71518561e+00 * tc[0] - 1.03126372e-03 * tc[1] +
                  1.66470962e-07 * tc[2] - 1.91710840e-11 * tc[3] +
                  1.01823858e-15 * tc[4];
  }

  // species with no change at a midpoint T
  // species 3: AR
  species[3] = -7.45375000e+02 * invT - 2.86600000e+00 -
               2.50000000e+00 * tc[0] - 0.00000000e+00 * tc[1] -
               0.00000000e+00 * tc[2] - 0.00000000e+00 * tc[3] -
               0.00000000e+00 * tc[4];
  // species 14: ARe
  species[14] = -7.45375000e+02 * invT - 2.86600000e+00 -
                2.50000000e+00 * tc[0] - 0.00000000e+00 * tc[1] -
                0.00000000e+00 * tc[2] - 0.00000000e+00 * tc[3] -
                0.00000000e+00 * tc[4];
  // species 15: ARp
  species[15] = -7.45375000e+02 * invT - 2.86600000e+00 -
                2.50000000e+00 * tc[0] - 0.00000000e+00 * tc[1] -
                0.00000000e+00 * tc[2] - 0.00000000e+00 * tc[3] -
                0.00000000e+00 * tc[4];
}

// compute the e/(RT) at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
speciesInternalEnergy(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];
  const amrex::Real invT = 1.0 / T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: E
    species[0] = +1.50025150e+00 + 0.00000000e+00 * tc[1] +
                 0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
                 0.00000000e+00 * tc[4] - 7.45978390e+02 * invT;
    // species 1: O
    species[1] = +2.16826710e+00 - 1.63965942e-03 * tc[1] +
                 2.21435465e-06 * tc[2] - 1.53201656e-09 * tc[3] +
                 4.22531942e-13 * tc[4] + 2.91222592e+04 * invT;
    // species 2: O2
    species[2] = +2.78245636e+00 - 1.49836708e-03 * tc[1] +
                 3.28243400e-06 * tc[2] - 2.42032377e-09 * tc[3] +
                 6.48745674e-13 * tc[4] - 1.06394356e+03 * invT;
    // species 4: CO2
    species[4] = +1.35677352e+00 + 4.49229839e-03 * tc[1] -
                 2.37452090e-06 * tc[2] + 6.14797555e-10 * tc[3] -
                 2.87399096e-14 * tc[4] - 4.83719697e+04 * invT;
    // species 5: CO
    species[5] = +2.57953347e+00 - 3.05176840e-04 * tc[1] +
                 3.38938110e-07 * tc[2] + 2.26751471e-10 * tc[3] -
                 1.80884900e-13 * tc[4] - 1.43440860e+04 * invT;
    // species 6: CO2v1
    species[6] = +1.35677352e+00 + 4.49229839e-03 * tc[1] -
                 2.37452090e-06 * tc[2] + 6.14797555e-10 * tc[3] -
                 2.87399096e-14 * tc[4] - 4.83719697e+04 * invT;
    // species 7: CO2v2
    species[7] = +1.35677352e+00 + 4.49229839e-03 * tc[1] -
                 2.37452090e-06 * tc[2] + 6.14797555e-10 * tc[3] -
                 2.87399096e-14 * tc[4] - 4.83719697e+04 * invT;
    // species 8: CO2v3
    species[8] = +1.35677352e+00 + 4.49229839e-03 * tc[1] -
                 2.37452090e-06 * tc[2] + 6.14797555e-10 * tc[3] -
                 2.87399096e-14 * tc[4] - 4.83719697e+04 * invT;
    // species 9: CO2v4
    species[9] = +1.35677352e+00 + 4.49229839e-03 * tc[1] -
                 2.37452090e-06 * tc[2] + 6.14797555e-10 * tc[3] -
                 2.87399096e-14 * tc[4] - 4.83719697e+04 * invT;
    // species 10: CO2p
    species[10] = +1.35677352e+00 + 4.49229839e-03 * tc[1] -
                  2.37452090e-06 * tc[2] + 6.14797555e-10 * tc[3] -
                  2.87399096e-14 * tc[4] - 4.83719697e+04 * invT;
    // species 11: Om
    species[11] = +2.16826710e+00 - 1.63965942e-03 * tc[1] +
                  2.21435465e-06 * tc[2] - 1.53201656e-09 * tc[3] +
                  4.22531942e-13 * tc[4] + 2.91222592e+04 * invT;
    // species 12: Op
    species[12] = +2.16826710e+00 - 1.63965942e-03 * tc[1] +
                  2.21435465e-06 * tc[2] - 1.53201656e-09 * tc[3] +
                  4.22531942e-13 * tc[4] + 2.91222592e+04 * invT;
    // species 13: COp
    species[13] = +2.57953347e+00 - 3.05176840e-04 * tc[1] +
                  3.38938110e-07 * tc[2] + 2.26751471e-10 * tc[3] -
                  1.80884900e-13 * tc[4] - 1.43440860e+04 * invT;
  } else {
    // species 0: E
    species[0] = +1.50025150e+00 + 0.00000000e+00 * tc[1] +
                 0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
                 0.00000000e+00 * tc[4] - 7.45978450e+02 * invT;
    // species 1: O
    species[1] = +1.56942078e+00 - 4.29870569e-05 * tc[1] +
                 1.39828196e-08 * tc[2] - 2.50444497e-12 * tc[3] +
                 2.45667382e-16 * tc[4] + 2.92175791e+04 * invT;
    // species 2: O2
    species[2] = +2.28253784e+00 + 7.41543770e-04 * tc[1] -
                 2.52655556e-07 * tc[2] + 5.23676387e-11 * tc[3] -
                 4.33435588e-15 * tc[4] - 1.08845772e+03 * invT;
    // species 4: CO2
    species[4] = +2.85746029e+00 + 2.20718513e-03 * tc[1] -
                 7.38271347e-07 * tc[2] + 1.30872547e-10 * tc[3] -
                 9.44168328e-15 * tc[4] - 4.87591660e+04 * invT;
    // species 5: CO
    species[5] = +1.71518561e+00 + 1.03126372e-03 * tc[1] -
                 3.32941924e-07 * tc[2] + 5.75132520e-11 * tc[3] -
                 4.07295432e-15 * tc[4] - 1.41518724e+04 * invT;
    // species 6: CO2v1
    species[6] = +2.85746029e+00 + 2.20718513e-03 * tc[1] -
                 7.38271347e-07 * tc[2] + 1.30872547e-10 * tc[3] -
                 9.44168328e-15 * tc[4] - 4.87591660e+04 * invT;
    // species 7: CO2v2
    species[7] = +2.85746029e+00 + 2.20718513e-03 * tc[1] -
                 7.38271347e-07 * tc[2] + 1.30872547e-10 * tc[3] -
                 9.44168328e-15 * tc[4] - 4.87591660e+04 * invT;
    // species 8: CO2v3
    species[8] = +2.85746029e+00 + 2.20718513e-03 * tc[1] -
                 7.38271347e-07 * tc[2] + 1.30872547e-10 * tc[3] -
                 9.44168328e-15 * tc[4] - 4.87591660e+04 * invT;
    // species 9: CO2v4
    species[9] = +2.85746029e+00 + 2.20718513e-03 * tc[1] -
                 7.38271347e-07 * tc[2] + 1.30872547e-10 * tc[3] -
                 9.44168328e-15 * tc[4] - 4.87591660e+04 * invT;
    // species 10: CO2p
    species[10] = +2.85746029e+00 + 2.20718513e-03 * tc[1] -
                  7.38271347e-07 * tc[2] + 1.30872547e-10 * tc[3] -
                  9.44168328e-15 * tc[4] - 4.87591660e+04 * invT;
    // species 11: Om
    species[11] = +1.56942078e+00 - 4.29870569e-05 * tc[1] +
                  1.39828196e-08 * tc[2] - 2.50444497e-12 * tc[3] +
                  2.45667382e-16 * tc[4] + 2.92175791e+04 * invT;
    // species 12: Op
    species[12] = +1.56942078e+00 - 4.29870569e-05 * tc[1] +
                  1.39828196e-08 * tc[2] - 2.50444497e-12 * tc[3] +
                  2.45667382e-16 * tc[4] + 2.92175791e+04 * invT;
    // species 13: COp
    species[13] = +1.71518561e+00 + 1.03126372e-03 * tc[1] -
                  3.32941924e-07 * tc[2] + 5.75132520e-11 * tc[3] -
                  4.07295432e-15 * tc[4] - 1.41518724e+04 * invT;
  }

  // species with no change at a midpoint T
  // species 3: AR
  species[3] = +1.50000000e+00 + 0.00000000e+00 * tc[1] +
               0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
               0.00000000e+00 * tc[4] - 7.45375000e+02 * invT;
  // species 14: ARe
  species[14] = +1.50000000e+00 + 0.00000000e+00 * tc[1] +
                0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
                0.00000000e+00 * tc[4] - 7.45375000e+02 * invT;
  // species 15: ARp
  species[15] = +1.50000000e+00 + 0.00000000e+00 * tc[1] +
                0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
                0.00000000e+00 * tc[4] - 7.45375000e+02 * invT;
}

// compute the h/(RT) at the given temperature (Eq 20)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
speciesEnthalpy(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];
  const amrex::Real invT = 1.0 / T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: E
    species[0] = +2.50025150e+00 + 0.00000000e+00 * tc[1] +
                 0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
                 0.00000000e+00 * tc[4] - 7.45978390e+02 * invT;
    // species 1: O
    species[1] = +3.16826710e+00 - 1.63965942e-03 * tc[1] +
                 2.21435465e-06 * tc[2] - 1.53201656e-09 * tc[3] +
                 4.22531942e-13 * tc[4] + 2.91222592e+04 * invT;
    // species 2: O2
    species[2] = +3.78245636e+00 - 1.49836708e-03 * tc[1] +
                 3.28243400e-06 * tc[2] - 2.42032377e-09 * tc[3] +
                 6.48745674e-13 * tc[4] - 1.06394356e+03 * invT;
    // species 4: CO2
    species[4] = +2.35677352e+00 + 4.49229839e-03 * tc[1] -
                 2.37452090e-06 * tc[2] + 6.14797555e-10 * tc[3] -
                 2.87399096e-14 * tc[4] - 4.83719697e+04 * invT;
    // species 5: CO
    species[5] = +3.57953347e+00 - 3.05176840e-04 * tc[1] +
                 3.38938110e-07 * tc[2] + 2.26751471e-10 * tc[3] -
                 1.80884900e-13 * tc[4] - 1.43440860e+04 * invT;
    // species 6: CO2v1
    species[6] = +2.35677352e+00 + 4.49229839e-03 * tc[1] -
                 2.37452090e-06 * tc[2] + 6.14797555e-10 * tc[3] -
                 2.87399096e-14 * tc[4] - 4.83719697e+04 * invT;
    // species 7: CO2v2
    species[7] = +2.35677352e+00 + 4.49229839e-03 * tc[1] -
                 2.37452090e-06 * tc[2] + 6.14797555e-10 * tc[3] -
                 2.87399096e-14 * tc[4] - 4.83719697e+04 * invT;
    // species 8: CO2v3
    species[8] = +2.35677352e+00 + 4.49229839e-03 * tc[1] -
                 2.37452090e-06 * tc[2] + 6.14797555e-10 * tc[3] -
                 2.87399096e-14 * tc[4] - 4.83719697e+04 * invT;
    // species 9: CO2v4
    species[9] = +2.35677352e+00 + 4.49229839e-03 * tc[1] -
                 2.37452090e-06 * tc[2] + 6.14797555e-10 * tc[3] -
                 2.87399096e-14 * tc[4] - 4.83719697e+04 * invT;
    // species 10: CO2p
    species[10] = +2.35677352e+00 + 4.49229839e-03 * tc[1] -
                  2.37452090e-06 * tc[2] + 6.14797555e-10 * tc[3] -
                  2.87399096e-14 * tc[4] - 4.83719697e+04 * invT;
    // species 11: Om
    species[11] = +3.16826710e+00 - 1.63965942e-03 * tc[1] +
                  2.21435465e-06 * tc[2] - 1.53201656e-09 * tc[3] +
                  4.22531942e-13 * tc[4] + 2.91222592e+04 * invT;
    // species 12: Op
    species[12] = +3.16826710e+00 - 1.63965942e-03 * tc[1] +
                  2.21435465e-06 * tc[2] - 1.53201656e-09 * tc[3] +
                  4.22531942e-13 * tc[4] + 2.91222592e+04 * invT;
    // species 13: COp
    species[13] = +3.57953347e+00 - 3.05176840e-04 * tc[1] +
                  3.38938110e-07 * tc[2] + 2.26751471e-10 * tc[3] -
                  1.80884900e-13 * tc[4] - 1.43440860e+04 * invT;
  } else {
    // species 0: E
    species[0] = +2.50025150e+00 + 0.00000000e+00 * tc[1] +
                 0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
                 0.00000000e+00 * tc[4] - 7.45978450e+02 * invT;
    // species 1: O
    species[1] = +2.56942078e+00 - 4.29870569e-05 * tc[1] +
                 1.39828196e-08 * tc[2] - 2.50444497e-12 * tc[3] +
                 2.45667382e-16 * tc[4] + 2.92175791e+04 * invT;
    // species 2: O2
    species[2] = +3.28253784e+00 + 7.41543770e-04 * tc[1] -
                 2.52655556e-07 * tc[2] + 5.23676387e-11 * tc[3] -
                 4.33435588e-15 * tc[4] - 1.08845772e+03 * invT;
    // species 4: CO2
    species[4] = +3.85746029e+00 + 2.20718513e-03 * tc[1] -
                 7.38271347e-07 * tc[2] + 1.30872547e-10 * tc[3] -
                 9.44168328e-15 * tc[4] - 4.87591660e+04 * invT;
    // species 5: CO
    species[5] = +2.71518561e+00 + 1.03126372e-03 * tc[1] -
                 3.32941924e-07 * tc[2] + 5.75132520e-11 * tc[3] -
                 4.07295432e-15 * tc[4] - 1.41518724e+04 * invT;
    // species 6: CO2v1
    species[6] = +3.85746029e+00 + 2.20718513e-03 * tc[1] -
                 7.38271347e-07 * tc[2] + 1.30872547e-10 * tc[3] -
                 9.44168328e-15 * tc[4] - 4.87591660e+04 * invT;
    // species 7: CO2v2
    species[7] = +3.85746029e+00 + 2.20718513e-03 * tc[1] -
                 7.38271347e-07 * tc[2] + 1.30872547e-10 * tc[3] -
                 9.44168328e-15 * tc[4] - 4.87591660e+04 * invT;
    // species 8: CO2v3
    species[8] = +3.85746029e+00 + 2.20718513e-03 * tc[1] -
                 7.38271347e-07 * tc[2] + 1.30872547e-10 * tc[3] -
                 9.44168328e-15 * tc[4] - 4.87591660e+04 * invT;
    // species 9: CO2v4
    species[9] = +3.85746029e+00 + 2.20718513e-03 * tc[1] -
                 7.38271347e-07 * tc[2] + 1.30872547e-10 * tc[3] -
                 9.44168328e-15 * tc[4] - 4.87591660e+04 * invT;
    // species 10: CO2p
    species[10] = +3.85746029e+00 + 2.20718513e-03 * tc[1] -
                  7.38271347e-07 * tc[2] + 1.30872547e-10 * tc[3] -
                  9.44168328e-15 * tc[4] - 4.87591660e+04 * invT;
    // species 11: Om
    species[11] = +2.56942078e+00 - 4.29870569e-05 * tc[1] +
                  1.39828196e-08 * tc[2] - 2.50444497e-12 * tc[3] +
                  2.45667382e-16 * tc[4] + 2.92175791e+04 * invT;
    // species 12: Op
    species[12] = +2.56942078e+00 - 4.29870569e-05 * tc[1] +
                  1.39828196e-08 * tc[2] - 2.50444497e-12 * tc[3] +
                  2.45667382e-16 * tc[4] + 2.92175791e+04 * invT;
    // species 13: COp
    species[13] = +2.71518561e+00 + 1.03126372e-03 * tc[1] -
                  3.32941924e-07 * tc[2] + 5.75132520e-11 * tc[3] -
                  4.07295432e-15 * tc[4] - 1.41518724e+04 * invT;
  }

  // species with no change at a midpoint T
  // species 3: AR
  species[3] = +2.50000000e+00 + 0.00000000e+00 * tc[1] +
               0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
               0.00000000e+00 * tc[4] - 7.45375000e+02 * invT;
  // species 14: ARe
  species[14] = +2.50000000e+00 + 0.00000000e+00 * tc[1] +
                0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
                0.00000000e+00 * tc[4] - 7.45375000e+02 * invT;
  // species 15: ARp
  species[15] = +2.50000000e+00 + 0.00000000e+00 * tc[1] +
                0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
                0.00000000e+00 * tc[4] - 7.45375000e+02 * invT;
}

// compute the S/R at the given temperature (Eq 21)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
speciesEntropy(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: E
    species[0] = +2.50025150e+00 * tc[0] + 0.00000000e+00 * tc[1] +
                 0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
                 0.00000000e+00 * tc[4] - 1.17368560e+01;
    // species 1: O
    species[1] = +3.16826710e+00 * tc[0] - 3.27931884e-03 * tc[1] +
                 3.32153198e-06 * tc[2] - 2.04268875e-09 * tc[3] +
                 5.28164927e-13 * tc[4] + 2.05193346e+00;
    // species 2: O2
    species[2] = +3.78245636e+00 * tc[0] - 2.99673416e-03 * tc[1] +
                 4.92365101e-06 * tc[2] - 3.22709836e-09 * tc[3] +
                 8.10932092e-13 * tc[4] + 3.65767573e+00;
    // species 4: CO2
    species[4] = +2.35677352e+00 * tc[0] + 8.98459677e-03 * tc[1] -
                 3.56178134e-06 * tc[2] + 8.19730073e-10 * tc[3] -
                 3.59248870e-14 * tc[4] + 9.90105222e+00;
    // species 5: CO
    species[5] = +3.57953347e+00 * tc[0] - 6.10353680e-04 * tc[1] +
                 5.08407165e-07 * tc[2] + 3.02335295e-10 * tc[3] -
                 2.26106125e-13 * tc[4] + 3.50840928e+00;
    // species 6: CO2v1
    species[6] = +2.35677352e+00 * tc[0] + 8.98459677e-03 * tc[1] -
                 3.56178134e-06 * tc[2] + 8.19730073e-10 * tc[3] -
                 3.59248870e-14 * tc[4] + 9.90105222e+00;
    // species 7: CO2v2
    species[7] = +2.35677352e+00 * tc[0] + 8.98459677e-03 * tc[1] -
                 3.56178134e-06 * tc[2] + 8.19730073e-10 * tc[3] -
                 3.59248870e-14 * tc[4] + 9.90105222e+00;
    // species 8: CO2v3
    species[8] = +2.35677352e+00 * tc[0] + 8.98459677e-03 * tc[1] -
                 3.56178134e-06 * tc[2] + 8.19730073e-10 * tc[3] -
                 3.59248870e-14 * tc[4] + 9.90105222e+00;
    // species 9: CO2v4
    species[9] = +2.35677352e+00 * tc[0] + 8.98459677e-03 * tc[1] -
                 3.56178134e-06 * tc[2] + 8.19730073e-10 * tc[3] -
                 3.59248870e-14 * tc[4] + 9.90105222e+00;
    // species 10: CO2p
    species[10] = +2.35677352e+00 * tc[0] + 8.98459677e-03 * tc[1] -
                  3.56178134e-06 * tc[2] + 8.19730073e-10 * tc[3] -
                  3.59248870e-14 * tc[4] + 9.90105222e+00;
    // species 11: Om
    species[11] = +3.16826710e+00 * tc[0] - 3.27931884e-03 * tc[1] +
                  3.32153198e-06 * tc[2] - 2.04268875e-09 * tc[3] +
                  5.28164927e-13 * tc[4] + 2.05193346e+00;
    // species 12: Op
    species[12] = +3.16826710e+00 * tc[0] - 3.27931884e-03 * tc[1] +
                  3.32153198e-06 * tc[2] - 2.04268875e-09 * tc[3] +
                  5.28164927e-13 * tc[4] + 2.05193346e+00;
    // species 13: COp
    species[13] = +3.57953347e+00 * tc[0] - 6.10353680e-04 * tc[1] +
                  5.08407165e-07 * tc[2] + 3.02335295e-10 * tc[3] -
                  2.26106125e-13 * tc[4] + 3.50840928e+00;
  } else {
    // species 0: E
    species[0] = +2.50025150e+00 * tc[0] + 0.00000000e+00 * tc[1] +
                 0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
                 0.00000000e+00 * tc[4] - 1.17368560e+01;
    // species 1: O
    species[1] = +2.56942078e+00 * tc[0] - 8.59741137e-05 * tc[1] +
                 2.09742295e-08 * tc[2] - 3.33925997e-12 * tc[3] +
                 3.07084227e-16 * tc[4] + 4.78433864e+00;
    // species 2: O2
    species[2] = +3.28253784e+00 * tc[0] + 1.48308754e-03 * tc[1] -
                 3.78983334e-07 * tc[2] + 6.98235183e-11 * tc[3] -
                 5.41794485e-15 * tc[4] + 5.45323129e+00;
    // species 4: CO2
    species[4] = +3.85746029e+00 * tc[0] + 4.41437026e-03 * tc[1] -
                 1.10740702e-06 * tc[2] + 1.74496729e-10 * tc[3] -
                 1.18021041e-14 * tc[4] + 2.27163806e+00;
    // species 5: CO
    species[5] = +2.71518561e+00 * tc[0] + 2.06252743e-03 * tc[1] -
                 4.99412886e-07 * tc[2] + 7.66843360e-11 * tc[3] -
                 5.09119290e-15 * tc[4] + 7.81868772e+00;
    // species 6: CO2v1
    species[6] = +3.85746029e+00 * tc[0] + 4.41437026e-03 * tc[1] -
                 1.10740702e-06 * tc[2] + 1.74496729e-10 * tc[3] -
                 1.18021041e-14 * tc[4] + 2.27163806e+00;
    // species 7: CO2v2
    species[7] = +3.85746029e+00 * tc[0] + 4.41437026e-03 * tc[1] -
                 1.10740702e-06 * tc[2] + 1.74496729e-10 * tc[3] -
                 1.18021041e-14 * tc[4] + 2.27163806e+00;
    // species 8: CO2v3
    species[8] = +3.85746029e+00 * tc[0] + 4.41437026e-03 * tc[1] -
                 1.10740702e-06 * tc[2] + 1.74496729e-10 * tc[3] -
                 1.18021041e-14 * tc[4] + 2.27163806e+00;
    // species 9: CO2v4
    species[9] = +3.85746029e+00 * tc[0] + 4.41437026e-03 * tc[1] -
                 1.10740702e-06 * tc[2] + 1.74496729e-10 * tc[3] -
                 1.18021041e-14 * tc[4] + 2.27163806e+00;
    // species 10: CO2p
    species[10] = +3.85746029e+00 * tc[0] + 4.41437026e-03 * tc[1] -
                  1.10740702e-06 * tc[2] + 1.74496729e-10 * tc[3] -
                  1.18021041e-14 * tc[4] + 2.27163806e+00;
    // species 11: Om
    species[11] = +2.56942078e+00 * tc[0] - 8.59741137e-05 * tc[1] +
                  2.09742295e-08 * tc[2] - 3.33925997e-12 * tc[3] +
                  3.07084227e-16 * tc[4] + 4.78433864e+00;
    // species 12: Op
    species[12] = +2.56942078e+00 * tc[0] - 8.59741137e-05 * tc[1] +
                  2.09742295e-08 * tc[2] - 3.33925997e-12 * tc[3] +
                  3.07084227e-16 * tc[4] + 4.78433864e+00;
    // species 13: COp
    species[13] = +2.71518561e+00 * tc[0] + 2.06252743e-03 * tc[1] -
                  4.99412886e-07 * tc[2] + 7.66843360e-11 * tc[3] -
                  5.09119290e-15 * tc[4] + 7.81868772e+00;
  }

  // species with no change at a midpoint T
  // species 3: AR
  species[3] = +2.50000000e+00 * tc[0] + 0.00000000e+00 * tc[1] +
               0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
               0.00000000e+00 * tc[4] + 4.36600000e+00;
  // species 14: ARe
  species[14] = +2.50000000e+00 * tc[0] + 0.00000000e+00 * tc[1] +
                0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
                0.00000000e+00 * tc[4] + 4.36600000e+00;
  // species 15: ARp
  species[15] = +2.50000000e+00 * tc[0] + 0.00000000e+00 * tc[1] +
                0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
                0.00000000e+00 * tc[4] + 4.36600000e+00;
}

// Returns the mean specific heat at CP (Eq. 33)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPBL(const amrex::Real T, const amrex::Real x[], amrex::Real& cpbl)
{
  amrex::Real result = 0;
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real cpor[16];                               //  temporary storage
  cp_R(cpor, tc);

  // perform dot product
  for (int id = 0; id < 16; ++id) {
    result += x[id] * cpor[id];
  }

  cpbl = result * 8.31446261815324e+07;
}

// Returns the mean specific heat at CP (Eq. 34)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPBS(const amrex::Real T, const amrex::Real y[], amrex::Real& cpbs)
{
  amrex::Real result = 0.0;
  const amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache

  // compute Cp/R at the given temperature

  // species with midpoint at T=1000 kelvin
  if (tT < 1000) {
    // species 0: E
    result +=
      y[0] *
      (+2.50025150e+00 + 0.00000000e+00 * tc[1] + 0.00000000e+00 * tc[2] +
       0.00000000e+00 * tc[3] + 0.00000000e+00 * tc[4]) *
      1822.8884868472639482;
    // species 1: O
    result +=
      y[1] *
      (+3.16826710e+00 - 3.27931884e-03 * tc[1] + 6.64306396e-06 * tc[2] -
       6.12806624e-09 * tc[3] + 2.11265971e-12 * tc[4]) *
      0.0625039064941559;
    // species 2: O2
    result +=
      y[2] *
      (+3.78245636e+00 - 2.99673416e-03 * tc[1] + 9.84730201e-06 * tc[2] -
       9.68129509e-09 * tc[3] + 3.24372837e-12 * tc[4]) *
      0.0312519532470779;
    // species 4: CO2
    result +=
      y[4] *
      (+2.35677352e+00 + 8.98459677e-03 * tc[1] - 7.12356269e-06 * tc[2] +
       2.45919022e-09 * tc[3] - 1.43699548e-13 * tc[4]) *
      0.0227226249176305;
    // species 5: CO
    result +=
      y[5] *
      (+3.57953347e+00 - 6.10353680e-04 * tc[1] + 1.01681433e-06 * tc[2] +
       9.07005884e-10 * tc[3] - 9.04424499e-13 * tc[4]) *
      0.0357015351660121;
    // species 6: CO2v1
    result +=
      y[6] *
      (+2.35677352e+00 + 8.98459677e-03 * tc[1] - 7.12356269e-06 * tc[2] +
       2.45919022e-09 * tc[3] - 1.43699548e-13 * tc[4]) *
      0.0227226249176305;
    // species 7: CO2v2
    result +=
      y[7] *
      (+2.35677352e+00 + 8.98459677e-03 * tc[1] - 7.12356269e-06 * tc[2] +
       2.45919022e-09 * tc[3] - 1.43699548e-13 * tc[4]) *
      0.0227226249176305;
    // species 8: CO2v3
    result +=
      y[8] *
      (+2.35677352e+00 + 8.98459677e-03 * tc[1] - 7.12356269e-06 * tc[2] +
       2.45919022e-09 * tc[3] - 1.43699548e-13 * tc[4]) *
      0.0227226249176305;
    // species 9: CO2v4
    result +=
      y[9] *
      (+2.35677352e+00 + 8.98459677e-03 * tc[1] - 7.12356269e-06 * tc[2] +
       2.45919022e-09 * tc[3] - 1.43699548e-13 * tc[4]) *
      0.0227226249176305;
    // species 10: CO2p
    result +=
      y[10] *
      (+2.35677352e+00 + 8.98459677e-03 * tc[1] - 7.12356269e-06 * tc[2] +
       2.45919022e-09 * tc[3] - 1.43699548e-13 * tc[4]) *
      0.0227229081626688;
    // species 11: Om
    result +=
      y[11] *
      (+3.16826710e+00 - 3.27931884e-03 * tc[1] + 6.64306396e-06 * tc[2] -
       6.12806624e-09 * tc[3] + 2.11265971e-12 * tc[4]) *
      0.0625017634094834;
    // species 12: Op
    result +=
      y[12] *
      (+3.16826710e+00 - 3.27931884e-03 * tc[1] + 6.64306396e-06 * tc[2] -
       6.12806624e-09 * tc[3] + 2.11265971e-12 * tc[4]) *
      0.0625060497257993;
    // species 13: COp
    result +=
      y[13] *
      (+3.57953347e+00 - 6.10353680e-04 * tc[1] + 1.01681433e-06 * tc[2] +
       9.07005884e-10 * tc[3] - 9.04424499e-13 * tc[4]) *
      0.0357022343994464;
  } else {
    // species 0: E
    result +=
      y[0] *
      (+2.50025150e+00 + 0.00000000e+00 * tc[1] + 0.00000000e+00 * tc[2] +
       0.00000000e+00 * tc[3] + 0.00000000e+00 * tc[4]) *
      1822.8884868472639482;
    // species 1: O
    result +=
      y[1] *
      (+2.56942078e+00 - 8.59741137e-05 * tc[1] + 4.19484589e-08 * tc[2] -
       1.00177799e-11 * tc[3] + 1.22833691e-15 * tc[4]) *
      0.0625039064941559;
    // species 2: O2
    result +=
      y[2] *
      (+3.28253784e+00 + 1.48308754e-03 * tc[1] - 7.57966669e-07 * tc[2] +
       2.09470555e-10 * tc[3] - 2.16717794e-14 * tc[4]) *
      0.0312519532470779;
    // species 4: CO2
    result +=
      y[4] *
      (+3.85746029e+00 + 4.41437026e-03 * tc[1] - 2.21481404e-06 * tc[2] +
       5.23490188e-10 * tc[3] - 4.72084164e-14 * tc[4]) *
      0.0227226249176305;
    // species 5: CO
    result +=
      y[5] *
      (+2.71518561e+00 + 2.06252743e-03 * tc[1] - 9.98825771e-07 * tc[2] +
       2.30053008e-10 * tc[3] - 2.03647716e-14 * tc[4]) *
      0.0357015351660121;
    // species 6: CO2v1
    result +=
      y[6] *
      (+3.85746029e+00 + 4.41437026e-03 * tc[1] - 2.21481404e-06 * tc[2] +
       5.23490188e-10 * tc[3] - 4.72084164e-14 * tc[4]) *
      0.0227226249176305;
    // species 7: CO2v2
    result +=
      y[7] *
      (+3.85746029e+00 + 4.41437026e-03 * tc[1] - 2.21481404e-06 * tc[2] +
       5.23490188e-10 * tc[3] - 4.72084164e-14 * tc[4]) *
      0.0227226249176305;
    // species 8: CO2v3
    result +=
      y[8] *
      (+3.85746029e+00 + 4.41437026e-03 * tc[1] - 2.21481404e-06 * tc[2] +
       5.23490188e-10 * tc[3] - 4.72084164e-14 * tc[4]) *
      0.0227226249176305;
    // species 9: CO2v4
    result +=
      y[9] *
      (+3.85746029e+00 + 4.41437026e-03 * tc[1] - 2.21481404e-06 * tc[2] +
       5.23490188e-10 * tc[3] - 4.72084164e-14 * tc[4]) *
      0.0227226249176305;
    // species 10: CO2p
    result +=
      y[10] *
      (+3.85746029e+00 + 4.41437026e-03 * tc[1] - 2.21481404e-06 * tc[2] +
       5.23490188e-10 * tc[3] - 4.72084164e-14 * tc[4]) *
      0.0227229081626688;
    // species 11: Om
    result +=
      y[11] *
      (+2.56942078e+00 - 8.59741137e-05 * tc[1] + 4.19484589e-08 * tc[2] -
       1.00177799e-11 * tc[3] + 1.22833691e-15 * tc[4]) *
      0.0625017634094834;
    // species 12: Op
    result +=
      y[12] *
      (+2.56942078e+00 - 8.59741137e-05 * tc[1] + 4.19484589e-08 * tc[2] -
       1.00177799e-11 * tc[3] + 1.22833691e-15 * tc[4]) *
      0.0625060497257993;
    // species 13: COp
    result +=
      y[13] *
      (+2.71518561e+00 + 2.06252743e-03 * tc[1] - 9.98825771e-07 * tc[2] +
       2.30053008e-10 * tc[3] - 2.03647716e-14 * tc[4]) *
      0.0357022343994464;
  }

  // species with no change at a midpoint T
  // species 3: AR
  result += y[3] *
            (+2.50000000e+00 + 0.00000000e+00 * tc[1] + 0.00000000e+00 * tc[2] +
             0.00000000e+00 * tc[3] + 0.00000000e+00 * tc[4]) *
            0.0250312891113892;
  // species 14: ARe
  result += y[14] *
            (+2.50000000e+00 + 0.00000000e+00 * tc[1] + 0.00000000e+00 * tc[2] +
             0.00000000e+00 * tc[3] + 0.00000000e+00 * tc[4]) *
            0.0250312891113892;
  // species 15: ARp
  result += y[15] *
            (+2.50000000e+00 + 0.00000000e+00 * tc[1] + 0.00000000e+00 * tc[2] +
             0.00000000e+00 * tc[3] + 0.00000000e+00 * tc[4]) *
            0.0250316328373182;

  cpbs = result * 8.31446261815324e+07;
}

// Returns the mean specific heat at CV (Eq. 35)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVBL(const amrex::Real T, const amrex::Real x[], amrex::Real& cvbl)
{
  amrex::Real result = 0;
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real cvor[16];                               //  temporary storage
  cv_R(cvor, tc);

  // perform dot product
  for (int id = 0; id < 16; ++id) {
    result += x[id] * cvor[id];
  }

  cvbl = result * 8.31446261815324e+07;
}

// Returns the mean specific heat at CV (Eq. 36)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVBS(const amrex::Real T, const amrex::Real y[], amrex::Real& cvbs)
{
  amrex::Real result = 0.0;
  const amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  // compute Cv/R at the given temperature

  // species with midpoint at T=1000 kelvin
  if (tT < 1000) {
    // species 0: E
    result +=
      y[0] *
      (+1.50025150e+00 + 0.00000000e+00 * tc[1] + 0.00000000e+00 * tc[2] +
       0.00000000e+00 * tc[3] + 0.00000000e+00 * tc[4]) *
      1822.8884868472639482;
    // species 1: O
    result +=
      y[1] *
      (+2.16826710e+00 - 3.27931884e-03 * tc[1] + 6.64306396e-06 * tc[2] -
       6.12806624e-09 * tc[3] + 2.11265971e-12 * tc[4]) *
      0.0625039064941559;
    // species 2: O2
    result +=
      y[2] *
      (+2.78245636e+00 - 2.99673416e-03 * tc[1] + 9.84730201e-06 * tc[2] -
       9.68129509e-09 * tc[3] + 3.24372837e-12 * tc[4]) *
      0.0312519532470779;
    // species 4: CO2
    result +=
      y[4] *
      (+1.35677352e+00 + 8.98459677e-03 * tc[1] - 7.12356269e-06 * tc[2] +
       2.45919022e-09 * tc[3] - 1.43699548e-13 * tc[4]) *
      0.0227226249176305;
    // species 5: CO
    result +=
      y[5] *
      (+2.57953347e+00 - 6.10353680e-04 * tc[1] + 1.01681433e-06 * tc[2] +
       9.07005884e-10 * tc[3] - 9.04424499e-13 * tc[4]) *
      0.0357015351660121;
    // species 6: CO2v1
    result +=
      y[6] *
      (+1.35677352e+00 + 8.98459677e-03 * tc[1] - 7.12356269e-06 * tc[2] +
       2.45919022e-09 * tc[3] - 1.43699548e-13 * tc[4]) *
      0.0227226249176305;
    // species 7: CO2v2
    result +=
      y[7] *
      (+1.35677352e+00 + 8.98459677e-03 * tc[1] - 7.12356269e-06 * tc[2] +
       2.45919022e-09 * tc[3] - 1.43699548e-13 * tc[4]) *
      0.0227226249176305;
    // species 8: CO2v3
    result +=
      y[8] *
      (+1.35677352e+00 + 8.98459677e-03 * tc[1] - 7.12356269e-06 * tc[2] +
       2.45919022e-09 * tc[3] - 1.43699548e-13 * tc[4]) *
      0.0227226249176305;
    // species 9: CO2v4
    result +=
      y[9] *
      (+1.35677352e+00 + 8.98459677e-03 * tc[1] - 7.12356269e-06 * tc[2] +
       2.45919022e-09 * tc[3] - 1.43699548e-13 * tc[4]) *
      0.0227226249176305;
    // species 10: CO2p
    result +=
      y[10] *
      (+1.35677352e+00 + 8.98459677e-03 * tc[1] - 7.12356269e-06 * tc[2] +
       2.45919022e-09 * tc[3] - 1.43699548e-13 * tc[4]) *
      0.0227229081626688;
    // species 11: Om
    result +=
      y[11] *
      (+2.16826710e+00 - 3.27931884e-03 * tc[1] + 6.64306396e-06 * tc[2] -
       6.12806624e-09 * tc[3] + 2.11265971e-12 * tc[4]) *
      0.0625017634094834;
    // species 12: Op
    result +=
      y[12] *
      (+2.16826710e+00 - 3.27931884e-03 * tc[1] + 6.64306396e-06 * tc[2] -
       6.12806624e-09 * tc[3] + 2.11265971e-12 * tc[4]) *
      0.0625060497257993;
    // species 13: COp
    result +=
      y[13] *
      (+2.57953347e+00 - 6.10353680e-04 * tc[1] + 1.01681433e-06 * tc[2] +
       9.07005884e-10 * tc[3] - 9.04424499e-13 * tc[4]) *
      0.0357022343994464;
  } else {
    // species 0: E
    result +=
      y[0] *
      (+1.50025150e+00 + 0.00000000e+00 * tc[1] + 0.00000000e+00 * tc[2] +
       0.00000000e+00 * tc[3] + 0.00000000e+00 * tc[4]) *
      1822.8884868472639482;
    // species 1: O
    result +=
      y[1] *
      (+1.56942078e+00 - 8.59741137e-05 * tc[1] + 4.19484589e-08 * tc[2] -
       1.00177799e-11 * tc[3] + 1.22833691e-15 * tc[4]) *
      0.0625039064941559;
    // species 2: O2
    result +=
      y[2] *
      (+2.28253784e+00 + 1.48308754e-03 * tc[1] - 7.57966669e-07 * tc[2] +
       2.09470555e-10 * tc[3] - 2.16717794e-14 * tc[4]) *
      0.0312519532470779;
    // species 4: CO2
    result +=
      y[4] *
      (+2.85746029e+00 + 4.41437026e-03 * tc[1] - 2.21481404e-06 * tc[2] +
       5.23490188e-10 * tc[3] - 4.72084164e-14 * tc[4]) *
      0.0227226249176305;
    // species 5: CO
    result +=
      y[5] *
      (+1.71518561e+00 + 2.06252743e-03 * tc[1] - 9.98825771e-07 * tc[2] +
       2.30053008e-10 * tc[3] - 2.03647716e-14 * tc[4]) *
      0.0357015351660121;
    // species 6: CO2v1
    result +=
      y[6] *
      (+2.85746029e+00 + 4.41437026e-03 * tc[1] - 2.21481404e-06 * tc[2] +
       5.23490188e-10 * tc[3] - 4.72084164e-14 * tc[4]) *
      0.0227226249176305;
    // species 7: CO2v2
    result +=
      y[7] *
      (+2.85746029e+00 + 4.41437026e-03 * tc[1] - 2.21481404e-06 * tc[2] +
       5.23490188e-10 * tc[3] - 4.72084164e-14 * tc[4]) *
      0.0227226249176305;
    // species 8: CO2v3
    result +=
      y[8] *
      (+2.85746029e+00 + 4.41437026e-03 * tc[1] - 2.21481404e-06 * tc[2] +
       5.23490188e-10 * tc[3] - 4.72084164e-14 * tc[4]) *
      0.0227226249176305;
    // species 9: CO2v4
    result +=
      y[9] *
      (+2.85746029e+00 + 4.41437026e-03 * tc[1] - 2.21481404e-06 * tc[2] +
       5.23490188e-10 * tc[3] - 4.72084164e-14 * tc[4]) *
      0.0227226249176305;
    // species 10: CO2p
    result +=
      y[10] *
      (+2.85746029e+00 + 4.41437026e-03 * tc[1] - 2.21481404e-06 * tc[2] +
       5.23490188e-10 * tc[3] - 4.72084164e-14 * tc[4]) *
      0.0227229081626688;
    // species 11: Om
    result +=
      y[11] *
      (+1.56942078e+00 - 8.59741137e-05 * tc[1] + 4.19484589e-08 * tc[2] -
       1.00177799e-11 * tc[3] + 1.22833691e-15 * tc[4]) *
      0.0625017634094834;
    // species 12: Op
    result +=
      y[12] *
      (+1.56942078e+00 - 8.59741137e-05 * tc[1] + 4.19484589e-08 * tc[2] -
       1.00177799e-11 * tc[3] + 1.22833691e-15 * tc[4]) *
      0.0625060497257993;
    // species 13: COp
    result +=
      y[13] *
      (+1.71518561e+00 + 2.06252743e-03 * tc[1] - 9.98825771e-07 * tc[2] +
       2.30053008e-10 * tc[3] - 2.03647716e-14 * tc[4]) *
      0.0357022343994464;
  }

  // species with no change at a midpoint T
  // species 3: AR
  result += y[3] *
            (+1.50000000e+00 + 0.00000000e+00 * tc[1] + 0.00000000e+00 * tc[2] +
             0.00000000e+00 * tc[3] + 0.00000000e+00 * tc[4]) *
            0.0250312891113892;
  // species 14: ARe
  result += y[14] *
            (+1.50000000e+00 + 0.00000000e+00 * tc[1] + 0.00000000e+00 * tc[2] +
             0.00000000e+00 * tc[3] + 0.00000000e+00 * tc[4]) *
            0.0250312891113892;
  // species 15: ARp
  result += y[15] *
            (+1.50000000e+00 + 0.00000000e+00 * tc[1] + 0.00000000e+00 * tc[2] +
             0.00000000e+00 * tc[3] + 0.00000000e+00 * tc[4]) *
            0.0250316328373182;

  cvbs = result * 8.31446261815324e+07;
}

// Returns the mean enthalpy of the mixture in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHBML(const amrex::Real T, const amrex::Real x[], amrex::Real& hbml)
{
  amrex::Real result = 0;
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real hml[16];                                //  temporary storage
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T
  speciesEnthalpy(hml, tc);

  // perform dot product
  for (int id = 0; id < 16; ++id) {
    result += x[id] * hml[id];
  }

  hbml = result * RT;
}

// Returns mean enthalpy of mixture in mass units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHBMS(const amrex::Real T, const amrex::Real y[], amrex::Real& hbms)
{
  amrex::Real result = 0.0;
  const amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  const amrex::Real invT = 1.0 / T;

  // species with midpoint at T=1000 kelvin
  if (tT < 1000) {
    // species 0: E
    result += y[0] *
              (+2.50025150e+00 + 0.00000000e+00 * tc[1] +
               0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
               0.00000000e+00 * tc[4] - 7.45978390e+02 * invT) *
              1822.8884868472639482;
    // species 1: O
    result += y[1] *
              (+3.16826710e+00 - 1.63965942e-03 * tc[1] +
               2.21435465e-06 * tc[2] - 1.53201656e-09 * tc[3] +
               4.22531942e-13 * tc[4] + 2.91222592e+04 * invT) *
              0.0625039064941559;
    // species 2: O2
    result += y[2] *
              (+3.78245636e+00 - 1.49836708e-03 * tc[1] +
               3.28243400e-06 * tc[2] - 2.42032377e-09 * tc[3] +
               6.48745674e-13 * tc[4] - 1.06394356e+03 * invT) *
              0.0312519532470779;
    // species 4: CO2
    result += y[4] *
              (+2.35677352e+00 + 4.49229839e-03 * tc[1] -
               2.37452090e-06 * tc[2] + 6.14797555e-10 * tc[3] -
               2.87399096e-14 * tc[4] - 4.83719697e+04 * invT) *
              0.0227226249176305;
    // species 5: CO
    result += y[5] *
              (+3.57953347e+00 - 3.05176840e-04 * tc[1] +
               3.38938110e-07 * tc[2] + 2.26751471e-10 * tc[3] -
               1.80884900e-13 * tc[4] - 1.43440860e+04 * invT) *
              0.0357015351660121;
    // species 6: CO2v1
    result += y[6] *
              (+2.35677352e+00 + 4.49229839e-03 * tc[1] -
               2.37452090e-06 * tc[2] + 6.14797555e-10 * tc[3] -
               2.87399096e-14 * tc[4] - 4.83719697e+04 * invT) *
              0.0227226249176305;
    // species 7: CO2v2
    result += y[7] *
              (+2.35677352e+00 + 4.49229839e-03 * tc[1] -
               2.37452090e-06 * tc[2] + 6.14797555e-10 * tc[3] -
               2.87399096e-14 * tc[4] - 4.83719697e+04 * invT) *
              0.0227226249176305;
    // species 8: CO2v3
    result += y[8] *
              (+2.35677352e+00 + 4.49229839e-03 * tc[1] -
               2.37452090e-06 * tc[2] + 6.14797555e-10 * tc[3] -
               2.87399096e-14 * tc[4] - 4.83719697e+04 * invT) *
              0.0227226249176305;
    // species 9: CO2v4
    result += y[9] *
              (+2.35677352e+00 + 4.49229839e-03 * tc[1] -
               2.37452090e-06 * tc[2] + 6.14797555e-10 * tc[3] -
               2.87399096e-14 * tc[4] - 4.83719697e+04 * invT) *
              0.0227226249176305;
    // species 10: CO2p
    result += y[10] *
              (+2.35677352e+00 + 4.49229839e-03 * tc[1] -
               2.37452090e-06 * tc[2] + 6.14797555e-10 * tc[3] -
               2.87399096e-14 * tc[4] - 4.83719697e+04 * invT) *
              0.0227229081626688;
    // species 11: Om
    result += y[11] *
              (+3.16826710e+00 - 1.63965942e-03 * tc[1] +
               2.21435465e-06 * tc[2] - 1.53201656e-09 * tc[3] +
               4.22531942e-13 * tc[4] + 2.91222592e+04 * invT) *
              0.0625017634094834;
    // species 12: Op
    result += y[12] *
              (+3.16826710e+00 - 1.63965942e-03 * tc[1] +
               2.21435465e-06 * tc[2] - 1.53201656e-09 * tc[3] +
               4.22531942e-13 * tc[4] + 2.91222592e+04 * invT) *
              0.0625060497257993;
    // species 13: COp
    result += y[13] *
              (+3.57953347e+00 - 3.05176840e-04 * tc[1] +
               3.38938110e-07 * tc[2] + 2.26751471e-10 * tc[3] -
               1.80884900e-13 * tc[4] - 1.43440860e+04 * invT) *
              0.0357022343994464;
  } else {
    // species 0: E
    result += y[0] *
              (+2.50025150e+00 + 0.00000000e+00 * tc[1] +
               0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
               0.00000000e+00 * tc[4] - 7.45978450e+02 * invT) *
              1822.8884868472639482;
    // species 1: O
    result += y[1] *
              (+2.56942078e+00 - 4.29870569e-05 * tc[1] +
               1.39828196e-08 * tc[2] - 2.50444497e-12 * tc[3] +
               2.45667382e-16 * tc[4] + 2.92175791e+04 * invT) *
              0.0625039064941559;
    // species 2: O2
    result += y[2] *
              (+3.28253784e+00 + 7.41543770e-04 * tc[1] -
               2.52655556e-07 * tc[2] + 5.23676387e-11 * tc[3] -
               4.33435588e-15 * tc[4] - 1.08845772e+03 * invT) *
              0.0312519532470779;
    // species 4: CO2
    result += y[4] *
              (+3.85746029e+00 + 2.20718513e-03 * tc[1] -
               7.38271347e-07 * tc[2] + 1.30872547e-10 * tc[3] -
               9.44168328e-15 * tc[4] - 4.87591660e+04 * invT) *
              0.0227226249176305;
    // species 5: CO
    result += y[5] *
              (+2.71518561e+00 + 1.03126372e-03 * tc[1] -
               3.32941924e-07 * tc[2] + 5.75132520e-11 * tc[3] -
               4.07295432e-15 * tc[4] - 1.41518724e+04 * invT) *
              0.0357015351660121;
    // species 6: CO2v1
    result += y[6] *
              (+3.85746029e+00 + 2.20718513e-03 * tc[1] -
               7.38271347e-07 * tc[2] + 1.30872547e-10 * tc[3] -
               9.44168328e-15 * tc[4] - 4.87591660e+04 * invT) *
              0.0227226249176305;
    // species 7: CO2v2
    result += y[7] *
              (+3.85746029e+00 + 2.20718513e-03 * tc[1] -
               7.38271347e-07 * tc[2] + 1.30872547e-10 * tc[3] -
               9.44168328e-15 * tc[4] - 4.87591660e+04 * invT) *
              0.0227226249176305;
    // species 8: CO2v3
    result += y[8] *
              (+3.85746029e+00 + 2.20718513e-03 * tc[1] -
               7.38271347e-07 * tc[2] + 1.30872547e-10 * tc[3] -
               9.44168328e-15 * tc[4] - 4.87591660e+04 * invT) *
              0.0227226249176305;
    // species 9: CO2v4
    result += y[9] *
              (+3.85746029e+00 + 2.20718513e-03 * tc[1] -
               7.38271347e-07 * tc[2] + 1.30872547e-10 * tc[3] -
               9.44168328e-15 * tc[4] - 4.87591660e+04 * invT) *
              0.0227226249176305;
    // species 10: CO2p
    result += y[10] *
              (+3.85746029e+00 + 2.20718513e-03 * tc[1] -
               7.38271347e-07 * tc[2] + 1.30872547e-10 * tc[3] -
               9.44168328e-15 * tc[4] - 4.87591660e+04 * invT) *
              0.0227229081626688;
    // species 11: Om
    result += y[11] *
              (+2.56942078e+00 - 4.29870569e-05 * tc[1] +
               1.39828196e-08 * tc[2] - 2.50444497e-12 * tc[3] +
               2.45667382e-16 * tc[4] + 2.92175791e+04 * invT) *
              0.0625017634094834;
    // species 12: Op
    result += y[12] *
              (+2.56942078e+00 - 4.29870569e-05 * tc[1] +
               1.39828196e-08 * tc[2] - 2.50444497e-12 * tc[3] +
               2.45667382e-16 * tc[4] + 2.92175791e+04 * invT) *
              0.0625060497257993;
    // species 13: COp
    result += y[13] *
              (+2.71518561e+00 + 1.03126372e-03 * tc[1] -
               3.32941924e-07 * tc[2] + 5.75132520e-11 * tc[3] -
               4.07295432e-15 * tc[4] - 1.41518724e+04 * invT) *
              0.0357022343994464;
  }

  // species with no change at a midpoint T
  // species 3: AR
  result +=
    y[3] *
    (+2.50000000e+00 + 0.00000000e+00 * tc[1] + 0.00000000e+00 * tc[2] +
     0.00000000e+00 * tc[3] + 0.00000000e+00 * tc[4] - 7.45375000e+02 * invT) *
    0.0250312891113892;
  // species 14: ARe
  result +=
    y[14] *
    (+2.50000000e+00 + 0.00000000e+00 * tc[1] + 0.00000000e+00 * tc[2] +
     0.00000000e+00 * tc[3] + 0.00000000e+00 * tc[4] - 7.45375000e+02 * invT) *
    0.0250312891113892;
  // species 15: ARp
  result +=
    y[15] *
    (+2.50000000e+00 + 0.00000000e+00 * tc[1] + 0.00000000e+00 * tc[2] +
     0.00000000e+00 * tc[3] + 0.00000000e+00 * tc[4] - 7.45375000e+02 * invT) *
    0.0250316328373182;

  const amrex::Real RT = 8.31446261815324e+07 * tT; // R*T

  hbms = result * RT;
}

// get mean internal energy in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUBML(const amrex::Real T, const amrex::Real x[], amrex::Real& ubml)
{
  amrex::Real result = 0;
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real uml[16];                                //  temporary energy array
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T
  speciesInternalEnergy(uml, tc);

  // perform dot product
  for (int id = 0; id < 16; ++id) {
    result += x[id] * uml[id];
  }

  ubml = result * RT;
}

// get mean internal energy in mass units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUBMS(const amrex::Real T, const amrex::Real y[], amrex::Real& ubms)
{
  amrex::Real result = 0.0;
  const amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  const amrex::Real invT = 1.0 / T;

  // species with midpoint at T=1000 kelvin
  if (tT < 1000) {
    // species 0: E
    result += y[0] *
              (+1.50025150e+00 + 0.00000000e+00 * tc[1] +
               0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
               0.00000000e+00 * tc[4] - 7.45978390e+02 * invT) *
              1822.8884868472639482;
    // species 1: O
    result += y[1] *
              (+2.16826710e+00 - 1.63965942e-03 * tc[1] +
               2.21435465e-06 * tc[2] - 1.53201656e-09 * tc[3] +
               4.22531942e-13 * tc[4] + 2.91222592e+04 * invT) *
              0.0625039064941559;
    // species 2: O2
    result += y[2] *
              (+2.78245636e+00 - 1.49836708e-03 * tc[1] +
               3.28243400e-06 * tc[2] - 2.42032377e-09 * tc[3] +
               6.48745674e-13 * tc[4] - 1.06394356e+03 * invT) *
              0.0312519532470779;
    // species 4: CO2
    result += y[4] *
              (+1.35677352e+00 + 4.49229839e-03 * tc[1] -
               2.37452090e-06 * tc[2] + 6.14797555e-10 * tc[3] -
               2.87399096e-14 * tc[4] - 4.83719697e+04 * invT) *
              0.0227226249176305;
    // species 5: CO
    result += y[5] *
              (+2.57953347e+00 - 3.05176840e-04 * tc[1] +
               3.38938110e-07 * tc[2] + 2.26751471e-10 * tc[3] -
               1.80884900e-13 * tc[4] - 1.43440860e+04 * invT) *
              0.0357015351660121;
    // species 6: CO2v1
    result += y[6] *
              (+1.35677352e+00 + 4.49229839e-03 * tc[1] -
               2.37452090e-06 * tc[2] + 6.14797555e-10 * tc[3] -
               2.87399096e-14 * tc[4] - 4.83719697e+04 * invT) *
              0.0227226249176305;
    // species 7: CO2v2
    result += y[7] *
              (+1.35677352e+00 + 4.49229839e-03 * tc[1] -
               2.37452090e-06 * tc[2] + 6.14797555e-10 * tc[3] -
               2.87399096e-14 * tc[4] - 4.83719697e+04 * invT) *
              0.0227226249176305;
    // species 8: CO2v3
    result += y[8] *
              (+1.35677352e+00 + 4.49229839e-03 * tc[1] -
               2.37452090e-06 * tc[2] + 6.14797555e-10 * tc[3] -
               2.87399096e-14 * tc[4] - 4.83719697e+04 * invT) *
              0.0227226249176305;
    // species 9: CO2v4
    result += y[9] *
              (+1.35677352e+00 + 4.49229839e-03 * tc[1] -
               2.37452090e-06 * tc[2] + 6.14797555e-10 * tc[3] -
               2.87399096e-14 * tc[4] - 4.83719697e+04 * invT) *
              0.0227226249176305;
    // species 10: CO2p
    result += y[10] *
              (+1.35677352e+00 + 4.49229839e-03 * tc[1] -
               2.37452090e-06 * tc[2] + 6.14797555e-10 * tc[3] -
               2.87399096e-14 * tc[4] - 4.83719697e+04 * invT) *
              0.0227229081626688;
    // species 11: Om
    result += y[11] *
              (+2.16826710e+00 - 1.63965942e-03 * tc[1] +
               2.21435465e-06 * tc[2] - 1.53201656e-09 * tc[3] +
               4.22531942e-13 * tc[4] + 2.91222592e+04 * invT) *
              0.0625017634094834;
    // species 12: Op
    result += y[12] *
              (+2.16826710e+00 - 1.63965942e-03 * tc[1] +
               2.21435465e-06 * tc[2] - 1.53201656e-09 * tc[3] +
               4.22531942e-13 * tc[4] + 2.91222592e+04 * invT) *
              0.0625060497257993;
    // species 13: COp
    result += y[13] *
              (+2.57953347e+00 - 3.05176840e-04 * tc[1] +
               3.38938110e-07 * tc[2] + 2.26751471e-10 * tc[3] -
               1.80884900e-13 * tc[4] - 1.43440860e+04 * invT) *
              0.0357022343994464;
  } else {
    // species 0: E
    result += y[0] *
              (+1.50025150e+00 + 0.00000000e+00 * tc[1] +
               0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
               0.00000000e+00 * tc[4] - 7.45978450e+02 * invT) *
              1822.8884868472639482;
    // species 1: O
    result += y[1] *
              (+1.56942078e+00 - 4.29870569e-05 * tc[1] +
               1.39828196e-08 * tc[2] - 2.50444497e-12 * tc[3] +
               2.45667382e-16 * tc[4] + 2.92175791e+04 * invT) *
              0.0625039064941559;
    // species 2: O2
    result += y[2] *
              (+2.28253784e+00 + 7.41543770e-04 * tc[1] -
               2.52655556e-07 * tc[2] + 5.23676387e-11 * tc[3] -
               4.33435588e-15 * tc[4] - 1.08845772e+03 * invT) *
              0.0312519532470779;
    // species 4: CO2
    result += y[4] *
              (+2.85746029e+00 + 2.20718513e-03 * tc[1] -
               7.38271347e-07 * tc[2] + 1.30872547e-10 * tc[3] -
               9.44168328e-15 * tc[4] - 4.87591660e+04 * invT) *
              0.0227226249176305;
    // species 5: CO
    result += y[5] *
              (+1.71518561e+00 + 1.03126372e-03 * tc[1] -
               3.32941924e-07 * tc[2] + 5.75132520e-11 * tc[3] -
               4.07295432e-15 * tc[4] - 1.41518724e+04 * invT) *
              0.0357015351660121;
    // species 6: CO2v1
    result += y[6] *
              (+2.85746029e+00 + 2.20718513e-03 * tc[1] -
               7.38271347e-07 * tc[2] + 1.30872547e-10 * tc[3] -
               9.44168328e-15 * tc[4] - 4.87591660e+04 * invT) *
              0.0227226249176305;
    // species 7: CO2v2
    result += y[7] *
              (+2.85746029e+00 + 2.20718513e-03 * tc[1] -
               7.38271347e-07 * tc[2] + 1.30872547e-10 * tc[3] -
               9.44168328e-15 * tc[4] - 4.87591660e+04 * invT) *
              0.0227226249176305;
    // species 8: CO2v3
    result += y[8] *
              (+2.85746029e+00 + 2.20718513e-03 * tc[1] -
               7.38271347e-07 * tc[2] + 1.30872547e-10 * tc[3] -
               9.44168328e-15 * tc[4] - 4.87591660e+04 * invT) *
              0.0227226249176305;
    // species 9: CO2v4
    result += y[9] *
              (+2.85746029e+00 + 2.20718513e-03 * tc[1] -
               7.38271347e-07 * tc[2] + 1.30872547e-10 * tc[3] -
               9.44168328e-15 * tc[4] - 4.87591660e+04 * invT) *
              0.0227226249176305;
    // species 10: CO2p
    result += y[10] *
              (+2.85746029e+00 + 2.20718513e-03 * tc[1] -
               7.38271347e-07 * tc[2] + 1.30872547e-10 * tc[3] -
               9.44168328e-15 * tc[4] - 4.87591660e+04 * invT) *
              0.0227229081626688;
    // species 11: Om
    result += y[11] *
              (+1.56942078e+00 - 4.29870569e-05 * tc[1] +
               1.39828196e-08 * tc[2] - 2.50444497e-12 * tc[3] +
               2.45667382e-16 * tc[4] + 2.92175791e+04 * invT) *
              0.0625017634094834;
    // species 12: Op
    result += y[12] *
              (+1.56942078e+00 - 4.29870569e-05 * tc[1] +
               1.39828196e-08 * tc[2] - 2.50444497e-12 * tc[3] +
               2.45667382e-16 * tc[4] + 2.92175791e+04 * invT) *
              0.0625060497257993;
    // species 13: COp
    result += y[13] *
              (+1.71518561e+00 + 1.03126372e-03 * tc[1] -
               3.32941924e-07 * tc[2] + 5.75132520e-11 * tc[3] -
               4.07295432e-15 * tc[4] - 1.41518724e+04 * invT) *
              0.0357022343994464;
  }

  // species with no change at a midpoint T
  // species 3: AR
  result +=
    y[3] *
    (+1.50000000e+00 + 0.00000000e+00 * tc[1] + 0.00000000e+00 * tc[2] +
     0.00000000e+00 * tc[3] + 0.00000000e+00 * tc[4] - 7.45375000e+02 * invT) *
    0.0250312891113892;
  // species 14: ARe
  result +=
    y[14] *
    (+1.50000000e+00 + 0.00000000e+00 * tc[1] + 0.00000000e+00 * tc[2] +
     0.00000000e+00 * tc[3] + 0.00000000e+00 * tc[4] - 7.45375000e+02 * invT) *
    0.0250312891113892;
  // species 15: ARp
  result +=
    y[15] *
    (+1.50000000e+00 + 0.00000000e+00 * tc[1] + 0.00000000e+00 * tc[2] +
     0.00000000e+00 * tc[3] + 0.00000000e+00 * tc[4] - 7.45375000e+02 * invT) *
    0.0250316328373182;

  const amrex::Real RT = 8.31446261815324e+07 * tT; // R*T

  ubms = result * RT;
}

// get mixture entropy in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSBML(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real& sbml)
{
  amrex::Real result = 0;
  // Log of normalized pressure in cgs units dynes/cm^2 by Patm
  amrex::Real logPratio = log(P / 1013250.0);
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    log(tT), tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real sor[16]; //  temporary storage
  speciesEntropy(sor, tc);

  // Compute Eq 42
  for (int id = 0; id < 16; ++id) {
    result += x[id] * (sor[id] - log((x[id] + 1e-100)) - logPratio);
  }

  sbml = result * 8.31446261815324e+07;
}

// get mixture entropy in mass units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSBMS(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real& sbms)
{
  amrex::Real result = 0;
  // Log of normalized pressure in cgs units dynes/cm^2 by Patm
  amrex::Real logPratio = log(P / 1013250.0);
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    log(tT), tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real sor[16]; //  temporary storage
  amrex::Real x[16];   //  need a ytx conversion
  amrex::Real YOW = 0; // See Eq 4, 6 in CK Manual

  // Compute inverse of mean molecular wt first
  for (int i = 0; i < 16; i++) {
    YOW += y[i] * imw(i);
  }
  // Now compute y to x conversion
  x[0] = y[0] / (0.000549 * YOW);
  x[1] = y[1] / (15.999000 * YOW);
  x[2] = y[2] / (31.998000 * YOW);
  x[3] = y[3] / (39.950000 * YOW);
  x[4] = y[4] / (44.009000 * YOW);
  x[5] = y[5] / (28.010000 * YOW);
  x[6] = y[6] / (44.009000 * YOW);
  x[7] = y[7] / (44.009000 * YOW);
  x[8] = y[8] / (44.009000 * YOW);
  x[9] = y[9] / (44.009000 * YOW);
  x[10] = y[10] / (44.008451 * YOW);
  x[11] = y[11] / (15.999549 * YOW);
  x[12] = y[12] / (15.998451 * YOW);
  x[13] = y[13] / (28.009451 * YOW);
  x[14] = y[14] / (39.950000 * YOW);
  x[15] = y[15] / (39.949451 * YOW);
  speciesEntropy(sor, tc);
  // Perform computation in Eq 42 and 43
  for (int i = 0; i < 16; i++) {
    result += x[i] * (sor[i] - log((x[i] + 1e-100)) - logPratio);
  }
  // Scale by R/W
  sbms = result * 8.31446261815324e+07 * YOW;
}

//  get temperature given internal energy in mass units and mass fracs
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_T_GIVEN_EY(
  const amrex::Real e, const amrex::Real y[], amrex::Real& t, int& ierr)
{
#ifdef CONVERGENCE
  const int maxiter = 5000;
  const amrex::Real tol = 1.e-12;
#else
  const int maxiter = 200;
  const amrex::Real tol = 1.e-6;
#endif
  amrex::Real tmin = 90;   // max lower bound for thermo def
  amrex::Real tmax = 4000; // min upper bound for thermo def
  amrex::Real e1, emin, emax, cv, t1, dt;
  CKUBMS(tmin, y, emin);
  CKUBMS(tmax, y, emax);
  if (e < emin) {
    // Linear Extrapolation below tmin
    CKCVBS(tmin, y, cv);
    t = tmin - (emin - e) / cv;
    ierr = 1;
    return;
  }
  if (e > emax) {
    // Linear Extrapolation above tmax
    CKCVBS(tmax, y, cv);
    t = tmax - (emax - e) / cv;
    ierr = 1;
    return;
  }
  t1 = t;
  if (t1 < tmin || t1 > tmax) {
    t1 = tmin + (tmax - tmin) / (emax - emin) * (e - emin);
  }
  for (int i = 0; i < maxiter; ++i) {
    CKUBMS(t1, y, e1);
    CKCVBS(t1, y, cv);
    dt = (e - e1) / cv;
    if (dt > 100.) {
      dt = 100.;
    } else if (dt < -100.) {
      dt = -100.;
    } else if (fabs(dt) < tol) {
      break;
    }
    t1 += dt;
  }
  t = t1;
  ierr = 0;
}

//  get temperature given enthalpy in mass units and mass fracs
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_T_GIVEN_HY(
  const amrex::Real h, const amrex::Real y[], amrex::Real& t, int& ierr)
{
#ifdef CONVERGENCE
  const int maxiter = 5000;
  const amrex::Real tol = 1.e-12;
#else
  const int maxiter = 200;
  const amrex::Real tol = 1.e-6;
#endif
  amrex::Real tmin = 90;   // max lower bound for thermo def
  amrex::Real tmax = 4000; // min upper bound for thermo def
  amrex::Real h1, hmin, hmax, cp, t1, dt;
  CKHBMS(tmin, y, hmin);
  CKHBMS(tmax, y, hmax);
  if (h < hmin) {
    // Linear Extrapolation below tmin
    CKCPBS(tmin, y, cp);
    t = tmin - (hmin - h) / cp;
    ierr = 1;
    return;
  }
  if (h > hmax) {
    // Linear Extrapolation above tmax
    CKCPBS(tmax, y, cp);
    t = tmax - (hmax - h) / cp;
    ierr = 1;
    return;
  }
  t1 = t;
  if (t1 < tmin || t1 > tmax) {
    t1 = tmin + (tmax - tmin) / (hmax - hmin) * (h - hmin);
  }
  for (int i = 0; i < maxiter; ++i) {
    CKHBMS(t1, y, h1);
    CKCPBS(t1, y, cp);
    dt = (h - h1) / cp;
    if (dt > 100.) {
      dt = 100.;
    } else if (dt < -100.) {
      dt = -100.;
    } else if (fabs(dt) < tol) {
      break;
    }
    t1 += dt;
  }
  t = t1;
  ierr = 0;
}

// Compute P = rhoRT/W(x)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKPX(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real& P)
{
  amrex::Real XW = 0;                      //  To hold mean molecular wt
  XW += x[0] * 0.000549;                   // E
  XW += x[1] * 15.999000;                  // O
  XW += x[2] * 31.998000;                  // O2
  XW += x[3] * 39.950000;                  // AR
  XW += x[4] * 44.009000;                  // CO2
  XW += x[5] * 28.010000;                  // CO
  XW += x[6] * 44.009000;                  // CO2v1
  XW += x[7] * 44.009000;                  // CO2v2
  XW += x[8] * 44.009000;                  // CO2v3
  XW += x[9] * 44.009000;                  // CO2v4
  XW += x[10] * 44.008451;                 // CO2p
  XW += x[11] * 15.999549;                 // Om
  XW += x[12] * 15.998451;                 // Op
  XW += x[13] * 28.009451;                 // COp
  XW += x[14] * 39.950000;                 // ARe
  XW += x[15] * 39.949451;                 // ARp
  P = rho * 8.31446261815324e+07 * T / XW; // P = rho*R*T/W
}

// Compute P = rhoRT/W(y)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKPY(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real& P)
{
  amrex::Real YOW = 0; //  for computing mean MW

  for (int i = 0; i < 16; i++) {
    YOW += y[i] * imw(i);
  }
  P = rho * 8.31446261815324e+07 * T * YOW; // P = rho*R*T/W
}

// Compute P = rhoRT/W(c)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKPC(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real c[],
  amrex::Real& P)
{
  // See Eq 5 in CK Manual
  amrex::Real W = 0;
  amrex::Real sumC = 0;
  W += c[0] * 0.000549;   // E
  W += c[1] * 15.999000;  // O
  W += c[2] * 31.998000;  // O2
  W += c[3] * 39.950000;  // AR
  W += c[4] * 44.009000;  // CO2
  W += c[5] * 28.010000;  // CO
  W += c[6] * 44.009000;  // CO2v1
  W += c[7] * 44.009000;  // CO2v2
  W += c[8] * 44.009000;  // CO2v3
  W += c[9] * 44.009000;  // CO2v4
  W += c[10] * 44.008451; // CO2p
  W += c[11] * 15.999549; // Om
  W += c[12] * 15.998451; // Op
  W += c[13] * 28.009451; // COp
  W += c[14] * 39.950000; // ARe
  W += c[15] * 39.949451; // ARp

  for (int id = 0; id < 16; ++id) {
    sumC += c[id];
  }
  P = rho * 8.31446261815324e+07 * T * sumC / W; // P = rho*R*T/W
}

// Compute rho = PW(x)/RT
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRHOX(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real& rho)
{
  amrex::Real XW = 0;                        //  To hold mean molecular wt
  XW += x[0] * 0.000549;                     // E
  XW += x[1] * 15.999000;                    // O
  XW += x[2] * 31.998000;                    // O2
  XW += x[3] * 39.950000;                    // AR
  XW += x[4] * 44.009000;                    // CO2
  XW += x[5] * 28.010000;                    // CO
  XW += x[6] * 44.009000;                    // CO2v1
  XW += x[7] * 44.009000;                    // CO2v2
  XW += x[8] * 44.009000;                    // CO2v3
  XW += x[9] * 44.009000;                    // CO2v4
  XW += x[10] * 44.008451;                   // CO2p
  XW += x[11] * 15.999549;                   // Om
  XW += x[12] * 15.998451;                   // Op
  XW += x[13] * 28.009451;                   // COp
  XW += x[14] * 39.950000;                   // ARe
  XW += x[15] * 39.949451;                   // ARp
  rho = P * XW / (8.31446261815324e+07 * T); // rho = P*W/(R*T)
}

// Compute rho = P*W(y)/RT
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRHOY(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real& rho)
{
  amrex::Real YOW = 0;

  for (int i = 0; i < 16; i++) {
    YOW += y[i] * imw(i);
  }

  rho = P / (8.31446261815324e+07 * T * YOW); // rho = P*W/(R*T)
}

// Compute rho = P*W(c)/(R*T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRHOC(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real c[],
  amrex::Real& rho)
{
  // See Eq 5 in CK Manual
  amrex::Real W = 0;
  amrex::Real sumC = 0;
  W += c[0] * 0.000549;   // E
  W += c[1] * 15.999000;  // O
  W += c[2] * 31.998000;  // O2
  W += c[3] * 39.950000;  // AR
  W += c[4] * 44.009000;  // CO2
  W += c[5] * 28.010000;  // CO
  W += c[6] * 44.009000;  // CO2v1
  W += c[7] * 44.009000;  // CO2v2
  W += c[8] * 44.009000;  // CO2v3
  W += c[9] * 44.009000;  // CO2v4
  W += c[10] * 44.008451; // CO2p
  W += c[11] * 15.999549; // Om
  W += c[12] * 15.998451; // Op
  W += c[13] * 28.009451; // COp
  W += c[14] * 39.950000; // ARe
  W += c[15] * 39.949451; // ARp

  for (int id = 0; id < 16; ++id) {
    sumC += c[id];
  }
  rho = P * W / (sumC * T * 8.31446261815324e+07); // rho = PW/(R*T)
}

// get molecular weight for all species
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWT(amrex::Real wt[])
{
  get_mw(wt);
}

// given y[species]: mass fractions
// s mean molecular weight (gm/mole)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKMMWY(const amrex::Real y[], amrex::Real& wtm)
{
  amrex::Real YOW = 0;

  for (int i = 0; i < 16; i++) {
    YOW += y[i] * imw(i);
  }

  wtm = 1.0 / YOW;
}

// given x[species]: mole fractions
// returns mean molecular weight (gm/mole)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKMMWX(const amrex::Real x[], amrex::Real& wtm)
{
  amrex::Real XW = 0;      //  see Eq 4 in CK Manual
  XW += x[0] * 0.000549;   // E
  XW += x[1] * 15.999000;  // O
  XW += x[2] * 31.998000;  // O2
  XW += x[3] * 39.950000;  // AR
  XW += x[4] * 44.009000;  // CO2
  XW += x[5] * 28.010000;  // CO
  XW += x[6] * 44.009000;  // CO2v1
  XW += x[7] * 44.009000;  // CO2v2
  XW += x[8] * 44.009000;  // CO2v3
  XW += x[9] * 44.009000;  // CO2v4
  XW += x[10] * 44.008451; // CO2p
  XW += x[11] * 15.999549; // Om
  XW += x[12] * 15.998451; // Op
  XW += x[13] * 28.009451; // COp
  XW += x[14] * 39.950000; // ARe
  XW += x[15] * 39.949451; // ARp
  wtm = XW;
}

// given c[species]: molar concentration
// returns mean molecular weight (gm/mole)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKMMWC(const amrex::Real c[], amrex::Real& wtm)
{
  // See Eq 5 in CK Manual
  amrex::Real W = 0;
  amrex::Real sumC = 0;
  W += c[0] * 0.000549;   // E
  W += c[1] * 15.999000;  // O
  W += c[2] * 31.998000;  // O2
  W += c[3] * 39.950000;  // AR
  W += c[4] * 44.009000;  // CO2
  W += c[5] * 28.010000;  // CO
  W += c[6] * 44.009000;  // CO2v1
  W += c[7] * 44.009000;  // CO2v2
  W += c[8] * 44.009000;  // CO2v3
  W += c[9] * 44.009000;  // CO2v4
  W += c[10] * 44.008451; // CO2p
  W += c[11] * 15.999549; // Om
  W += c[12] * 15.998451; // Op
  W += c[13] * 28.009451; // COp
  W += c[14] * 39.950000; // ARe
  W += c[15] * 39.949451; // ARp

  for (int id = 0; id < 16; ++id) {
    sumC += c[id];
  }
  //  CK provides no guard against division by zero
  wtm = W / sumC;
}

// get Cp/R as a function of T
// for all species (Eq 19)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPOR(const amrex::Real T, amrex::Real cpor[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  cp_R(cpor, tc);
}

// get H/RT as a function of T
// for all species (Eq 20)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHORT(const amrex::Real T, amrex::Real hort[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  speciesEnthalpy(hort, tc);
}

// get S/R as a function of T
// for all species (Eq 21)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSOR(const amrex::Real T, amrex::Real sor[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    log(tT), tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  speciesEntropy(sor, tc);
}

// convert y[species] (mass fracs) to x[species] (mole fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKYTX(const amrex::Real y[], amrex::Real x[])
{
  amrex::Real YOW = 0;

  for (int i = 0; i < 16; i++) {
    YOW += y[i] * imw(i);
  }

  amrex::Real YOWINV = 1.0 / YOW;

  for (int i = 0; i < 16; i++) {
    x[i] = y[i] * imw(i) * YOWINV;
  }
}

// convert y[species] (mass fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKYTCP(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real c[])
{
  amrex::Real YOW = 0;
  amrex::Real PWORT;

  // Compute inverse of mean molecular wt first
  for (int i = 0; i < 16; i++) {
    c[i] = y[i] * imw(i);
  }
  for (int i = 0; i < 16; i++) {
    YOW += c[i];
  }

  // PW/RT (see Eq. 7)
  PWORT = P / (YOW * 8.31446261815324e+07 * T);
  // Now compute conversion

  for (int i = 0; i < 16; i++) {
    c[i] = PWORT * y[i] * imw(i);
  }
}

// convert y[species] (mass fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKYTCR(
  const amrex::Real rho,
  amrex::Real /*T*/,
  const amrex::Real y[],
  amrex::Real c[])
{

  for (int i = 0; i < 16; i++) {
    c[i] = rho * y[i] * imw(i);
  }
}

// convert x[species] (mole fracs) to y[species] (mass fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKXTY(const amrex::Real x[], amrex::Real y[])
{
  amrex::Real XW = 0; // See Eq 4, 9 in CK Manual
  // Compute mean molecular wt first
  XW += x[0] * 0.000549;   // E
  XW += x[1] * 15.999000;  // O
  XW += x[2] * 31.998000;  // O2
  XW += x[3] * 39.950000;  // AR
  XW += x[4] * 44.009000;  // CO2
  XW += x[5] * 28.010000;  // CO
  XW += x[6] * 44.009000;  // CO2v1
  XW += x[7] * 44.009000;  // CO2v2
  XW += x[8] * 44.009000;  // CO2v3
  XW += x[9] * 44.009000;  // CO2v4
  XW += x[10] * 44.008451; // CO2p
  XW += x[11] * 15.999549; // Om
  XW += x[12] * 15.998451; // Op
  XW += x[13] * 28.009451; // COp
  XW += x[14] * 39.950000; // ARe
  XW += x[15] * 39.949451; // ARp
  // Now compute conversion
  amrex::Real XWinv = 1.0 / XW;
  y[0] = x[0] * 0.000549 * XWinv;
  y[1] = x[1] * 15.999000 * XWinv;
  y[2] = x[2] * 31.998000 * XWinv;
  y[3] = x[3] * 39.950000 * XWinv;
  y[4] = x[4] * 44.009000 * XWinv;
  y[5] = x[5] * 28.010000 * XWinv;
  y[6] = x[6] * 44.009000 * XWinv;
  y[7] = x[7] * 44.009000 * XWinv;
  y[8] = x[8] * 44.009000 * XWinv;
  y[9] = x[9] * 44.009000 * XWinv;
  y[10] = x[10] * 44.008451 * XWinv;
  y[11] = x[11] * 15.999549 * XWinv;
  y[12] = x[12] * 15.998451 * XWinv;
  y[13] = x[13] * 28.009451 * XWinv;
  y[14] = x[14] * 39.950000 * XWinv;
  y[15] = x[15] * 39.949451 * XWinv;
}

// convert x[species] (mole fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKXTCP(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real c[])
{
  amrex::Real PORT = P / (8.31446261815324e+07 * T); // P/RT

  // Compute conversion, see Eq 10
  for (int id = 0; id < 16; ++id) {
    c[id] = x[id] * PORT;
  }
}

// convert x[species] (mole fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKXTCR(
  const amrex::Real rho,
  const amrex::Real /*T*/,
  const amrex::Real x[],
  amrex::Real c[])
{
  amrex::Real XW = 0; // See Eq 4, 11 in CK Manual
  amrex::Real ROW;
  // Compute mean molecular wt first
  XW += x[0] * 0.000549;   // E
  XW += x[1] * 15.999000;  // O
  XW += x[2] * 31.998000;  // O2
  XW += x[3] * 39.950000;  // AR
  XW += x[4] * 44.009000;  // CO2
  XW += x[5] * 28.010000;  // CO
  XW += x[6] * 44.009000;  // CO2v1
  XW += x[7] * 44.009000;  // CO2v2
  XW += x[8] * 44.009000;  // CO2v3
  XW += x[9] * 44.009000;  // CO2v4
  XW += x[10] * 44.008451; // CO2p
  XW += x[11] * 15.999549; // Om
  XW += x[12] * 15.998451; // Op
  XW += x[13] * 28.009451; // COp
  XW += x[14] * 39.950000; // ARe
  XW += x[15] * 39.949451; // ARp
  ROW = rho / XW;

  // Compute conversion, see Eq 11
  for (int id = 0; id < 16; ++id) {
    c[id] = x[id] * ROW;
  }
}

// convert c[species] (molar conc) to x[species] (mole fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCTX(const amrex::Real c[], amrex::Real x[])
{
  amrex::Real sumC = 0;

  // compute sum of c
  for (int id = 0; id < 16; ++id) {
    sumC += c[id];
  }

  //  See Eq 13
  amrex::Real sumCinv = 1.0 / sumC;
  for (int id = 0; id < 16; ++id) {
    x[id] = c[id] * sumCinv;
  }
}

// convert c[species] (molar conc) to y[species] (mass fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCTY(const amrex::Real c[], amrex::Real y[])
{
  amrex::Real CW = 0; // See Eq 12 in CK Manual
  // compute denominator in eq 12 first
  CW += c[0] * 0.000549;   // E
  CW += c[1] * 15.999000;  // O
  CW += c[2] * 31.998000;  // O2
  CW += c[3] * 39.950000;  // AR
  CW += c[4] * 44.009000;  // CO2
  CW += c[5] * 28.010000;  // CO
  CW += c[6] * 44.009000;  // CO2v1
  CW += c[7] * 44.009000;  // CO2v2
  CW += c[8] * 44.009000;  // CO2v3
  CW += c[9] * 44.009000;  // CO2v4
  CW += c[10] * 44.008451; // CO2p
  CW += c[11] * 15.999549; // Om
  CW += c[12] * 15.998451; // Op
  CW += c[13] * 28.009451; // COp
  CW += c[14] * 39.950000; // ARe
  CW += c[15] * 39.949451; // ARp
  // Now compute conversion
  amrex::Real CWinv = 1.0 / CW;
  y[0] = c[0] * 0.000549 * CWinv;
  y[1] = c[1] * 15.999000 * CWinv;
  y[2] = c[2] * 31.998000 * CWinv;
  y[3] = c[3] * 39.950000 * CWinv;
  y[4] = c[4] * 44.009000 * CWinv;
  y[5] = c[5] * 28.010000 * CWinv;
  y[6] = c[6] * 44.009000 * CWinv;
  y[7] = c[7] * 44.009000 * CWinv;
  y[8] = c[8] * 44.009000 * CWinv;
  y[9] = c[9] * 44.009000 * CWinv;
  y[10] = c[10] * 44.008451 * CWinv;
  y[11] = c[11] * 15.999549 * CWinv;
  y[12] = c[12] * 15.998451 * CWinv;
  y[13] = c[13] * 28.009451 * CWinv;
  y[14] = c[14] * 39.950000 * CWinv;
  y[15] = c[15] * 39.949451 * CWinv;
}

// get specific heat at constant volume as a function
// of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVML(const amrex::Real T, amrex::Real cvml[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  cv_R(cvml, tc);

  // convert to chemkin units
  for (int id = 0; id < 16; ++id) {
    cvml[id] *= 8.31446261815324e+07;
  }
}

// get specific heat at constant pressure as a
// function of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPML(const amrex::Real T, amrex::Real cpml[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  cp_R(cpml, tc);

  // convert to chemkin units
  for (int id = 0; id < 16; ++id) {
    cpml[id] *= 8.31446261815324e+07;
  }
}

// get internal energy as a function
// of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUML(const amrex::Real T, amrex::Real uml[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T
  speciesInternalEnergy(uml, tc);

  // convert to chemkin units
  for (int id = 0; id < 16; ++id) {
    uml[id] *= RT;
  }
}

// get enthalpy as a function
// of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHML(const amrex::Real T, amrex::Real hml[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T
  speciesEnthalpy(hml, tc);

  // convert to chemkin units
  for (int id = 0; id < 16; ++id) {
    hml[id] *= RT;
  }
}

// Returns the standard-state entropies in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSML(const amrex::Real T, amrex::Real sml[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    log(tT), tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  speciesEntropy(sml, tc);

  // convert to chemkin units
  for (int id = 0; id < 16; ++id) {
    sml[id] *= 8.31446261815324e+07;
  }
}

// Returns the specific heats at constant volume
// in mass units (Eq. 29)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVMS(const amrex::Real T, amrex::Real cvms[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  cv_R(cvms, tc);
  // multiply by R/molecularweight
  cvms[0] *= 1.515633818095350e+11;  // E
  cvms[1] *= 5.196863940342046e+06;  // O
  cvms[2] *= 2.598431970171023e+06;  // O2
  cvms[3] *= 2.081217176008320e+06;  // AR
  cvms[4] *= 1.889264154639560e+06;  // CO2
  cvms[5] *= 2.968390795484913e+06;  // CO
  cvms[6] *= 1.889264154639560e+06;  // CO2v1
  cvms[7] *= 1.889264154639560e+06;  // CO2v2
  cvms[8] *= 1.889264154639560e+06;  // CO2v3
  cvms[9] *= 1.889264154639560e+06;  // CO2v4
  cvms[10] *= 1.889287704942385e+06; // CO2p
  cvms[11] *= 5.196685754368074e+06; // Om
  cvms[12] *= 5.197042138535856e+06; // Op
  cvms[13] *= 2.968448932987417e+06; // COp
  cvms[14] *= 2.081217176008320e+06; // ARe
  cvms[15] *= 2.081245754972190e+06; // ARp
}

// Returns the specific heats at constant pressure
// in mass units (Eq. 26)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPMS(const amrex::Real T, amrex::Real cpms[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  cp_R(cpms, tc);
  // multiply by R/molecularweight
  cpms[0] *= 1.515633818095350e+11;  // E
  cpms[1] *= 5.196863940342046e+06;  // O
  cpms[2] *= 2.598431970171023e+06;  // O2
  cpms[3] *= 2.081217176008320e+06;  // AR
  cpms[4] *= 1.889264154639560e+06;  // CO2
  cpms[5] *= 2.968390795484913e+06;  // CO
  cpms[6] *= 1.889264154639560e+06;  // CO2v1
  cpms[7] *= 1.889264154639560e+06;  // CO2v2
  cpms[8] *= 1.889264154639560e+06;  // CO2v3
  cpms[9] *= 1.889264154639560e+06;  // CO2v4
  cpms[10] *= 1.889287704942385e+06; // CO2p
  cpms[11] *= 5.196685754368074e+06; // Om
  cpms[12] *= 5.197042138535856e+06; // Op
  cpms[13] *= 2.968448932987417e+06; // COp
  cpms[14] *= 2.081217176008320e+06; // ARe
  cpms[15] *= 2.081245754972190e+06; // ARp
}

// Returns internal energy in mass units (Eq 30.)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUMS(const amrex::Real T, amrex::Real ums[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T

  speciesInternalEnergy(ums, tc);

  for (int i = 0; i < 16; i++) {
    ums[i] *= RT * imw(i);
  }
}

// Returns enthalpy in mass units (Eq 27.)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHMS(const amrex::Real T, amrex::Real hms[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T

  speciesEnthalpy(hms, tc);

  for (int i = 0; i < 16; i++) {
    hms[i] *= RT * imw(i);
  }
}

// Returns the entropies in mass units (Eq 28.)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSMS(const amrex::Real T, amrex::Real sms[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    log(tT), tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  speciesEntropy(sms, tc);
  // multiply by R/molecularweight
  sms[0] *= 1.515633818095350e+11;  // E
  sms[1] *= 5.196863940342046e+06;  // O
  sms[2] *= 2.598431970171023e+06;  // O2
  sms[3] *= 2.081217176008320e+06;  // AR
  sms[4] *= 1.889264154639560e+06;  // CO2
  sms[5] *= 2.968390795484913e+06;  // CO
  sms[6] *= 1.889264154639560e+06;  // CO2v1
  sms[7] *= 1.889264154639560e+06;  // CO2v2
  sms[8] *= 1.889264154639560e+06;  // CO2v3
  sms[9] *= 1.889264154639560e+06;  // CO2v4
  sms[10] *= 1.889287704942385e+06; // CO2p
  sms[11] *= 5.196685754368074e+06; // Om
  sms[12] *= 5.197042138535856e+06; // Op
  sms[13] *= 2.968448932987417e+06; // COp
  sms[14] *= 2.081217176008320e+06; // ARe
  sms[15] *= 2.081245754972190e+06; // ARp
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE amrex::Real
specMob(const int specid, const amrex::Real Te, const amrex::Real ndens, const amrex::Real emag, const amrex::Real T)
{

  return 0.0;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE amrex::Real
specDiff(const int specid, const amrex::Real Te, const amrex::Real ndens, const amrex::Real emag, const amrex::Real T)
{

  return 0.0;
}

// GPU version of productionRate: no more use of thermo namespace vectors
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
comp_qfqr(
  amrex::Real* qf,
  amrex::Real* qr,
  const amrex::Real* sc,
  const amrex::Real* /*sc_qss*/,
  const amrex::Real* tc,
  const amrex::Real invT)
{

  // reaction 5: CO2 + E => CO + O + E
  qf[0] = sc[0] * sc[4];
  qr[0] = 0.0;

  // reaction 6: CO2 + E => CO2p + E + E
  qf[1] = sc[0] * sc[4];
  qr[1] = 0.0;

  // reaction 10: CO + E => COp + E + E
  qf[2] = sc[0] * sc[5];
  qr[2] = 0.0;

  // reaction 13: AR + E => ARp + E + E
  qf[3] = sc[0] * sc[3];
  qr[3] = 0.0;

  // reaction 15: E + Op + M => O + M
  qf[4] = sc[0] * sc[12];
  qr[4] = 0.0;

  // reaction 17: E + O + M => Om + M
  qf[5] = sc[0] * sc[1];
  qr[5] = 0.0;

  // reaction 63: Om + Op + M => O2 + M
  qf[6] = sc[11] * sc[12];
  qr[6] = 0.0;

  // reaction 65: CO + O + M => CO2 + M
  qf[7] = sc[1] * sc[5];
  qr[7] = 0.0;

  // reaction 67: 2 O + M => O2 + M
  qf[8] = (sc[1] * sc[1]);
  qr[8] = 0.0;

  // reaction 0: CO2 + E => CO2 + E
  qf[9] = sc[0] * sc[4];
  qr[9] = 0.0;

  // reaction 1: CO2 + E => CO2v1 + E
  qf[10] = sc[0] * sc[4];
  qr[10] = 0.0;

  // reaction 2: CO2 + E => CO2v2 + E
  qf[11] = sc[0] * sc[4];
  qr[11] = 0.0;

  // reaction 3: CO2 + E => CO2v3 + E
  qf[12] = sc[0] * sc[4];
  qr[12] = 0.0;

  // reaction 4: CO2 + E => CO2v4 + E
  qf[13] = sc[0] * sc[4];
  qr[13] = 0.0;

  // reaction 7: CO2 + E => CO + 2 E + Op
  qf[14] = sc[0] * sc[4];
  qr[14] = 0.0;

  // reaction 8: CO2 + E => COp + 2 E + O
  qf[15] = sc[0] * sc[4];
  qr[15] = 0.0;

  // reaction 9: CO2 + E => CO + Om
  qf[16] = sc[0] * sc[4];
  qr[16] = 0.0;

  // reaction 11: AR + E => AR + E
  qf[17] = sc[0] * sc[3];
  qr[17] = 0.0;

  // reaction 12: AR + E => ARe + E
  qf[18] = sc[0] * sc[3];
  qr[18] = 0.0;

  // reaction 14: CO2p + E => CO + O
  qf[19] = sc[0] * sc[10];
  qr[19] = 0.0;

  // reaction 16: COp + E => CO
  qf[20] = sc[0] * sc[13];
  qr[20] = 0.0;

  // reaction 18: ARe + CO2 => AR + CO + O
  qf[21] = sc[4] * sc[14];
  qr[21] = 0.0;

  // reaction 19: ARp + CO2 => AR + CO + Op
  qf[22] = sc[4] * sc[15];
  qr[22] = 0.0;

  // reaction 20: ARp + CO2 => AR + COp + O
  qf[23] = sc[4] * sc[15];
  qr[23] = 0.0;

  // reaction 21: ARp + CO2 => AR + CO2p
  qf[24] = sc[4] * sc[15];
  qr[24] = 0.0;

  // reaction 22: CO2 + CO2v1 => 2 CO2
  qf[25] = sc[4] * sc[6];
  qr[25] = 0.0;

  // reaction 23: CO + CO2v1 => CO + CO2
  qf[26] = sc[5] * sc[6];
  qr[26] = 0.0;

  // reaction 24: CO2v1 + O2 => CO2 + O2
  qf[27] = sc[2] * sc[6];
  qr[27] = 0.0;

  // reaction 25: AR + CO2v1 => AR + CO2
  qf[28] = sc[3] * sc[6];
  qr[28] = 0.0;

  // reaction 26: CO2 + CO2v2 => 2 CO2
  qf[29] = sc[4] * sc[7];
  qr[29] = 0.0;

  // reaction 27: CO + CO2v2 => CO + CO2
  qf[30] = sc[5] * sc[7];
  qr[30] = 0.0;

  // reaction 28: CO2v2 + O2 => CO2 + O2
  qf[31] = sc[2] * sc[7];
  qr[31] = 0.0;

  // reaction 29: AR + CO2v2 => AR + CO2
  qf[32] = sc[3] * sc[7];
  qr[32] = 0.0;

  // reaction 30: CO2 + CO2v2 => CO2 + CO2v1
  qf[33] = sc[4] * sc[7];
  qr[33] = 0.0;

  // reaction 31: CO + CO2v2 => CO + CO2v1
  qf[34] = sc[5] * sc[7];
  qr[34] = 0.0;

  // reaction 32: CO2v2 + O2 => CO2v1 + O2
  qf[35] = sc[2] * sc[7];
  qr[35] = 0.0;

  // reaction 33: AR + CO2v2 => AR + CO2v1
  qf[36] = sc[3] * sc[7];
  qr[36] = 0.0;

  // reaction 34: CO2 + CO2v3 => CO2 + CO2v2
  qf[37] = sc[4] * sc[8];
  qr[37] = 0.0;

  // reaction 35: CO + CO2v3 => CO + CO2v2
  qf[38] = sc[5] * sc[8];
  qr[38] = 0.0;

  // reaction 36: CO2v3 + O2 => CO2v2 + O2
  qf[39] = sc[2] * sc[8];
  qr[39] = 0.0;

  // reaction 37: AR + CO2v3 => AR + CO2v2
  qf[40] = sc[3] * sc[8];
  qr[40] = 0.0;

  // reaction 38: CO2 + CO2v3 => CO2 + CO2v4
  qf[41] = sc[4] * sc[8];
  qr[41] = 0.0;

  // reaction 39: CO + CO2v3 => CO + CO2v4
  qf[42] = sc[5] * sc[8];
  qr[42] = 0.0;

  // reaction 40: CO2v3 + O2 => CO2v4 + O2
  qf[43] = sc[2] * sc[8];
  qr[43] = 0.0;

  // reaction 41: AR + CO2v3 => AR + CO2v4
  qf[44] = sc[3] * sc[8];
  qr[44] = 0.0;

  // reaction 42: CO2 + CO2v3 => CO2v1 + CO2v2
  qf[45] = sc[4] * sc[8];
  qr[45] = 0.0;

  // reaction 43: CO2 + CO2v3 => CO2 + CO2v1
  qf[46] = sc[4] * sc[8];
  qr[46] = 0.0;

  // reaction 44: CO + CO2v3 => CO + CO2v1
  qf[47] = sc[5] * sc[8];
  qr[47] = 0.0;

  // reaction 45: CO2v3 + O2 => CO2v1 + O2
  qf[48] = sc[2] * sc[8];
  qr[48] = 0.0;

  // reaction 46: AR + CO2v3 => AR + CO2v1
  qf[49] = sc[3] * sc[8];
  qr[49] = 0.0;

  // reaction 47: CO2 + CO2v4 => CO2 + CO2v2
  qf[50] = sc[4] * sc[9];
  qr[50] = 0.0;

  // reaction 48: CO + CO2v4 => CO + CO2v2
  qf[51] = sc[5] * sc[9];
  qr[51] = 0.0;

  // reaction 49: CO2v4 + O2 => CO2v2 + O2
  qf[52] = sc[2] * sc[9];
  qr[52] = 0.0;

  // reaction 50: AR + CO2v4 => AR + CO2v2
  qf[53] = sc[3] * sc[9];
  qr[53] = 0.0;

  // reaction 51: CO2 + CO2v4 => CO2 + CO2v1
  qf[54] = sc[4] * sc[9];
  qr[54] = 0.0;

  // reaction 52: CO + CO2v4 => CO + CO2v1
  qf[55] = sc[5] * sc[9];
  qr[55] = 0.0;

  // reaction 53: CO2v4 + O2 => CO2v1 + O2
  qf[56] = sc[2] * sc[9];
  qr[56] = 0.0;

  // reaction 54: AR + CO2v4 => AR + CO2v1
  qf[57] = sc[3] * sc[9];
  qr[57] = 0.0;

  // reaction 55: CO2 + Op => CO2p + O
  qf[58] = sc[4] * sc[12];
  qr[58] = 0.0;

  // reaction 56: CO2 + COp => CO + CO2p
  qf[59] = sc[4] * sc[13];
  qr[59] = 0.0;

  // reaction 57: CO + Op => COp + O
  qf[60] = sc[5] * sc[12];
  qr[60] = 0.0;

  // reaction 58: CO2p + O => CO2 + Op
  qf[61] = sc[1] * sc[10];
  qr[61] = 0.0;

  // reaction 59: CO + Om => CO2 + E
  qf[62] = sc[5] * sc[11];
  qr[62] = 0.0;

  // reaction 60: COp + O => CO + Op
  qf[63] = sc[1] * sc[13];
  qr[63] = 0.0;

  // reaction 61: O + Om => E + O2
  qf[64] = sc[1] * sc[11];
  qr[64] = 0.0;

  // reaction 62: Om + Op => 2 O
  qf[65] = sc[11] * sc[12];
  qr[65] = 0.0;

  // reaction 64: CO2 + O => CO + O2
  qf[66] = sc[1] * sc[4];
  qr[66] = 0.0;

  // reaction 66: CO + O2 => CO2 + O
  qf[67] = sc[2] * sc[5];
  qr[67] = 0.0;

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int i = 0; i < 16; ++i) {
    mixture += sc[i];
  }

  // compute the Gibbs free energy
  amrex::Real g_RT[16];
  gibbs(g_RT, tc);

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  amrex::Real refC = 101325 / 8.31446 * invT;
  amrex::Real refCinv = 1 / refC;

  // Evaluate the kfs
  amrex::Real k_f, Corr;

  // reaction 0:  CO2 + E => CO2 + E
  k_f = 0;
  qf[9] *= k_f;
  qr[9] *= k_f * exp(-(g_RT[0] - g_RT[0] + g_RT[4] - g_RT[4]));
  // reaction 1:  CO2 + E => CO2v1 + E
  k_f = 0;
  qf[10] *= k_f;
  qr[10] *= k_f * exp(-(g_RT[0] - g_RT[0] + g_RT[4] - g_RT[6]));
  // reaction 2:  CO2 + E => CO2v2 + E
  k_f = 0;
  qf[11] *= k_f;
  qr[11] *= k_f * exp(-(g_RT[0] - g_RT[0] + g_RT[4] - g_RT[7]));
  // reaction 3:  CO2 + E => CO2v3 + E
  k_f = 0;
  qf[12] *= k_f;
  qr[12] *= k_f * exp(-(g_RT[0] - g_RT[0] + g_RT[4] - g_RT[8]));
  // reaction 4:  CO2 + E => CO2v4 + E
  k_f = 0;
  qf[13] *= k_f;
  qr[13] *= k_f * exp(-(g_RT[0] - g_RT[0] + g_RT[4] - g_RT[9]));
  // reaction 5:  CO2 + E => CO + O + E
  k_f = 0;
  qf[0] *= k_f;
  qr[0] *= k_f * exp(-(-g_RT[1] + g_RT[4] - g_RT[5])) * (refCinv);
  // reaction 6:  CO2 + E => CO2p + E + E
  k_f = 0;
  qf[1] *= k_f;
  qr[1] *= k_f * exp(-(-g_RT[0] + g_RT[4] - g_RT[10])) * (refCinv);
  // reaction 7:  CO2 + E => CO + 2 E + Op
  k_f = 0;
  qf[14] *= k_f;
  qr[14] *=
    k_f * exp(-(g_RT[0] - 2.000000 * g_RT[0] + g_RT[4] - g_RT[5] - g_RT[12])) *
    ((refCinv * refCinv));
  // reaction 8:  CO2 + E => COp + 2 E + O
  k_f = 0;
  qf[15] *= k_f;
  qr[15] *=
    k_f * exp(-(g_RT[0] - 2.000000 * g_RT[0] - g_RT[1] + g_RT[4] - g_RT[13])) *
    ((refCinv * refCinv));
  // reaction 9:  CO2 + E => CO + Om
  k_f = 0;
  qf[16] *= k_f;
  qr[16] *= k_f * exp(-(g_RT[0] + g_RT[4] - g_RT[5] - g_RT[11]));
  // reaction 10:  CO + E => COp + E + E
  k_f = 0;
  qf[2] *= k_f;
  qr[2] *= k_f * exp(-(-g_RT[0] + g_RT[5] - g_RT[13])) * (refCinv);
  // reaction 11:  AR + E => AR + E
  k_f = 0;
  qf[17] *= k_f;
  qr[17] *= k_f * exp(-(g_RT[0] - g_RT[0] + g_RT[3] - g_RT[3]));
  // reaction 12:  AR + E => ARe + E
  k_f = 0;
  qf[18] *= k_f;
  qr[18] *= k_f * exp(-(g_RT[0] - g_RT[0] + g_RT[3] - g_RT[14]));
  // reaction 13:  AR + E => ARp + E + E
  k_f = 0;
  qf[3] *= k_f;
  qr[3] *= k_f * exp(-(-g_RT[0] + g_RT[3] - g_RT[15])) * (refCinv);
  // reaction 14:  CO2p + E => CO + O
  k_f = 0;
  qf[19] *= k_f;
  qr[19] *= k_f * exp(-(g_RT[0] - g_RT[1] - g_RT[5] + g_RT[10]));
  // reaction 15:  E + Op + M => O + M
  k_f = 3626600000;
  Corr = mixture;
  qf[4] *= Corr * k_f;
  qr[4] *= Corr * k_f * exp(-(g_RT[0] - g_RT[1] + g_RT[12])) * (refC);
  // reaction 16:  COp + E => CO
  k_f = 0;
  qf[20] *= k_f;
  qr[20] *= k_f * exp(-(g_RT[0] - g_RT[5] + g_RT[13])) * (refC);
  // reaction 17:  E + O + M => Om + M
  k_f = 36266;
  Corr = mixture;
  qf[5] *= Corr * k_f;
  qr[5] *= Corr * k_f * exp(-(g_RT[0] + g_RT[1] - g_RT[11])) * (refC);
  // reaction 18:  ARe + CO2 => AR + CO + O
  k_f = 319200000;
  qf[21] *= k_f;
  qr[21] *=
    k_f * exp(-(-g_RT[1] - g_RT[3] + g_RT[4] - g_RT[5] + g_RT[14])) * (refCinv);
  // reaction 19:  ARp + CO2 => AR + CO + Op
  k_f = 0;
  qf[22] *= k_f;
  qr[22] *= k_f * exp(-(-g_RT[3] + g_RT[4] - g_RT[5] - g_RT[12] + g_RT[15])) *
            (refCinv);
  // reaction 20:  ARp + CO2 => AR + COp + O
  k_f = 0;
  qf[23] *= k_f;
  qr[23] *= k_f * exp(-(-g_RT[1] - g_RT[3] + g_RT[4] - g_RT[13] + g_RT[15])) *
            (refCinv);
  // reaction 21:  ARp + CO2 => AR + CO2p
  k_f = 30110000;
  qf[24] *= k_f;
  qr[24] *= k_f * exp(-(-g_RT[3] + g_RT[4] - g_RT[10] + g_RT[15]));
  // reaction 22:  CO2 + CO2v1 => 2 CO2
  k_f = 6444;
  qf[25] *= k_f;
  qr[25] *= k_f * exp(-(g_RT[4] - 2.000000 * g_RT[4] + g_RT[6]));
  // reaction 23:  CO + CO2v1 => CO + CO2
  k_f = 4505;
  qf[26] *= k_f;
  qr[26] *= k_f * exp(-(-g_RT[4] + g_RT[5] - g_RT[5] + g_RT[6]));
  // reaction 24:  CO2v1 + O2 => CO2 + O2
  k_f = 4505;
  qf[27] *= k_f;
  qr[27] *= k_f * exp(-(g_RT[2] - g_RT[2] - g_RT[4] + g_RT[6]));
  // reaction 25:  AR + CO2v1 => AR + CO2
  k_f = 4505;
  qf[28] *= k_f;
  qr[28] *= k_f * exp(-(g_RT[3] - g_RT[3] - g_RT[4] + g_RT[6]));
  // reaction 26:  CO2 + CO2v2 => 2 CO2
  k_f = 5.42;
  qf[29] *= k_f;
  qr[29] *= k_f * exp(-(g_RT[4] - 2.000000 * g_RT[4] + g_RT[7]));
  // reaction 27:  CO + CO2v2 => CO + CO2
  k_f = 16.8;
  qf[30] *= k_f;
  qr[30] *= k_f * exp(-(-g_RT[4] + g_RT[5] - g_RT[5] + g_RT[7]));
  // reaction 28:  CO2v2 + O2 => CO2 + O2
  k_f = 16.8;
  qf[31] *= k_f;
  qr[31] *= k_f * exp(-(g_RT[2] - g_RT[2] - g_RT[4] + g_RT[7]));
  // reaction 29:  AR + CO2v2 => AR + CO2
  k_f = 16.8;
  qf[32] *= k_f;
  qr[32] *= k_f * exp(-(g_RT[3] - g_RT[3] - g_RT[4] + g_RT[7]));
  // reaction 30:  CO2 + CO2v2 => CO2 + CO2v1
  k_f = 17460;
  qf[33] *= k_f;
  qr[33] *= k_f * exp(-(g_RT[4] - g_RT[4] - g_RT[6] + g_RT[7]));
  // reaction 31:  CO + CO2v2 => CO + CO2v1
  k_f = 12220;
  qf[34] *= k_f;
  qr[34] *= k_f * exp(-(g_RT[5] - g_RT[5] - g_RT[6] + g_RT[7]));
  // reaction 32:  CO2v2 + O2 => CO2v1 + O2
  k_f = 12220;
  qf[35] *= k_f;
  qr[35] *= k_f * exp(-(g_RT[2] - g_RT[2] - g_RT[6] + g_RT[7]));
  // reaction 33:  AR + CO2v2 => AR + CO2v1
  k_f = 12220;
  qf[36] *= k_f;
  qr[36] *= k_f * exp(-(g_RT[3] - g_RT[3] - g_RT[6] + g_RT[7]));
  // reaction 34:  CO2 + CO2v3 => CO2 + CO2v2
  k_f = 464.9;
  qf[37] *= k_f;
  qr[37] *= k_f * exp(-(g_RT[4] - g_RT[4] - g_RT[7] + g_RT[8]));
  // reaction 35:  CO + CO2v3 => CO + CO2v2
  k_f = 13.97;
  qf[38] *= k_f;
  qr[38] *= k_f * exp(-(g_RT[5] - g_RT[5] - g_RT[7] + g_RT[8]));
  // reaction 36:  CO2v3 + O2 => CO2v2 + O2
  k_f = 186.1;
  qf[39] *= k_f;
  qr[39] *= k_f * exp(-(g_RT[2] - g_RT[2] - g_RT[7] + g_RT[8]));
  // reaction 37:  AR + CO2v3 => AR + CO2v2
  k_f = 186.1;
  qf[40] *= k_f;
  qr[40] *= k_f * exp(-(g_RT[3] - g_RT[3] - g_RT[7] + g_RT[8]));
  // reaction 38:  CO2 + CO2v3 => CO2 + CO2v4
  k_f = 3643;
  qf[41] *= k_f;
  qr[41] *= k_f * exp(-(g_RT[4] - g_RT[4] + g_RT[8] - g_RT[9]));
  // reaction 39:  CO + CO2v3 => CO + CO2v4
  k_f = 1090;
  qf[42] *= k_f;
  qr[42] *= k_f * exp(-(g_RT[5] - g_RT[5] + g_RT[8] - g_RT[9]));
  // reaction 40:  CO2v3 + O2 => CO2v4 + O2
  k_f = 1457;
  qf[43] *= k_f;
  qr[43] *= k_f * exp(-(g_RT[2] - g_RT[2] + g_RT[8] - g_RT[9]));
  // reaction 41:  AR + CO2v3 => AR + CO2v4
  k_f = 1457;
  qf[44] *= k_f;
  qr[44] *= k_f * exp(-(g_RT[3] - g_RT[3] + g_RT[8] - g_RT[9]));
  // reaction 42:  CO2 + CO2v3 => CO2v1 + CO2v2
  k_f = 1457;
  qf[45] *= k_f;
  qr[45] *= k_f * exp(-(g_RT[4] - g_RT[6] - g_RT[7] + g_RT[8]));
  // reaction 43:  CO2 + CO2v3 => CO2 + CO2v1
  k_f = 1.024;
  qf[46] *= k_f;
  qr[46] *= k_f * exp(-(g_RT[4] - g_RT[4] - g_RT[6] + g_RT[8]));
  // reaction 44:  CO + CO2v3 => CO + CO2v1
  k_f = 0.3071;
  qf[47] *= k_f;
  qr[47] *= k_f * exp(-(g_RT[5] - g_RT[5] - g_RT[6] + g_RT[8]));
  // reaction 45:  CO2v3 + O2 => CO2v1 + O2
  k_f = 0.4095;
  qf[48] *= k_f;
  qr[48] *= k_f * exp(-(g_RT[2] - g_RT[2] - g_RT[6] + g_RT[8]));
  // reaction 46:  AR + CO2v3 => AR + CO2v1
  k_f = 0.4095;
  qf[49] *= k_f;
  qr[49] *= k_f * exp(-(g_RT[3] - g_RT[3] - g_RT[6] + g_RT[8]));
  // reaction 47:  CO2 + CO2v4 => CO2 + CO2v2
  k_f = 26080;
  qf[50] *= k_f;
  qr[50] *= k_f * exp(-(g_RT[4] - g_RT[4] - g_RT[7] + g_RT[9]));
  // reaction 48:  CO + CO2v4 => CO + CO2v2
  k_f = 18250;
  qf[51] *= k_f;
  qr[51] *= k_f * exp(-(g_RT[5] - g_RT[5] - g_RT[7] + g_RT[9]));
  // reaction 49:  CO2v4 + O2 => CO2v2 + O2
  k_f = 18250;
  qf[52] *= k_f;
  qr[52] *= k_f * exp(-(g_RT[2] - g_RT[2] - g_RT[7] + g_RT[9]));
  // reaction 50:  AR + CO2v4 => AR + CO2v2
  k_f = 18250;
  qf[53] *= k_f;
  qr[53] *= k_f * exp(-(g_RT[3] - g_RT[3] - g_RT[7] + g_RT[9]));
  // reaction 51:  CO2 + CO2v4 => CO2 + CO2v1
  k_f = 5.468;
  qf[54] *= k_f;
  qr[54] *= k_f * exp(-(g_RT[4] - g_RT[4] - g_RT[6] + g_RT[9]));
  // reaction 52:  CO + CO2v4 => CO + CO2v1
  k_f = 3722;
  qf[55] *= k_f;
  qr[55] *= k_f * exp(-(g_RT[5] - g_RT[5] - g_RT[6] + g_RT[9]));
  // reaction 53:  CO2v4 + O2 => CO2v1 + O2
  k_f = 3722;
  qf[56] *= k_f;
  qr[56] *= k_f * exp(-(g_RT[2] - g_RT[2] - g_RT[6] + g_RT[9]));
  // reaction 54:  AR + CO2v4 => AR + CO2v1
  k_f = 3722;
  qf[57] *= k_f;
  qr[57] *= k_f * exp(-(g_RT[3] - g_RT[3] - g_RT[6] + g_RT[9]));
  // reaction 55:  CO2 + Op => CO2p + O
  k_f = 271000000;
  qf[58] *= k_f;
  qr[58] *= k_f * exp(-(-g_RT[1] + g_RT[4] - g_RT[10] + g_RT[12]));
  // reaction 56:  CO2 + COp => CO + CO2p
  k_f = 602200000;
  qf[59] *= k_f;
  qr[59] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[10] + g_RT[13]));
  // reaction 57:  CO + Op => COp + O
  k_f = 0;
  qf[60] *= k_f;
  qr[60] *= k_f * exp(-(-g_RT[1] + g_RT[5] + g_RT[12] - g_RT[13]));
  // reaction 58:  CO2p + O => CO2 + Op
  k_f = 57930000;
  qf[61] *= k_f;
  qr[61] *= k_f * exp(-(g_RT[1] - g_RT[4] + g_RT[10] - g_RT[12]));
  // reaction 59:  CO + Om => CO2 + E
  k_f = 331200000;
  qf[62] *= k_f;
  qr[62] *= k_f * exp(-(-g_RT[0] - g_RT[4] + g_RT[5] + g_RT[11]));
  // reaction 60:  COp + O => CO + Op
  k_f = 84310000;
  qf[63] *= k_f;
  qr[63] *= k_f * exp(-(g_RT[1] - g_RT[5] - g_RT[12] + g_RT[13]));
  // reaction 61:  O + Om => E + O2
  k_f = 138500000;
  qf[64] *= k_f;
  qr[64] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[2] + g_RT[11]));
  // reaction 62:  Om + Op => 2 O
  k_f = 24090000000;
  qf[65] *= k_f;
  qr[65] *= k_f * exp(-(-2.000000 * g_RT[1] + g_RT[11] + g_RT[12]));
  // reaction 63:  Om + Op + M => O2 + M
  k_f = 72530000000;
  Corr = mixture;
  qf[6] *= Corr * k_f;
  qr[6] *= Corr * k_f * exp(-(-g_RT[2] + g_RT[11] + g_RT[12])) * (refC);
  // reaction 64:  CO2 + O => CO + O2
  k_f = 0;
  qf[66] *= k_f;
  qr[66] *= k_f * exp(-(g_RT[1] - g_RT[2] + g_RT[4] - g_RT[5]));
  // reaction 65:  CO + O + M => CO2 + M
  k_f = 0;
  Corr = mixture;
  qf[7] *= Corr * k_f;
  qr[7] *= Corr * k_f * exp(-(g_RT[1] - g_RT[4] + g_RT[5])) * (refC);
  // reaction 66:  CO + O2 => CO2 + O
  k_f = 0;
  qf[67] *= k_f;
  qr[67] *= k_f * exp(-(-g_RT[1] + g_RT[2] - g_RT[4] + g_RT[5]));
  // reaction 67:  2 O + M => O2 + M
  k_f = 0;
  Corr = mixture;
  qf[8] *= Corr * k_f;
  qr[8] *= Corr * k_f * exp(-(2.000000 * g_RT[1] - g_RT[2])) * (refC);
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void comp_ener_exch(amrex::Real qf, amrex::Real qr, const amrex::Real * sc, amrex::Real kf, int rxntype, amrex::Real eexci, int elidx, amrex::Real * enerExch, amrex::Real Ue, amrex::Real T, const amrex::Real Te)
{
  // (0)='no electron'
  // (1)='excitation/de-excitation'
  // (2)='ionization'
  // (3)='recombination'
  // (4)='attachment'
  // (5)='elastic exchange'
  // (6)='chemi-ioniz'
  // (7)='detachment'

  amrex::Real eV2J = 1.602176620800000e-19;   // eV -> J
  amrex::Real NA = 6.02214085774e23;          // 1/mol
  amrex::Real kB = 1.380649e-23;              // J/K
  amrex::Real ne = sc[E_ID] * NA;             // 1/m3
  amrex::Real mee = Ue / ne;                  // J

  // Molecular weight used to calculate elastic collision energy exchange
  amrex::Real wt[NUM_SPECIES];
  get_mw(wt);

  // Superelastic factor (keeps Te from dropping below gas temperarture)
  amrex::Real sefact = (tanh((Te - T) / 0.5) + 1.0) / 2.0 ;

  // *enerExch = 0.0;
  if(rxntype == 1 || rxntype == 2){ 
    *enerExch -= (eexci*eV2J)*NA*(qf - qr) * sefact;
  }
  if(rxntype == 3){
    // FIXME: Small discrepancies in this term compared with PACMAN,
    // likely due to mee term
    *enerExch -= mee*NA*(qf - qr);
  }
  // if(rxntype[r] == 4){
  //   *enerExch -= mee*NA*(qf[r] - qr[r]);
  // }
  if(rxntype == 5){
    amrex::Real qq = sc[E_ID] * sc[elidx] * kf;
    *enerExch -= 3.0 * kB * (wt[E_ID] / wt[elidx]) * (Te - T) * qq * NA;
  }
  // if(rxntype[r] == 7){
  //   *enerExch += mee*NA*(qf[r] - qr[r]);
  // }
  
  return; 
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
productionRate(amrex::Real* wdot, const amrex::Real* sc, const amrex::Real T, const amrex::Real Te, amrex::Real * enerExch)
{
  const amrex::Real tc[5] = {
    log(T), T, T * T, T * T * T, T * T * T * T}; // temperature cache
  const amrex::Real invT = 1.0 / tc[1];

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  const amrex::Real refC = 101325 / 8.31446 * invT;
  const amrex::Real refCinv = 1 / refC;

  for (int i = 0; i < 16; ++i) {
    wdot[i] = 0.0;
  }

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int i = 0; i < 16; ++i) {
    mixture += sc[i];
  }

  // compute the Gibbs free energy
  amrex::Real g_RT[16];
  gibbs(g_RT, tc);

  // Precalculating values for electron energy exchange evaluation
  amrex::Real ne = sc[E_ID] * 6.02214085774e23;
  amrex::Real Ue = 1.5 * Te * ne * 1.380649e-23;

  // NOTE: units of JANEV fits for electron impact rxns are cm3/s and must be convered to m3/mol-s
  // Precalculating values
  double Janev_sum;
  double invTe =  (Te == 0) ? 1.0 : 1.0/Te;
  double TeeV = Te / 11595.0;
  double logTe = log(TeeV);     // Fits are performed assuming Te is eV rather than K
  double invTeeV = (Te == 0) ? 1.0:1.0 / (TeeV);
  double Te_pow[] = {pow(logTe, 0), pow(logTe, 1), pow(logTe, 2), pow(logTe, 3), pow(logTe, 4), pow(logTe, 5), pow(logTe, 6), pow(logTe, 7), pow(logTe, 8)};
  double invTe_pow[] = {pow(invTeeV, 1), pow(invTeeV, 2), pow(invTeeV, 3), pow(invTeeV, 4)};

  std::vector<double> Jfit_coefs = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
  std::vector<double> Ffit_coefs = {0.0, 0.0, 0.0, 0.0};

  {
    // reaction 5:  CO2 + E => CO + O + E
    Janev_sum = 0.0;
    amrex::Real k_f;
    Ffit_coefs = {28.3950215483559, -119.510009432235, 160.437496467960, -74.1425574458809};
    double Ffit_A = 1.50741518933862e-16;
    for(int j = 0; j<4; j++) Janev_sum += Ffit_coefs[j] * invTe_pow[j];
    k_f = Ffit_A * exp(Janev_sum) * 6.02214085774e23;
    const amrex::Real qf = k_f * (sc[0] * sc[4]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[4] -= qdot;
    wdot[5] += qdot;
  }

  {
    // reaction 6:  CO2 + E => CO2+ + E + E
    // OLD FIT USING PURE CO2 CROSS SECTION DATA
    // Janev_sum = 0.0;
    // amrex::Real k_f;
    // if(TeeV < 8.0){
    //     Jfit_coefs = {-73.2131885836362, 288.352725017751, -674.533620464049, 949.480977796531, -825.714286521495, 451.196428429444, -151.538614955178, 28.6691180230888, -2.34367647830683};
    //     double Jfit_A = 3.99500000000000e-16;
    //     for(int j = 0; j<9; j++) Janev_sum += Jfit_coefs[j] * Te_pow[j];
    //     k_f = Jfit_A * exp(Janev_sum) * 6.02214085774e23;
    // } else {
    //     Ffit_coefs = {-41.5052482777841, 19.3784093595350, -60.4073644704944, 74.5295616459192};
    //     double Ffit_A = 4.15042653485891e-14;
    //     for(int j = 0; j<4; j++) Janev_sum += Ffit_coefs[j] * invTe_pow[j];
    //     k_f = Ffit_A * exp(Janev_sum) * 6.02214085774e23;
    // }
    Janev_sum = 0.0;
    amrex::Real k_f;
    Ffit_coefs = {65.5733184943082, -511.020275942352, 911.053057794656, -540.822599138513};
    double Ffit_A = 1.12781185638050e-15;
    for(int j = 0; j<4; j++) Janev_sum += Ffit_coefs[j] * invTe_pow[j];
    k_f = Ffit_A * exp(Janev_sum) * 6.02214085774e23;
    const amrex::Real qf = k_f * (sc[0] * sc[4]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[4] -= qdot;
    wdot[10] += qdot;
    int rxntype = 2;
    amrex::Real eexci = 13.8;
    int elidx = 0;
    comp_ener_exch(qf, qr, sc, k_f, rxntype, eexci, elidx, enerExch, Ue, tc[1], Te);
  }

  {
    // reaction 10:  CO + E => CO+ + E + E
    Janev_sum = 0.0;
    amrex::Real k_f;
    if(TeeV < 8.0){
        Jfit_coefs = {-2290.33055644355, 11806.3672878286, -26408.0009783117, 33193.6096823637, -25629.3277592247, 12465.3156663098, -3735.92751665149, 631.802846717600, -46.2207594603064};
        double Jfit_A = 1.05300000000000e-14;
        for(int j = 0; j<9; j++) Janev_sum += Jfit_coefs[j] * Te_pow[j];
        k_f = Jfit_A * exp(Janev_sum) * 6.02214085774e23;
    } else {
        Ffit_coefs = {-61.3900740209655, 436.492020460250, -2057.32080961874, 2715.83171383976};
        double Ffit_A = 3.64027197545915e-13;
        for(int j = 0; j<4; j++) Janev_sum += Ffit_coefs[j] * invTe_pow[j];
        k_f = Ffit_A * exp(Janev_sum) * 6.02214085774e23;
    }
    const amrex::Real qf = k_f * (sc[0] * sc[5]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[5] -= qdot;
    wdot[13] += qdot;
  }

  {
    // reaction 13:  AR + E => AR+ + E + E
    Janev_sum = 0.0;
    amrex::Real k_f;
    if(TeeV < 8.0){
        Jfit_coefs = {-1951.40116682516, 9125.28938191463, -19064.2751720459, 22763.7019090326, -16855.4371729404, 7904.47881474249, -2291.72587558317, 375.740475221758, -26.6926001068518};
        double Jfit_A = 1.42900000000000e-14;
        for(int j = 0; j<9; j++) Janev_sum += Jfit_coefs[j] * Te_pow[j];
        k_f = Jfit_A * exp(Janev_sum) * 6.02214085774e23;
    } else {
        Ffit_coefs = {-77.9510931269820, 533.060249822779, -2091.33857389100, 1893.83145115372};
        double Ffit_A = 1.13390537981533e-12;
        for(int j = 0; j<4; j++) Janev_sum += Ffit_coefs[j] * invTe_pow[j];
        k_f = Ffit_A * exp(Janev_sum) * 6.02214085774e23;
    }
    const amrex::Real qf = k_f * (sc[0] * sc[3]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[3] -= qdot;
    wdot[15] += qdot;
    int rxntype = 2;
    amrex::Real eexci = 15.759;
    int elidx = 0;
    comp_ener_exch(qf, qr, sc, k_f, rxntype, eexci, elidx, enerExch, Ue, tc[1], Te);
  }

  {
    // reaction 15:  E + O+ + M => O + M
    const amrex::Real k_f = 3626600000;
    const amrex::Real Corr = mixture;
    const amrex::Real qf = Corr * k_f * (sc[0] * sc[12]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[0] - g_RT[1] + g_RT[12])) * (refC) * (0.0);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += qdot;
    wdot[12] -= qdot;
  }

  {
    // reaction 17:  E + O + M => O- + M
    const amrex::Real k_f = 36266;
    const amrex::Real Corr = mixture;
    const amrex::Real qf = Corr * k_f * (sc[0] * sc[1]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[0] + g_RT[1] - g_RT[11])) * (refC) * (0.0);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] -= qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 63:  O+ + O- + M => O2 + M
    const amrex::Real k_f = 72530000000;
    const amrex::Real Corr = mixture;
    const amrex::Real qf = Corr * k_f * (sc[11] * sc[12]);
    const amrex::Real qr =
      Corr * k_f * exp(-(-g_RT[2] + g_RT[11] + g_RT[12])) * (refC) * (0.0);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[11] -= qdot;
    wdot[12] -= qdot;
  }

  {
    // reaction 65:  CO + O + M => CO2 + M
    const amrex::Real k_f = 297.38267 * exp(-1510.0 / tc[1]);
    const amrex::Real Corr = mixture;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[5]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] - g_RT[4] + g_RT[5])) * (refC) * (0.0);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[4] += qdot;
    wdot[5] -= qdot;
  }

  {
    // reaction 67:  2 O + M => O2 + M
    const amrex::Real k_f = 4605.804775 * (300.0/tc[1]) * exp(-170.0 / tc[1]);
    const amrex::Real Corr = mixture;
    const amrex::Real qf = Corr * k_f * ((sc[1] * sc[1]));
    const amrex::Real qr =
      Corr * k_f * exp(-(2.000000 * g_RT[1] - g_RT[2])) * (refC) * (0.0);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= 2.000000 * qdot;
    wdot[2] += qdot;
  }

  {
    // reaction 0:  CO2 + E => CO2 + E
    Janev_sum = 0.0;
    Jfit_coefs = {-1.74567823745404, 0.489892009971784, 0.475497844841483, -0.0828111482837000, -0.0869447627283896, 0.00364885418266187, 0.00738742037568563, 0.000815768871163232, -1.80446057296271e-05};
    double Jfit_A = 3.07100000000000e-13;
    for(int j = 0; j<9; j++) Janev_sum += Jfit_coefs[j] * Te_pow[j];
    // Capping rate for now since fit diverges at large Te
    const amrex::Real k_f = std::min(Jfit_A * exp(Janev_sum) * 6.02214085774e23, 1.0e12);
    const amrex::Real qf = k_f * (sc[0] * sc[4]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[0] += qdot;
    wdot[4] -= qdot;
    wdot[4] += qdot;
    int rxntype = 5;
    amrex::Real eexci = 0.0;
    int elidx = CO2_ID;
    comp_ener_exch(qf, qr, sc, k_f, rxntype, eexci, elidx, enerExch, Ue, tc[1], Te);
  }

  {
    // reaction 0:  CO2 + E => CO2 + E
    // NOTE: excitational losses for CO2(e1)
    Janev_sum = 0.0;
    amrex::Real k_f;
    Ffit_coefs = {13.9944258667849, -44.2367004233860, 35.3755884340306, -12.2196503543953};
    double Ffit_A = 4.66040157646352e-16;
    for(int j = 0; j<4; j++) Janev_sum += Ffit_coefs[j] * invTe_pow[j];
    k_f = Ffit_A * exp(Janev_sum) * 6.02214085774e23;
    const amrex::Real qf = k_f * (sc[0] * sc[4]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[0] += qdot;
    wdot[4] -= qdot;
    wdot[4] += qdot;
    int rxntype = 2;
    amrex::Real eexci = 7.0;
    int elidx = CO2_ID;
    comp_ener_exch(qf, qr, sc, k_f, rxntype, eexci, elidx, enerExch, Ue, tc[1], Te);
  }

  {
    // reaction 0:  CO2 + E => CO2 + E
    // NOTE: excitational losses for CO2(e2)
    Janev_sum = 0.0;
    amrex::Real k_f;
    Ffit_coefs = {-12.6852242013963, -39.8289588750467, 75.9272218485778, -44.8968368578706};
    double Ffit_A = 1.41992889938866e-13;
    for(int j = 0; j<4; j++) Janev_sum += Ffit_coefs[j] * invTe_pow[j];
    k_f = Ffit_A * exp(Janev_sum) * 6.02214085774e23;
    const amrex::Real qf = k_f * (sc[0] * sc[4]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[0] += qdot;
    wdot[4] -= qdot;
    wdot[4] += qdot;
    int rxntype = 2;
    amrex::Real eexci = 10.5;
    int elidx = CO2_ID;
    comp_ener_exch(qf, qr, sc, k_f, rxntype, eexci, elidx, enerExch, Ue, tc[1], Te);
  }

  {
    // reaction 1:  CO2 + E => CO2(v1) + E
    Janev_sum = 0.0;
    Jfit_coefs = {-0.502839945828532, 0.694016395482428, 0.190052560381054, -0.336722426572758, -0.112995969891858, 0.0625050243076499, 0.0180812366062628, -0.00406798152564209, -0.00117479961936418};
    double Jfit_A = 9.13200000000000e-15;
    for(int j = 0; j<9; j++) Janev_sum += Jfit_coefs[j] * Te_pow[j];
    const amrex::Real k_f = Jfit_A * exp(Janev_sum) * 6.02214085774e23;
    const amrex::Real qf = k_f * (sc[0] * sc[4]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[0] += qdot;
    wdot[4] -= qdot;
    wdot[6] += qdot;
    int rxntype = 1;
    amrex::Real eexci = 0.083;
    int elidx = 0;
    comp_ener_exch(qf, qr, sc, k_f, rxntype, eexci, elidx, enerExch, Ue, tc[1], Te);
  }

  {
    // reaction 2:  CO2 + E => CO2(v2) + E
    // NOTE: CO2(020)
    Janev_sum = 0.0;
    Jfit_coefs = {-1.08379968039393, 1.78557074369457, 0.0320873806354341, -0.785497270396418, -0.0745881449840463, 0.173672656884839, 0.0242491592490644, -0.0137085592778002, -0.00283607126964260};
    double Jfit_A = 4.31900000000000e-15;
    for(int j = 0; j<9; j++) Janev_sum += Jfit_coefs[j] * Te_pow[j];
    const amrex::Real k_f = Jfit_A * exp(Janev_sum) * 6.02214085774e23;
    const amrex::Real qf = k_f * (sc[0] * sc[4]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[0] += qdot;
    wdot[4] -= qdot;
    wdot[7] += qdot;
    int rxntype = 1;
    amrex::Real eexci = 0.17;
    int elidx = 0;
    comp_ener_exch(qf, qr, sc, k_f, rxntype, eexci, elidx, enerExch, Ue, tc[1], Te);
  }

  {
    // reaction 2:  CO2 + E => CO2(v2) + E
    // NOTE: CO2(100)
    Janev_sum = 0.0;
    Jfit_coefs = {-1.74710336851205, 5.28866024293583, -3.06722524904491, -1.26813972992265, 0.765286490697251, 0.220019094021629, -0.0660599223620025, -0.0174513395327540, -0.000100232840708316};
    double Jfit_A = 2.10800000000000e-15;
    for(int j = 0; j<9; j++) Janev_sum += Jfit_coefs[j] * Te_pow[j];
    const amrex::Real k_f = Jfit_A * exp(Janev_sum) * 6.02214085774e23;
    const amrex::Real qf = k_f * (sc[0] * sc[4]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[0] += qdot;
    wdot[4] -= qdot;
    wdot[7] += qdot;
    int rxntype = 1;
    amrex::Real eexci = 0.17;
    int elidx = 0;
    comp_ener_exch(qf, qr, sc, k_f, rxntype, eexci, elidx, enerExch, Ue, tc[1], Te);
  }

  {
    // reaction 4:  CO2 + E => CO2(v4) + E
    Janev_sum = 0.0;
    Jfit_coefs = {-1.26399041657649, 4.01593315343776, -3.86564987870520, 0.630843859313518, 0.918455783525699, -0.466408614313122, -0.122041546730277, 0.133320282875472, -0.0249335094184505};
    double Jfit_A = 1.22800000000000e-15;
    for(int j = 0; j<9; j++) Janev_sum += Jfit_coefs[j] * Te_pow[j];
    const amrex::Real k_f = Jfit_A * exp(Janev_sum) * 6.02214085774e23;
    const amrex::Real qf = k_f * (sc[0] * sc[4]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[0] += qdot;
    wdot[4] -= qdot;
    wdot[9] += qdot;
    int rxntype = 1;
    amrex::Real eexci = 0.252;
    int elidx = 0;
    comp_ener_exch(qf, qr, sc, k_f, rxntype, eexci, elidx, enerExch, Ue, tc[1], Te);
  }

  {
    // reaction 3:  CO2 + E => CO2(v3) + E
    Janev_sum = 0.0;
    Jfit_coefs = {-0.0161587259013659, 0.192761580775350, -0.233095798484862, -0.0504138326883387, 0.0729053506151256, 0.0268158476130099, -0.0130233553843901, -0.00234706991825410, 0.000208569444277222};
    double Jfit_A = 5.87800000000000e-15;
    for(int j = 0; j<9; j++) Janev_sum += Jfit_coefs[j] * Te_pow[j];
    const amrex::Real k_f = Jfit_A * exp(Janev_sum) * 6.02214085774e23;
    const amrex::Real qf = k_f * (sc[0] * sc[4]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[0] += qdot;
    wdot[4] -= qdot;
    wdot[8] += qdot;
    int rxntype = 1;
    amrex::Real eexci = 0.291;
    int elidx = 0;
    comp_ener_exch(qf, qr, sc, k_f, rxntype, eexci, elidx, enerExch, Ue, tc[1], Te);
  }

  {
    // reaction 4:  CO2 + E => CO2(v4) + E
    Janev_sum = 0.0;
    Jfit_coefs = {-0.430350115379283, 1.88554119808260, -2.10311501560593, 0.205835857388545, 0.349603651488484, -0.113940765190612, -0.0356282206715671, 0.0288224520101671, -0.00505168357993776};
    double Jfit_A = 6.65200000000000e-16;
    for(int j = 0; j<9; j++) Janev_sum += Jfit_coefs[j] * Te_pow[j];
    const amrex::Real k_f = Jfit_A * exp(Janev_sum) * 6.02214085774e23;
    const amrex::Real qf = k_f * (sc[0] * sc[4]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[0] += qdot;
    wdot[4] -= qdot;
    wdot[9] += qdot;
    int rxntype = 1;
    amrex::Real eexci = 0.339;
    int elidx = 0;
    comp_ener_exch(qf, qr, sc, k_f, rxntype, eexci, elidx, enerExch, Ue, tc[1], Te);
  }
  {
    // reaction 4:  CO2 + E => CO2(v4) + E
    Janev_sum = 0.0;
    Jfit_coefs = {-1.26866503084565, 4.16951503938324, -4.27011214236418, 0.528779192020846, 1.67719403845492, -0.767308824575880, -0.423310590818580, 0.369354928743402, -0.0691523136873366};
    double Jfit_A = 1.02300000000000e-15;
    for(int j = 0; j<9; j++) Janev_sum += Jfit_coefs[j] * Te_pow[j];
    const amrex::Real k_f = Jfit_A * exp(Janev_sum) * 6.02214085774e23;
    const amrex::Real qf = k_f * (sc[0] * sc[4]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[0] += qdot;
    wdot[4] -= qdot;
    wdot[9] += qdot;
    int rxntype = 1;
    amrex::Real eexci = 0.339;
    int elidx = 0;
    comp_ener_exch(qf, qr, sc, k_f, rxntype, eexci, elidx, enerExch, Ue, tc[1], Te);
  }
  {
    // reaction 4:  CO2 + E => CO2(v4) + E
    Janev_sum = 0.0;
    Jfit_coefs = {-1.16752755372413, 3.97264512328113, -4.02945519654257, 0.673891717708656, 1.00483069462086, -0.508781573502289, -0.133736912597309, 0.144832888470466, -0.0269944163072462};
    double Jfit_A = 3.90400000000000e-16;
    for(int j = 0; j<9; j++) Janev_sum += Jfit_coefs[j] * Te_pow[j];
    const amrex::Real k_f = Jfit_A * exp(Janev_sum) * 6.02214085774e23;
    const amrex::Real qf = k_f * (sc[0] * sc[4]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[0] += qdot;
    wdot[4] -= qdot;
    wdot[9] += qdot;
    int rxntype = 1;
    amrex::Real eexci = 0.422;
    int elidx = 0;
    comp_ener_exch(qf, qr, sc, k_f, rxntype, eexci, elidx, enerExch, Ue, tc[1], Te);
  }
  {
    // reaction 4:  CO2 + E => CO2(v4) + E
    Janev_sum = 0.0;
    Jfit_coefs = {-1.57218058544877, 4.53507634411035, -3.90997647678875, 0.335368207124721, 1.05569484438475, -0.410009273039837, -0.159898555151304, 0.129957825662046, -0.0219563391933853};
    double Jfit_A = 2.89300000000000e-16;
    for(int j = 0; j<9; j++) Janev_sum += Jfit_coefs[j] * Te_pow[j];
    const amrex::Real k_f = Jfit_A * exp(Janev_sum) * 6.02214085774e23;
    const amrex::Real qf = k_f * (sc[0] * sc[4]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[0] += qdot;
    wdot[4] -= qdot;
    wdot[9] += qdot;
    int rxntype = 1;
    amrex::Real eexci = 0.5;
    int elidx = 0;
    comp_ener_exch(qf, qr, sc, k_f, rxntype, eexci, elidx, enerExch, Ue, tc[1], Te);
  }
  {
    // reaction 4:  CO2 + E => CO2(v4) + E
    Janev_sum = 0.0;
    Jfit_coefs = {-0.803462147557306, 3.31431359636670, -3.80327983310172, 0.791648348030451, 0.692211498451406, -0.342472582689845, -0.0688634709416767, 0.0708789327184151, -0.0117253943723200};
    double Jfit_A = 1.68100000000000e-16;
    for(int j = 0; j<9; j++) Janev_sum += Jfit_coefs[j] * Te_pow[j];
    const amrex::Real k_f = Jfit_A * exp(Janev_sum) * 6.02214085774e23;
    const amrex::Real qf = k_f * (sc[0] * sc[4]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[0] += qdot;
    wdot[4] -= qdot;
    wdot[9] += qdot;
    int rxntype = 1;
    amrex::Real eexci = 0.505;
    int elidx = 0;
    comp_ener_exch(qf, qr, sc, k_f, rxntype, eexci, elidx, enerExch, Ue, tc[1], Te);
  }
  {
    // reaction 4:  CO2 + E => CO2(v4) + E
    Janev_sum = 0.0;
    Jfit_coefs = {-1.13341741015961, 3.84235032466761, -3.89843865763089, 0.695260507371384, 0.918161189362339, -0.486298345254785, -0.117448184645462, 0.135925105891503, -0.0258281763494971};
    double Jfit_A = 5.46700000000000e-16;
    for(int j = 0; j<9; j++) Janev_sum += Jfit_coefs[j] * Te_pow[j];
    const amrex::Real k_f = Jfit_A * exp(Janev_sum) * 6.02214085774e23;
    const amrex::Real qf = k_f * (sc[0] * sc[4]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[0] += qdot;
    wdot[4] -= qdot;
    wdot[9] += qdot;
    int rxntype = 1;
    amrex::Real eexci = 2.5;
    int elidx = 0;
    comp_ener_exch(qf, qr, sc, k_f, rxntype, eexci, elidx, enerExch, Ue, tc[1], Te);
  }

  {
    // reaction 7:  CO2 + E => CO + 2 E + O+
    Janev_sum = 0.0;
    amrex::Real k_f;
    Ffit_coefs = {-77.4751667545915, 368.702583061800, -1027.52886179464, -875.218481131602};
    double Ffit_A = 1.67574146792253e-13;
    for(int j = 0; j<4; j++) Janev_sum += Ffit_coefs[j] * invTe_pow[j];
    k_f = Ffit_A * exp(Janev_sum) * 6.02214085774e23;
    const amrex::Real qf = k_f * (sc[0] * sc[4]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] += 2.000000 * qdot;
    wdot[0] -= qdot;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[12] += qdot;
    int rxntype = 2;
    amrex::Real eexci = 19.1;
    int elidx = 0;
    comp_ener_exch(qf, qr, sc, k_f, rxntype, eexci, elidx, enerExch, Ue, tc[1], Te);
  }

  {
    // reaction 8:  CO2 + E => CO+ + 2 E + O
    Janev_sum = 0.0;
    amrex::Real k_f;
    if(TeeV < 8.0){
        Jfit_coefs = {-16374.5761168493, 70345.6825911028, -132493.614520093, 142424.193083429, -95424.9718989068, 40779.8217137456, -10852.6008636845, 1644.38446103563, -108.620096064776};
        double Jfit_A = 1.10800000000000e-15;
        for(int j = 0; j<9; j++) Janev_sum += Jfit_coefs[j] * Te_pow[j];
        k_f = Jfit_A * exp(Janev_sum) * 6.02214085774e23;
    } else {
        Ffit_coefs = {-117.796225708354, 928.699594978788, -3999.36334971610, 4171.87939848509};
        double Ffit_A = 4.84703792532310e-13;
        for(int j = 0; j<4; j++) Janev_sum += Ffit_coefs[j] * invTe_pow[j];
        k_f = Ffit_A * exp(Janev_sum) * 6.02214085774e23;
    }
    const amrex::Real qf = k_f * (sc[0] * sc[4]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] += 2.000000 * qdot;
    wdot[0] -= qdot;
    wdot[1] += qdot;
    wdot[4] -= qdot;
    wdot[13] += qdot;
    int rxntype = 2;
    amrex::Real eexci = 19.5;
    int elidx = 0;
    comp_ener_exch(qf, qr, sc, k_f, rxntype, eexci, elidx, enerExch, Ue, tc[1], Te);
  }

  {
    // reaction 9:  CO2 + E => CO + O-
    Janev_sum = 0.0;
    amrex::Real k_f;
    Ffit_coefs = {5.68537810168761, -15.1912011431635, 6.86995641002507, -1.21745244042248};
    double Ffit_A = 4.23133262631561e-18;
    for(int j = 0; j<4; j++) Janev_sum += Ffit_coefs[j] * invTe_pow[j];
    k_f = Ffit_A * exp(Janev_sum) * 6.02214085774e23;
    const amrex::Real qf = k_f * (sc[0] * sc[4]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[11] += qdot;
    int rxntype = 4;
    amrex::Real eexci = 0.0;
    int elidx = 0;
    comp_ener_exch(qf, qr, sc, k_f, rxntype, eexci, elidx, enerExch, Ue, tc[1], Te);
  }

  {
    // reaction 11:  AR + E => AR + E
    Janev_sum = 0.0;
    Jfit_coefs = {-2.62130096848181, 1.55888667906962, 0.0350711485300335, 0.00439515704875221, -0.00138205864597430, -0.0293026895863627, -0.00284458054782676, 0.00241786232297547, 0.000390470745241025};
    double Jfit_A = 2.33300000000000e-13;
    for(int j = 0; j<9; j++) Janev_sum += Jfit_coefs[j] * Te_pow[j];
    const amrex::Real k_f = std::min(Jfit_A * exp(Janev_sum) * 6.02214085774e23, 3.0e-13*6.02214085774e23);
    const amrex::Real qf = k_f * (sc[0] * sc[3]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[0] += qdot;
    wdot[3] -= qdot;
    wdot[3] += qdot;
    int rxntype = 5;
    amrex::Real eexci = 0.0;
    int elidx = AR_ID;
    comp_ener_exch(qf, qr, sc, k_f, rxntype, eexci, elidx, enerExch, Ue, tc[1], Te);
  }

  {
    // reaction 12:  AR + E => AR* + E
    Janev_sum = 0.0;
    amrex::Real k_f;
    Ffit_coefs = {-17.8244315740958, -55.1739383730274, 102.978958246859, -55.9966048149755};
    double Ffit_A = 9.18800465289008e-14;
    for(int j = 0; j<4; j++) Janev_sum += Ffit_coefs[j] * invTe_pow[j];
    k_f = Ffit_A * exp(Janev_sum) * 6.02214085774e23;
    const amrex::Real qf = k_f * (sc[0] * sc[3]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[0] += qdot;
    wdot[3] -= qdot;
    wdot[14] += qdot;
    int rxntype = 1;
    amrex::Real eexci = 11.55;
    int elidx = AR_ID;
    comp_ener_exch(qf, qr, sc, k_f, rxntype, eexci, elidx, enerExch, Ue, tc[1], Te);
  }

  {
    // reaction 14:  CO2+ + E => CO + O
    const amrex::Real k_f = 12044281520000 * (1.0/tc[1]) * pow(TeeV,-0.5);
    const amrex::Real qf = k_f * (sc[0] * sc[10]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += qdot;
    wdot[5] += qdot;
    wdot[10] -= qdot;
  }

  {
    // reaction 16:  CO+ + E => CO
    const amrex::Real k_f = 2.217954441908e10 * pow(TeeV, -0.55);
    const amrex::Real qf = k_f * (sc[0] * sc[13]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[5] += qdot;
    wdot[13] -= qdot;
  }

  {
    // reaction 18:  AR* + CO2 => AR + CO + O
    const amrex::Real k_f = 319200000;
    const amrex::Real qf = k_f * (sc[4] * sc[14]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[3] += qdot;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[14] -= qdot;
  }

  {
    // reaction 19:  AR+ + CO2 => AR + CO + O+
    const amrex::Real k_f = 0;
    const amrex::Real qf = k_f * (sc[4] * sc[15]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[12] += qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 20:  AR+ + CO2 => AR + CO+ + O
    const amrex::Real k_f = 0;
    const amrex::Real qf = k_f * (sc[4] * sc[15]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[3] += qdot;
    wdot[4] -= qdot;
    wdot[13] += qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 21:  AR+ + CO2 => AR + CO2+
    const amrex::Real k_f = 30110000;
    const amrex::Real qf = k_f * (sc[4] * sc[15]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[4] -= qdot;
    wdot[10] += qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 22:  CO2 + CO2(v1) => 2 CO2
    const amrex::Real k_f = 6444;
    const amrex::Real qf = k_f * (sc[4] * sc[6]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[4] += 2.000000 * qdot;
    wdot[6] -= qdot;
  }

  {
    // reaction 23:  CO + CO2(v1) => CO + CO2
    const amrex::Real k_f = 4505;
    const amrex::Real qf = k_f * (sc[5] * sc[6]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[5] -= qdot;
    wdot[5] += qdot;
    wdot[6] -= qdot;
  }

  {
    // reaction 24:  CO2(v1) + O2 => CO2 + O2
    const amrex::Real k_f = 4505;
    const amrex::Real qf = k_f * (sc[2] * sc[6]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[2] += qdot;
    wdot[4] += qdot;
    wdot[6] -= qdot;
  }

  {
    // reaction 25:  AR + CO2(v1) => AR + CO2
    const amrex::Real k_f = 4505;
    const amrex::Real qf = k_f * (sc[3] * sc[6]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[3] += qdot;
    wdot[4] += qdot;
    wdot[6] -= qdot;
  }

  {
    // reaction 26:  CO2 + CO2(v2) => 2 CO2
    const amrex::Real k_f = 5.42;
    const amrex::Real qf = k_f * (sc[4] * sc[7]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[4] += 2.000000 * qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 27:  CO + CO2(v2) => CO + CO2
    const amrex::Real k_f = 16.8;
    const amrex::Real qf = k_f * (sc[5] * sc[7]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[5] -= qdot;
    wdot[5] += qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 28:  CO2(v2) + O2 => CO2 + O2
    const amrex::Real k_f = 16.8;
    const amrex::Real qf = k_f * (sc[2] * sc[7]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[2] += qdot;
    wdot[4] += qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 29:  AR + CO2(v2) => AR + CO2
    const amrex::Real k_f = 16.8;
    const amrex::Real qf = k_f * (sc[3] * sc[7]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[3] += qdot;
    wdot[4] += qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 30:  CO2 + CO2(v2) => CO2 + CO2(v1)
    const amrex::Real k_f = 17460;
    const amrex::Real qf = k_f * (sc[4] * sc[7]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[4] += qdot;
    wdot[6] += qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 31:  CO + CO2(v2) => CO + CO2(v1)
    const amrex::Real k_f = 12220;
    const amrex::Real qf = k_f * (sc[5] * sc[7]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[5] += qdot;
    wdot[6] += qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 32:  CO2(v2) + O2 => CO2(v1) + O2
    const amrex::Real k_f = 12220;
    const amrex::Real qf = k_f * (sc[2] * sc[7]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[2] += qdot;
    wdot[6] += qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 33:  AR + CO2(v2) => AR + CO2(v1)
    const amrex::Real k_f = 12220;
    const amrex::Real qf = k_f * (sc[3] * sc[7]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[3] += qdot;
    wdot[6] += qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 34:  CO2 + CO2(v3) => CO2 + CO2(v2)
    const amrex::Real k_f = 464.9;
    const amrex::Real qf = k_f * (sc[4] * sc[8]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[4] += qdot;
    wdot[7] += qdot;
    wdot[8] -= qdot;
  }

  {
    // reaction 35:  CO + CO2(v3) => CO + CO2(v2)
    const amrex::Real k_f = 13.97;
    const amrex::Real qf = k_f * (sc[5] * sc[8]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[5] += qdot;
    wdot[7] += qdot;
    wdot[8] -= qdot;
  }

  {
    // reaction 36:  CO2(v3) + O2 => CO2(v2) + O2
    const amrex::Real k_f = 186.1;
    const amrex::Real qf = k_f * (sc[2] * sc[8]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[2] += qdot;
    wdot[7] += qdot;
    wdot[8] -= qdot;
  }

  {
    // reaction 37:  AR + CO2(v3) => AR + CO2(v2)
    const amrex::Real k_f = 186.1;
    const amrex::Real qf = k_f * (sc[3] * sc[8]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[3] += qdot;
    wdot[7] += qdot;
    wdot[8] -= qdot;
  }

  {
    // reaction 38:  CO2 + CO2(v3) => CO2 + CO2(v4)
    const amrex::Real k_f = 3643;
    const amrex::Real qf = k_f * (sc[4] * sc[8]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[4] += qdot;
    wdot[8] -= qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 39:  CO + CO2(v3) => CO + CO2(v4)
    const amrex::Real k_f = 1090;
    const amrex::Real qf = k_f * (sc[5] * sc[8]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[5] += qdot;
    wdot[8] -= qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 40:  CO2(v3) + O2 => CO2(v4) + O2
    const amrex::Real k_f = 1457;
    const amrex::Real qf = k_f * (sc[2] * sc[8]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[2] += qdot;
    wdot[8] -= qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 41:  AR + CO2(v3) => AR + CO2(v4)
    const amrex::Real k_f = 1457;
    const amrex::Real qf = k_f * (sc[3] * sc[8]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[3] += qdot;
    wdot[8] -= qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 42:  CO2 + CO2(v3) => CO2(v1) + CO2(v2)
    const amrex::Real k_f = 1457;
    const amrex::Real qf = k_f * (sc[4] * sc[8]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[6] += qdot;
    wdot[7] += qdot;
    wdot[8] -= qdot;
  }

  {
    // reaction 43:  CO2 + CO2(v3) => CO2 + CO2(v1)
    const amrex::Real k_f = 1.024;
    const amrex::Real qf = k_f * (sc[4] * sc[8]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[4] += qdot;
    wdot[6] += qdot;
    wdot[8] -= qdot;
  }

  {
    // reaction 44:  CO + CO2(v3) => CO + CO2(v1)
    const amrex::Real k_f = 0.3071;
    const amrex::Real qf = k_f * (sc[5] * sc[8]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[5] += qdot;
    wdot[6] += qdot;
    wdot[8] -= qdot;
  }

  {
    // reaction 45:  CO2(v3) + O2 => CO2(v1) + O2
    const amrex::Real k_f = 0.4095;
    const amrex::Real qf = k_f * (sc[2] * sc[8]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[2] += qdot;
    wdot[6] += qdot;
    wdot[8] -= qdot;
  }

  {
    // reaction 46:  AR + CO2(v3) => AR + CO2(v1)
    const amrex::Real k_f = 0.4095;
    const amrex::Real qf = k_f * (sc[3] * sc[8]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[3] += qdot;
    wdot[6] += qdot;
    wdot[8] -= qdot;
  }

  {
    // reaction 47:  CO2 + CO2(v4) => CO2 + CO2(v2)
    const amrex::Real k_f = 26080;
    const amrex::Real qf = k_f * (sc[4] * sc[9]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[4] += qdot;
    wdot[7] += qdot;
    wdot[9] -= qdot;
  }

  {
    // reaction 48:  CO + CO2(v4) => CO + CO2(v2)
    const amrex::Real k_f = 18250;
    const amrex::Real qf = k_f * (sc[5] * sc[9]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[5] += qdot;
    wdot[7] += qdot;
    wdot[9] -= qdot;
  }

  {
    // reaction 49:  CO2(v4) + O2 => CO2(v2) + O2
    const amrex::Real k_f = 18250;
    const amrex::Real qf = k_f * (sc[2] * sc[9]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[2] += qdot;
    wdot[7] += qdot;
    wdot[9] -= qdot;
  }

  {
    // reaction 50:  AR + CO2(v4) => AR + CO2(v2)
    const amrex::Real k_f = 18250;
    const amrex::Real qf = k_f * (sc[3] * sc[9]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[3] += qdot;
    wdot[7] += qdot;
    wdot[9] -= qdot;
  }

  {
    // reaction 51:  CO2 + CO2(v4) => CO2 + CO2(v1)
    const amrex::Real k_f = 5.468;
    const amrex::Real qf = k_f * (sc[4] * sc[9]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[4] += qdot;
    wdot[6] += qdot;
    wdot[9] -= qdot;
  }

  {
    // reaction 52:  CO + CO2(v4) => CO + CO2(v1)
    const amrex::Real k_f = 3722;
    const amrex::Real qf = k_f * (sc[5] * sc[9]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[5] += qdot;
    wdot[6] += qdot;
    wdot[9] -= qdot;
  }

  {
    // reaction 53:  CO2(v4) + O2 => CO2(v1) + O2
    const amrex::Real k_f = 3722;
    const amrex::Real qf = k_f * (sc[2] * sc[9]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[2] += qdot;
    wdot[6] += qdot;
    wdot[9] -= qdot;
  }

  {
    // reaction 54:  AR + CO2(v4) => AR + CO2(v1)
    const amrex::Real k_f = 3722;
    const amrex::Real qf = k_f * (sc[3] * sc[9]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[3] += qdot;
    wdot[6] += qdot;
    wdot[9] -= qdot;
  }

  {
    // reaction 55:  CO2 + O+ => CO2+ + O
    const amrex::Real k_f = 271000000;
    const amrex::Real qf = k_f * (sc[4] * sc[12]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[4] -= qdot;
    wdot[10] += qdot;
    wdot[12] -= qdot;
  }

  {
    // reaction 56:  CO+ + CO2 => CO + CO2+
    const amrex::Real k_f = 602200000;
    const amrex::Real qf = k_f * (sc[4] * sc[13]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[10] += qdot;
    wdot[13] -= qdot;
  }

  {
    // reaction 57:  CO + O+ => CO+ + O
    const amrex::Real k_f = 2950848.9724 * pow(tc[1],0.5) * exp(-4580.0 / tc[1]);
    const amrex::Real qf = k_f * (sc[5] * sc[12]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[5] -= qdot;
    wdot[12] -= qdot;
    wdot[13] += qdot;
  }

  {
    // reaction 58:  CO2+ + O => CO2 + O+
    const amrex::Real k_f = 57930000;
    const amrex::Real qf = k_f * (sc[1] * sc[10]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[4] += qdot;
    wdot[10] -= qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 59:  CO + O- => CO2 + E
    const amrex::Real k_f = 331200000;
    const amrex::Real qf = k_f * (sc[5] * sc[11]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[4] += qdot;
    wdot[5] -= qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 60:  CO+ + O => CO + O+
    const amrex::Real k_f = 84310000;
    const amrex::Real qf = k_f * (sc[1] * sc[13]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[5] += qdot;
    wdot[12] += qdot;
    wdot[13] -= qdot;
  }

  {
    // reaction 61:  O + O- => E + O2
    const amrex::Real k_f = 138500000;
    const amrex::Real qf = k_f * (sc[1] * sc[11]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[2] += qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 62:  O+ + O- => 2 O
    const amrex::Real k_f = 24090000000;
    const amrex::Real qf = k_f * (sc[11] * sc[12]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[1] += 2.000000 * qdot;
    wdot[11] -= qdot;
    wdot[12] -= qdot;
  }

  {
    // reaction 64:  CO2 + O => CO + O2
    const amrex::Real k_f = 16861994.128 * exp(-26500.0 / tc[1]);
    const amrex::Real qf = k_f * (sc[1] * sc[4]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[2] += qdot;
    wdot[4] -= qdot;
    wdot[5] += qdot;
  }

  {
    // reaction 66:  CO + O2 => CO2 + O
    const amrex::Real k_f = 2529299.1192 * exp(-24000.0 / tc[1]);
    const amrex::Real qf = k_f * (sc[2] * sc[5]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[5] -= qdot;
  }
}

// compute the production rate for each species
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWC(const amrex::Real T, amrex::Real C[], amrex::Real wdot[], const amrex::Real Te, const amrex::Real EN, amrex::Real * ener_exch)
{

  // convert to SI
  for (int id = 0; id < 16; ++id) {
    C[id] *= 1.0e6;
  }

  // convert to chemkin units
  productionRate(wdot, C, T, Te, ener_exch);

  // convert to chemkin units
  for (int id = 0; id < 16; ++id) {
    C[id] *= 1.0e-6;
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given P, T, and mass fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWYP(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real wdot[],
  const amrex::Real Te, 
  amrex::Real * ener_exch)
{
  amrex::Real c[16]; // temporary storage
  amrex::Real YOW = 0;
  amrex::Real PWORT;

  // Compute inverse of mean molecular wt first
  for (int i = 0; i < 16; i++) {
    YOW += y[i] * imw(i);
  }
  // PW/RT (see Eq. 7)
  PWORT = P / (YOW * 8.31446261815324e+07 * T);
  // multiply by 1e6 so c goes to SI
  PWORT *= 1e6;
  // Now compute conversion (and go to SI)
  for (int i = 0; i < 16; i++) {
    c[i] = PWORT * y[i] * imw(i);
  }

  // convert to chemkin units
  productionRate(wdot, c, T, Te, ener_exch);

  // convert to chemkin units
  for (int id = 0; id < 16; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given P, T, and mole fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWXP(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real wdot[],
  const amrex::Real Te,
  amrex::Real * ener_exch)
{
  amrex::Real c[16]; // temporary storage
  amrex::Real PORT =
    1e6 * P / (8.31446261815324e+07 * T); // 1e6 * P/RT so c goes to SI units

  // Compute conversion, see Eq 10
  for (int id = 0; id < 16; ++id) {
    c[id] = x[id] * PORT;
  }

  // convert to chemkin units
  productionRate(wdot, c, T, Te, ener_exch);

  // convert to chemkin units
  for (int id = 0; id < 16; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given rho, T, and mass fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWYR(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real wdot[],
  const amrex::Real Te, 
  amrex::Real * ener_exch)
{
  amrex::Real c[16]; // temporary storage

  // See Eq 8 with an extra 1e6 so c goes to SI
  for (int i = 0; i < 16; i++) {
    c[i] = 1e6 * rho * y[i] * imw(i);
  }

  // call productionRate
  productionRate(wdot, c, T, Te, ener_exch);

  // convert to chemkin units
  for (int id = 0; id < 16; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given rho, T, and mole fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWXR(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real wdot[],
  const amrex::Real Te, 
  amrex::Real * ener_exch)
{
  amrex::Real c[16];  // temporary storage
  amrex::Real XW = 0; // See Eq 4, 11 in CK Manual
  amrex::Real ROW;
  // Compute mean molecular wt first
  XW += x[0] * 0.000549;   // E
  XW += x[1] * 15.999000;  // O
  XW += x[2] * 31.998000;  // O2
  XW += x[3] * 39.950000;  // AR
  XW += x[4] * 44.009000;  // CO2
  XW += x[5] * 28.010000;  // CO
  XW += x[6] * 44.009000;  // CO2(v1)
  XW += x[7] * 44.009000;  // CO2(v2)
  XW += x[8] * 44.009000;  // CO2(v3)
  XW += x[9] * 44.009000;  // CO2(v4)
  XW += x[10] * 44.008451; // CO2+
  XW += x[11] * 15.999549; // O-
  XW += x[12] * 15.998451; // O+
  XW += x[13] * 28.009451; // CO+
  XW += x[14] * 39.950000; // AR*
  XW += x[15] * 39.949451; // AR+
  // Extra 1e6 factor to take c to SI
  ROW = 1e6 * rho / XW;

  // Compute conversion, see Eq 11
  for (int id = 0; id < 16; ++id) {
    c[id] = x[id] * ROW;
  }

  // convert to chemkin units
  productionRate(wdot, c, T, Te, ener_exch);

  // convert to chemkin units
  for (int id = 0; id < 16; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

//  species unit charge number
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCHRG(int kcharge[])
{
  kcharge[0] = -1;  // E
  kcharge[1] = 0;   // O
  kcharge[2] = 0;   // O2
  kcharge[3] = 0;   // AR
  kcharge[4] = 0;   // CO2
  kcharge[5] = 0;   // CO
  kcharge[6] = 0;   // CO2v1
  kcharge[7] = 0;   // CO2v2
  kcharge[8] = 0;   // CO2v3
  kcharge[9] = 0;   // CO2v4
  kcharge[10] = 1;  // CO2p
  kcharge[11] = -1; // Om
  kcharge[12] = 1;  // Op
  kcharge[13] = 1;  // COp
  kcharge[14] = 0;  // ARe
  kcharge[15] = 1;  // ARp
}

//  species charge per unit mass
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCHRGMASS(amrex::Real zk[])
{

  int kchrg[16];
  CKCHRG(kchrg);

  for (int id = 0; id < 16; ++id) {
    zk[id] = 6.02214076e+23 * 1.60217663e-19 * kchrg[id] * imw(id);
  }
}

// compute d(Cp/R)/dT and d(Cv/R)/dT at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
dcvpRdT(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: E
    species[0] = +0.00000000e+00 + 0.00000000e+00 * tc[1] +
                 0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3];
    // species 1: O
    species[1] = -3.27931884e-03 + 1.32861279e-05 * tc[1] -
                 1.83841987e-08 * tc[2] + 8.45063884e-12 * tc[3];
    // species 2: O2
    species[2] = -2.99673416e-03 + 1.96946040e-05 * tc[1] -
                 2.90438853e-08 * tc[2] + 1.29749135e-11 * tc[3];
    // species 4: CO2
    species[4] = +8.98459677e-03 - 1.42471254e-05 * tc[1] +
                 7.37757066e-09 * tc[2] - 5.74798192e-13 * tc[3];
    // species 5: CO
    species[5] = -6.10353680e-04 + 2.03362866e-06 * tc[1] +
                 2.72101765e-09 * tc[2] - 3.61769800e-12 * tc[3];
    // species 6: CO2v1
    species[6] = +8.98459677e-03 - 1.42471254e-05 * tc[1] +
                 7.37757066e-09 * tc[2] - 5.74798192e-13 * tc[3];
    // species 7: CO2v2
    species[7] = +8.98459677e-03 - 1.42471254e-05 * tc[1] +
                 7.37757066e-09 * tc[2] - 5.74798192e-13 * tc[3];
    // species 8: CO2v3
    species[8] = +8.98459677e-03 - 1.42471254e-05 * tc[1] +
                 7.37757066e-09 * tc[2] - 5.74798192e-13 * tc[3];
    // species 9: CO2v4
    species[9] = +8.98459677e-03 - 1.42471254e-05 * tc[1] +
                 7.37757066e-09 * tc[2] - 5.74798192e-13 * tc[3];
    // species 10: CO2p
    species[10] = +8.98459677e-03 - 1.42471254e-05 * tc[1] +
                  7.37757066e-09 * tc[2] - 5.74798192e-13 * tc[3];
    // species 11: Om
    species[11] = -3.27931884e-03 + 1.32861279e-05 * tc[1] -
                  1.83841987e-08 * tc[2] + 8.45063884e-12 * tc[3];
    // species 12: Op
    species[12] = -3.27931884e-03 + 1.32861279e-05 * tc[1] -
                  1.83841987e-08 * tc[2] + 8.45063884e-12 * tc[3];
    // species 13: COp
    species[13] = -6.10353680e-04 + 2.03362866e-06 * tc[1] +
                  2.72101765e-09 * tc[2] - 3.61769800e-12 * tc[3];
  } else {
    // species 0: E
    species[0] = +0.00000000e+00 + 0.00000000e+00 * tc[1] +
                 0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3];
    // species 1: O
    species[1] = -8.59741137e-05 + 8.38969178e-08 * tc[1] -
                 3.00533397e-11 * tc[2] + 4.91334764e-15 * tc[3];
    // species 2: O2
    species[2] = +1.48308754e-03 - 1.51593334e-06 * tc[1] +
                 6.28411665e-10 * tc[2] - 8.66871176e-14 * tc[3];
    // species 4: CO2
    species[4] = +4.41437026e-03 - 4.42962808e-06 * tc[1] +
                 1.57047056e-09 * tc[2] - 1.88833666e-13 * tc[3];
    // species 5: CO
    species[5] = +2.06252743e-03 - 1.99765154e-06 * tc[1] +
                 6.90159024e-10 * tc[2] - 8.14590864e-14 * tc[3];
    // species 6: CO2v1
    species[6] = +4.41437026e-03 - 4.42962808e-06 * tc[1] +
                 1.57047056e-09 * tc[2] - 1.88833666e-13 * tc[3];
    // species 7: CO2v2
    species[7] = +4.41437026e-03 - 4.42962808e-06 * tc[1] +
                 1.57047056e-09 * tc[2] - 1.88833666e-13 * tc[3];
    // species 8: CO2v3
    species[8] = +4.41437026e-03 - 4.42962808e-06 * tc[1] +
                 1.57047056e-09 * tc[2] - 1.88833666e-13 * tc[3];
    // species 9: CO2v4
    species[9] = +4.41437026e-03 - 4.42962808e-06 * tc[1] +
                 1.57047056e-09 * tc[2] - 1.88833666e-13 * tc[3];
    // species 10: CO2p
    species[10] = +4.41437026e-03 - 4.42962808e-06 * tc[1] +
                  1.57047056e-09 * tc[2] - 1.88833666e-13 * tc[3];
    // species 11: Om
    species[11] = -8.59741137e-05 + 8.38969178e-08 * tc[1] -
                  3.00533397e-11 * tc[2] + 4.91334764e-15 * tc[3];
    // species 12: Op
    species[12] = -8.59741137e-05 + 8.38969178e-08 * tc[1] -
                  3.00533397e-11 * tc[2] + 4.91334764e-15 * tc[3];
    // species 13: COp
    species[13] = +2.06252743e-03 - 1.99765154e-06 * tc[1] +
                  6.90159024e-10 * tc[2] - 8.14590864e-14 * tc[3];
  }

  // species with no change at a midpoint T
  // species 3: AR
  species[3] = +0.00000000e+00 + 0.00000000e+00 * tc[1] +
               0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3];
  // species 14: ARe
  species[14] = +0.00000000e+00 + 0.00000000e+00 * tc[1] +
                0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3];
  // species 15: ARp
  species[15] = +0.00000000e+00 + 0.00000000e+00 * tc[1] +
                0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3];
}

// compute an approx to the reaction Jacobian
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
aJacobian_precond(
  amrex::Real* J, const amrex::Real* sc, const amrex::Real T, const int HP)
{

#if defined(PELE_COMPILE_AJACOBIAN) || !defined(AMREX_USE_HIP)
  for (int i = 0; i < 289; i++) {
    J[i] = 0.0;
  }

  amrex::Real wdot[16];
  for (auto& val : wdot) {
    val = 0.0;
  }

  const amrex::Real tc[5] = {
    log(T), T, T * T, T * T * T, T * T * T * T}; // temperature cache
  amrex::Real invT = 1.0 / tc[1];
  amrex::Real invT2 = invT * invT;

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  amrex::Real refC = 101325 / 8.31446 / T;
  amrex::Real refCinv = 1.0 / refC;

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int k = 0; k < 16; ++k) {
    mixture += sc[k];
  }

  // compute the Gibbs free energy
  amrex::Real g_RT[16];
  gibbs(g_RT, tc);

  // compute the species enthalpy
  amrex::Real h_RT[16];
  speciesEnthalpy(h_RT, tc);

  amrex::Real phi_f, k_f, k_r, phi_r, Kc, q, q_nocor, Corr, alpha;
  amrex::Real dlnkfdT, dlnk0dT, dlnKcdT, dkrdT, dqdT;
  amrex::Real dqdci, dcdc_fac, dqdc[16];
  amrex::Real Pr, fPr, F, k_0, logPr;
  amrex::Real logFcent, troe_c, troe_n, troePr_den, troePr, troe;
  amrex::Real Fcent1, Fcent2, Fcent3, Fcent;
  amrex::Real dlogFdc, dlogFdn, dlogFdcn_fac;
  amrex::Real dlogPrdT, dlogfPrdT, dlogFdT, dlogFcentdT, dlogFdlogPr, dlnCorrdT;
  const amrex::Real ln10 = log(10.0);
  const amrex::Real log10e = 1.0 / log(10.0);
  // reaction 5: CO2 + E => CO + O + E
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[4];
  k_f = 0;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[1] += q; // O
  wdot[4] -= q; // CO2
  wdot[5] += q; // CO
  // d()/d[E]
  dqdci = +k_f * sc[4];
  J[1] += dqdci; // dwdot[O]/d[E]
  J[4] -= dqdci; // dwdot[CO2]/d[E]
  J[5] += dqdci; // dwdot[CO]/d[E]
  // d()/d[CO2]
  dqdci = +k_f * sc[0];
  J[69] += dqdci; // dwdot[O]/d[CO2]
  J[72] -= dqdci; // dwdot[CO2]/d[CO2]
  J[73] += dqdci; // dwdot[CO]/d[CO2]
  // d()/dT
  J[273] += dqdT; // dwdot[O]/dT
  J[276] -= dqdT; // dwdot[CO2]/dT
  J[277] += dqdT; // dwdot[CO]/dT

  // reaction 6: CO2 + E => CO2p + E + E
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[4];
  k_f = 0;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] += q;  // E
  wdot[4] -= q;  // CO2
  wdot[10] += q; // CO2p
  // d()/d[E]
  dqdci = +k_f * sc[4];
  J[0] += dqdci;  // dwdot[E]/d[E]
  J[4] -= dqdci;  // dwdot[CO2]/d[E]
  J[10] += dqdci; // dwdot[CO2p]/d[E]
  // d()/d[CO2]
  dqdci = +k_f * sc[0];
  J[68] += dqdci; // dwdot[E]/d[CO2]
  J[72] -= dqdci; // dwdot[CO2]/d[CO2]
  J[78] += dqdci; // dwdot[CO2p]/d[CO2]
  // d()/dT
  J[272] += dqdT; // dwdot[E]/dT
  J[276] -= dqdT; // dwdot[CO2]/dT
  J[282] += dqdT; // dwdot[CO2p]/dT

  // reaction 10: CO + E => COp + E + E
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[5];
  k_f = 0;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] += q;  // E
  wdot[5] -= q;  // CO
  wdot[13] += q; // COp
  // d()/d[E]
  dqdci = +k_f * sc[5];
  J[0] += dqdci;  // dwdot[E]/d[E]
  J[5] -= dqdci;  // dwdot[CO]/d[E]
  J[13] += dqdci; // dwdot[COp]/d[E]
  // d()/d[CO]
  dqdci = +k_f * sc[0];
  J[85] += dqdci; // dwdot[E]/d[CO]
  J[90] -= dqdci; // dwdot[CO]/d[CO]
  J[98] += dqdci; // dwdot[COp]/d[CO]
  // d()/dT
  J[272] += dqdT; // dwdot[E]/dT
  J[277] -= dqdT; // dwdot[CO]/dT
  J[285] += dqdT; // dwdot[COp]/dT

  // reaction 13: AR + E => ARp + E + E
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[3];
  k_f = 0;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] += q;  // E
  wdot[3] -= q;  // AR
  wdot[15] += q; // ARp
  // d()/d[E]
  dqdci = +k_f * sc[3];
  J[0] += dqdci;  // dwdot[E]/d[E]
  J[3] -= dqdci;  // dwdot[AR]/d[E]
  J[15] += dqdci; // dwdot[ARp]/d[E]
  // d()/d[AR]
  dqdci = +k_f * sc[0];
  J[51] += dqdci; // dwdot[E]/d[AR]
  J[54] -= dqdci; // dwdot[AR]/d[AR]
  J[66] += dqdci; // dwdot[ARp]/d[AR]
  // d()/dT
  J[272] += dqdT; // dwdot[E]/dT
  J[275] -= dqdT; // dwdot[AR]/dT
  J[287] += dqdT; // dwdot[ARp]/dT

  // reaction 15: E + Op + M => O + M
  // a third-body and non-pressure-fall-off reaction
  // Irreversible reaction in _ajac_reaction may not work
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[0] * sc[12];
  k_f = 3626600000;
  dlnkfdT = 0.0;
  // rate of progress
  q_nocor = k_f * phi_f;
  q = alpha * q_nocor;
  dqdT = alpha * dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] -= q;  // E
  wdot[1] += q;  // O
  wdot[12] -= q; // Op
  // for convenience
  k_f *= alpha;
  dqdc[0] = q_nocor + k_f * sc[12];
  dqdc[1] = q_nocor;
  dqdc[2] = q_nocor;
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor + k_f * sc[0];
  dqdc[13] = q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  for (int k = 0; k < 16; k++) {
    J[17 * k + 0] -= dqdc[k];
    J[17 * k + 1] += dqdc[k];
    J[17 * k + 12] -= dqdc[k];
  }
  J[272] -= dqdT; // dwdot[E]/dT
  J[273] += dqdT; // dwdot[O]/dT
  J[284] -= dqdT; // dwdot[Op]/dT

  // reaction 17: E + O + M => Om + M
  // a third-body and non-pressure-fall-off reaction
  // Irreversible reaction in _ajac_reaction may not work
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[0] * sc[1];
  k_f = 36266;
  dlnkfdT = 0.0;
  // rate of progress
  q_nocor = k_f * phi_f;
  q = alpha * q_nocor;
  dqdT = alpha * dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] -= q;  // E
  wdot[1] -= q;  // O
  wdot[11] += q; // Om
  // for convenience
  k_f *= alpha;
  dqdc[0] = q_nocor + k_f * sc[1];
  dqdc[1] = q_nocor + k_f * sc[0];
  dqdc[2] = q_nocor;
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  for (int k = 0; k < 16; k++) {
    J[17 * k + 0] -= dqdc[k];
    J[17 * k + 1] -= dqdc[k];
    J[17 * k + 11] += dqdc[k];
  }
  J[272] -= dqdT; // dwdot[E]/dT
  J[273] -= dqdT; // dwdot[O]/dT
  J[283] += dqdT; // dwdot[Om]/dT

  // reaction 63: Om + Op + M => O2 + M
  // a third-body and non-pressure-fall-off reaction
  // Irreversible reaction in _ajac_reaction may not work
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[11] * sc[12];
  k_f = 72530000000;
  dlnkfdT = 0.0;
  // rate of progress
  q_nocor = k_f * phi_f;
  q = alpha * q_nocor;
  dqdT = alpha * dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[2] += q;  // O2
  wdot[11] -= q; // Om
  wdot[12] -= q; // Op
  // for convenience
  k_f *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = q_nocor;
  dqdc[2] = q_nocor;
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor + k_f * sc[12];
  dqdc[12] = q_nocor + k_f * sc[11];
  dqdc[13] = q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  for (int k = 0; k < 16; k++) {
    J[17 * k + 2] += dqdc[k];
    J[17 * k + 11] -= dqdc[k];
    J[17 * k + 12] -= dqdc[k];
  }
  J[274] += dqdT; // dwdot[O2]/dT
  J[283] -= dqdT; // dwdot[Om]/dT
  J[284] -= dqdT; // dwdot[Op]/dT

  // reaction 65: CO + O + M => CO2 + M
  // a third-body and non-pressure-fall-off reaction
  // Irreversible reaction in _ajac_reaction may not work
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[1] * sc[5];
  k_f = 0;
  dlnkfdT = 0.0;
  // rate of progress
  q_nocor = k_f * phi_f;
  q = alpha * q_nocor;
  dqdT = alpha * dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[1] -= q; // O
  wdot[4] += q; // CO2
  wdot[5] -= q; // CO
  // for convenience
  k_f *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = q_nocor + k_f * sc[5];
  dqdc[2] = q_nocor;
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = q_nocor + k_f * sc[1];
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  for (int k = 0; k < 16; k++) {
    J[17 * k + 1] -= dqdc[k];
    J[17 * k + 4] += dqdc[k];
    J[17 * k + 5] -= dqdc[k];
  }
  J[273] -= dqdT; // dwdot[O]/dT
  J[276] += dqdT; // dwdot[CO2]/dT
  J[277] -= dqdT; // dwdot[CO]/dT

  // reaction 67: 2 O + M => O2 + M
  // a third-body and non-pressure-fall-off reaction
  // Irreversible reaction in _ajac_reaction may not work
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = (sc[1] * sc[1]);
  k_f = 0;
  dlnkfdT = 0.0;
  // rate of progress
  q_nocor = k_f * phi_f;
  q = alpha * q_nocor;
  dqdT = alpha * dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[1] -= 2 * q; // O
  wdot[2] += q;     // O2
  // for convenience
  k_f *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = q_nocor + k_f * 2.000000 * sc[1];
  dqdc[2] = q_nocor;
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  for (int k = 0; k < 16; k++) {
    J[17 * k + 1] += -2 * dqdc[k];
    J[17 * k + 2] += dqdc[k];
  }
  J[273] += -2 * dqdT; // dwdot[O]/dT
  J[274] += dqdT;      // dwdot[O2]/dT

  // reaction 0: CO2 + E => CO2 + E
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[4];
  k_f = 0;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  // d()/d[E]
  dqdci = +k_f * sc[4];
  // d()/d[CO2]
  dqdci = +k_f * sc[0];
  // d()/dT

  // reaction 1: CO2 + E => CO2v1 + E
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[4];
  k_f = 0;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] -= q; // CO2
  wdot[6] += q; // CO2v1
  // d()/d[E]
  dqdci = +k_f * sc[4];
  J[4] -= dqdci; // dwdot[CO2]/d[E]
  J[6] += dqdci; // dwdot[CO2v1]/d[E]
  // d()/d[CO2]
  dqdci = +k_f * sc[0];
  J[72] -= dqdci; // dwdot[CO2]/d[CO2]
  J[74] += dqdci; // dwdot[CO2v1]/d[CO2]
  // d()/dT
  J[276] -= dqdT; // dwdot[CO2]/dT
  J[278] += dqdT; // dwdot[CO2v1]/dT

  // reaction 2: CO2 + E => CO2v2 + E
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[4];
  k_f = 0;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] -= q; // CO2
  wdot[7] += q; // CO2v2
  // d()/d[E]
  dqdci = +k_f * sc[4];
  J[4] -= dqdci; // dwdot[CO2]/d[E]
  J[7] += dqdci; // dwdot[CO2v2]/d[E]
  // d()/d[CO2]
  dqdci = +k_f * sc[0];
  J[72] -= dqdci; // dwdot[CO2]/d[CO2]
  J[75] += dqdci; // dwdot[CO2v2]/d[CO2]
  // d()/dT
  J[276] -= dqdT; // dwdot[CO2]/dT
  J[279] += dqdT; // dwdot[CO2v2]/dT

  // reaction 3: CO2 + E => CO2v3 + E
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[4];
  k_f = 0;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] -= q; // CO2
  wdot[8] += q; // CO2v3
  // d()/d[E]
  dqdci = +k_f * sc[4];
  J[4] -= dqdci; // dwdot[CO2]/d[E]
  J[8] += dqdci; // dwdot[CO2v3]/d[E]
  // d()/d[CO2]
  dqdci = +k_f * sc[0];
  J[72] -= dqdci; // dwdot[CO2]/d[CO2]
  J[76] += dqdci; // dwdot[CO2v3]/d[CO2]
  // d()/dT
  J[276] -= dqdT; // dwdot[CO2]/dT
  J[280] += dqdT; // dwdot[CO2v3]/dT

  // reaction 4: CO2 + E => CO2v4 + E
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[4];
  k_f = 0;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] -= q; // CO2
  wdot[9] += q; // CO2v4
  // d()/d[E]
  dqdci = +k_f * sc[4];
  J[4] -= dqdci; // dwdot[CO2]/d[E]
  J[9] += dqdci; // dwdot[CO2v4]/d[E]
  // d()/d[CO2]
  dqdci = +k_f * sc[0];
  J[72] -= dqdci; // dwdot[CO2]/d[CO2]
  J[77] += dqdci; // dwdot[CO2v4]/d[CO2]
  // d()/dT
  J[276] -= dqdT; // dwdot[CO2]/dT
  J[281] += dqdT; // dwdot[CO2v4]/dT

  // reaction 7: CO2 + E => CO + 2 E + Op
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[4];
  k_f = 0;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] += q;  // E
  wdot[4] -= q;  // CO2
  wdot[5] += q;  // CO
  wdot[12] += q; // Op
  // d()/d[E]
  dqdci = +k_f * sc[4];
  J[0] += dqdci;  // dwdot[E]/d[E]
  J[4] -= dqdci;  // dwdot[CO2]/d[E]
  J[5] += dqdci;  // dwdot[CO]/d[E]
  J[12] += dqdci; // dwdot[Op]/d[E]
  // d()/d[CO2]
  dqdci = +k_f * sc[0];
  J[68] += dqdci; // dwdot[E]/d[CO2]
  J[72] -= dqdci; // dwdot[CO2]/d[CO2]
  J[73] += dqdci; // dwdot[CO]/d[CO2]
  J[80] += dqdci; // dwdot[Op]/d[CO2]
  // d()/dT
  J[272] += dqdT; // dwdot[E]/dT
  J[276] -= dqdT; // dwdot[CO2]/dT
  J[277] += dqdT; // dwdot[CO]/dT
  J[284] += dqdT; // dwdot[Op]/dT

  // reaction 8: CO2 + E => COp + 2 E + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[4];
  k_f = 0;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] += q;  // E
  wdot[1] += q;  // O
  wdot[4] -= q;  // CO2
  wdot[13] += q; // COp
  // d()/d[E]
  dqdci = +k_f * sc[4];
  J[0] += dqdci;  // dwdot[E]/d[E]
  J[1] += dqdci;  // dwdot[O]/d[E]
  J[4] -= dqdci;  // dwdot[CO2]/d[E]
  J[13] += dqdci; // dwdot[COp]/d[E]
  // d()/d[CO2]
  dqdci = +k_f * sc[0];
  J[68] += dqdci; // dwdot[E]/d[CO2]
  J[69] += dqdci; // dwdot[O]/d[CO2]
  J[72] -= dqdci; // dwdot[CO2]/d[CO2]
  J[81] += dqdci; // dwdot[COp]/d[CO2]
  // d()/dT
  J[272] += dqdT; // dwdot[E]/dT
  J[273] += dqdT; // dwdot[O]/dT
  J[276] -= dqdT; // dwdot[CO2]/dT
  J[285] += dqdT; // dwdot[COp]/dT

  // reaction 9: CO2 + E => CO + Om
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[4];
  k_f = 0;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] -= q;  // E
  wdot[4] -= q;  // CO2
  wdot[5] += q;  // CO
  wdot[11] += q; // Om
  // d()/d[E]
  dqdci = +k_f * sc[4];
  J[0] -= dqdci;  // dwdot[E]/d[E]
  J[4] -= dqdci;  // dwdot[CO2]/d[E]
  J[5] += dqdci;  // dwdot[CO]/d[E]
  J[11] += dqdci; // dwdot[Om]/d[E]
  // d()/d[CO2]
  dqdci = +k_f * sc[0];
  J[68] -= dqdci; // dwdot[E]/d[CO2]
  J[72] -= dqdci; // dwdot[CO2]/d[CO2]
  J[73] += dqdci; // dwdot[CO]/d[CO2]
  J[79] += dqdci; // dwdot[Om]/d[CO2]
  // d()/dT
  J[272] -= dqdT; // dwdot[E]/dT
  J[276] -= dqdT; // dwdot[CO2]/dT
  J[277] += dqdT; // dwdot[CO]/dT
  J[283] += dqdT; // dwdot[Om]/dT

  // reaction 11: AR + E => AR + E
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[3];
  k_f = 0;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  // d()/d[E]
  dqdci = +k_f * sc[3];
  // d()/d[AR]
  dqdci = +k_f * sc[0];
  // d()/dT

  // reaction 12: AR + E => ARe + E
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[3];
  k_f = 0;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[3] -= q;  // AR
  wdot[14] += q; // ARe
  // d()/d[E]
  dqdci = +k_f * sc[3];
  J[3] -= dqdci;  // dwdot[AR]/d[E]
  J[14] += dqdci; // dwdot[ARe]/d[E]
  // d()/d[AR]
  dqdci = +k_f * sc[0];
  J[54] -= dqdci; // dwdot[AR]/d[AR]
  J[65] += dqdci; // dwdot[ARe]/d[AR]
  // d()/dT
  J[275] -= dqdT; // dwdot[AR]/dT
  J[286] += dqdT; // dwdot[ARe]/dT

  // reaction 14: CO2p + E => CO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[10];
  k_f = 0;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] -= q;  // E
  wdot[1] += q;  // O
  wdot[5] += q;  // CO
  wdot[10] -= q; // CO2p
  // d()/d[E]
  dqdci = +k_f * sc[10];
  J[0] -= dqdci;  // dwdot[E]/d[E]
  J[1] += dqdci;  // dwdot[O]/d[E]
  J[5] += dqdci;  // dwdot[CO]/d[E]
  J[10] -= dqdci; // dwdot[CO2p]/d[E]
  // d()/d[CO2p]
  dqdci = +k_f * sc[0];
  J[170] -= dqdci; // dwdot[E]/d[CO2p]
  J[171] += dqdci; // dwdot[O]/d[CO2p]
  J[175] += dqdci; // dwdot[CO]/d[CO2p]
  J[180] -= dqdci; // dwdot[CO2p]/d[CO2p]
  // d()/dT
  J[272] -= dqdT; // dwdot[E]/dT
  J[273] += dqdT; // dwdot[O]/dT
  J[277] += dqdT; // dwdot[CO]/dT
  J[282] -= dqdT; // dwdot[CO2p]/dT

  // reaction 16: COp + E => CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[13];
  k_f = 0;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] -= q;  // E
  wdot[5] += q;  // CO
  wdot[13] -= q; // COp
  // d()/d[E]
  dqdci = +k_f * sc[13];
  J[0] -= dqdci;  // dwdot[E]/d[E]
  J[5] += dqdci;  // dwdot[CO]/d[E]
  J[13] -= dqdci; // dwdot[COp]/d[E]
  // d()/d[COp]
  dqdci = +k_f * sc[0];
  J[221] -= dqdci; // dwdot[E]/d[COp]
  J[226] += dqdci; // dwdot[CO]/d[COp]
  J[234] -= dqdci; // dwdot[COp]/d[COp]
  // d()/dT
  J[272] -= dqdT; // dwdot[E]/dT
  J[277] += dqdT; // dwdot[CO]/dT
  J[285] -= dqdT; // dwdot[COp]/dT

  // reaction 18: ARe + CO2 => AR + CO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[14];
  k_f = 319200000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[1] += q;  // O
  wdot[3] += q;  // AR
  wdot[4] -= q;  // CO2
  wdot[5] += q;  // CO
  wdot[14] -= q; // ARe
  // d()/d[CO2]
  dqdci = +k_f * sc[14];
  J[69] += dqdci; // dwdot[O]/d[CO2]
  J[71] += dqdci; // dwdot[AR]/d[CO2]
  J[72] -= dqdci; // dwdot[CO2]/d[CO2]
  J[73] += dqdci; // dwdot[CO]/d[CO2]
  J[82] -= dqdci; // dwdot[ARe]/d[CO2]
  // d()/d[ARe]
  dqdci = +k_f * sc[4];
  J[239] += dqdci; // dwdot[O]/d[ARe]
  J[241] += dqdci; // dwdot[AR]/d[ARe]
  J[242] -= dqdci; // dwdot[CO2]/d[ARe]
  J[243] += dqdci; // dwdot[CO]/d[ARe]
  J[252] -= dqdci; // dwdot[ARe]/d[ARe]
  // d()/dT
  J[273] += dqdT; // dwdot[O]/dT
  J[275] += dqdT; // dwdot[AR]/dT
  J[276] -= dqdT; // dwdot[CO2]/dT
  J[277] += dqdT; // dwdot[CO]/dT
  J[286] -= dqdT; // dwdot[ARe]/dT

  // reaction 19: ARp + CO2 => AR + CO + Op
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[15];
  k_f = 0;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[3] += q;  // AR
  wdot[4] -= q;  // CO2
  wdot[5] += q;  // CO
  wdot[12] += q; // Op
  wdot[15] -= q; // ARp
  // d()/d[CO2]
  dqdci = +k_f * sc[15];
  J[71] += dqdci; // dwdot[AR]/d[CO2]
  J[72] -= dqdci; // dwdot[CO2]/d[CO2]
  J[73] += dqdci; // dwdot[CO]/d[CO2]
  J[80] += dqdci; // dwdot[Op]/d[CO2]
  J[83] -= dqdci; // dwdot[ARp]/d[CO2]
  // d()/d[ARp]
  dqdci = +k_f * sc[4];
  J[258] += dqdci; // dwdot[AR]/d[ARp]
  J[259] -= dqdci; // dwdot[CO2]/d[ARp]
  J[260] += dqdci; // dwdot[CO]/d[ARp]
  J[267] += dqdci; // dwdot[Op]/d[ARp]
  J[270] -= dqdci; // dwdot[ARp]/d[ARp]
  // d()/dT
  J[275] += dqdT; // dwdot[AR]/dT
  J[276] -= dqdT; // dwdot[CO2]/dT
  J[277] += dqdT; // dwdot[CO]/dT
  J[284] += dqdT; // dwdot[Op]/dT
  J[287] -= dqdT; // dwdot[ARp]/dT

  // reaction 20: ARp + CO2 => AR + COp + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[15];
  k_f = 0;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[1] += q;  // O
  wdot[3] += q;  // AR
  wdot[4] -= q;  // CO2
  wdot[13] += q; // COp
  wdot[15] -= q; // ARp
  // d()/d[CO2]
  dqdci = +k_f * sc[15];
  J[69] += dqdci; // dwdot[O]/d[CO2]
  J[71] += dqdci; // dwdot[AR]/d[CO2]
  J[72] -= dqdci; // dwdot[CO2]/d[CO2]
  J[81] += dqdci; // dwdot[COp]/d[CO2]
  J[83] -= dqdci; // dwdot[ARp]/d[CO2]
  // d()/d[ARp]
  dqdci = +k_f * sc[4];
  J[256] += dqdci; // dwdot[O]/d[ARp]
  J[258] += dqdci; // dwdot[AR]/d[ARp]
  J[259] -= dqdci; // dwdot[CO2]/d[ARp]
  J[268] += dqdci; // dwdot[COp]/d[ARp]
  J[270] -= dqdci; // dwdot[ARp]/d[ARp]
  // d()/dT
  J[273] += dqdT; // dwdot[O]/dT
  J[275] += dqdT; // dwdot[AR]/dT
  J[276] -= dqdT; // dwdot[CO2]/dT
  J[285] += dqdT; // dwdot[COp]/dT
  J[287] -= dqdT; // dwdot[ARp]/dT

  // reaction 21: ARp + CO2 => AR + CO2p
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[15];
  k_f = 30110000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[3] += q;  // AR
  wdot[4] -= q;  // CO2
  wdot[10] += q; // CO2p
  wdot[15] -= q; // ARp
  // d()/d[CO2]
  dqdci = +k_f * sc[15];
  J[71] += dqdci; // dwdot[AR]/d[CO2]
  J[72] -= dqdci; // dwdot[CO2]/d[CO2]
  J[78] += dqdci; // dwdot[CO2p]/d[CO2]
  J[83] -= dqdci; // dwdot[ARp]/d[CO2]
  // d()/d[ARp]
  dqdci = +k_f * sc[4];
  J[258] += dqdci; // dwdot[AR]/d[ARp]
  J[259] -= dqdci; // dwdot[CO2]/d[ARp]
  J[265] += dqdci; // dwdot[CO2p]/d[ARp]
  J[270] -= dqdci; // dwdot[ARp]/d[ARp]
  // d()/dT
  J[275] += dqdT; // dwdot[AR]/dT
  J[276] -= dqdT; // dwdot[CO2]/dT
  J[282] += dqdT; // dwdot[CO2p]/dT
  J[287] -= dqdT; // dwdot[ARp]/dT

  // reaction 22: CO2 + CO2v1 => 2 CO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[6];
  k_f = 6444;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] += q; // CO2
  wdot[6] -= q; // CO2v1
  // d()/d[CO2]
  dqdci = +k_f * sc[6];
  J[72] += dqdci; // dwdot[CO2]/d[CO2]
  J[74] -= dqdci; // dwdot[CO2v1]/d[CO2]
  // d()/d[CO2v1]
  dqdci = +k_f * sc[4];
  J[106] += dqdci; // dwdot[CO2]/d[CO2v1]
  J[108] -= dqdci; // dwdot[CO2v1]/d[CO2v1]
  // d()/dT
  J[276] += dqdT; // dwdot[CO2]/dT
  J[278] -= dqdT; // dwdot[CO2v1]/dT

  // reaction 23: CO + CO2v1 => CO + CO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[6];
  k_f = 4505;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] += q; // CO2
  wdot[6] -= q; // CO2v1
  // d()/d[CO]
  dqdci = +k_f * sc[6];
  J[89] += dqdci; // dwdot[CO2]/d[CO]
  J[91] -= dqdci; // dwdot[CO2v1]/d[CO]
  // d()/d[CO2v1]
  dqdci = +k_f * sc[5];
  J[106] += dqdci; // dwdot[CO2]/d[CO2v1]
  J[108] -= dqdci; // dwdot[CO2v1]/d[CO2v1]
  // d()/dT
  J[276] += dqdT; // dwdot[CO2]/dT
  J[278] -= dqdT; // dwdot[CO2v1]/dT

  // reaction 24: CO2v1 + O2 => CO2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[6];
  k_f = 4505;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] += q; // CO2
  wdot[6] -= q; // CO2v1
  // d()/d[O2]
  dqdci = +k_f * sc[6];
  J[38] += dqdci; // dwdot[CO2]/d[O2]
  J[40] -= dqdci; // dwdot[CO2v1]/d[O2]
  // d()/d[CO2v1]
  dqdci = +k_f * sc[2];
  J[106] += dqdci; // dwdot[CO2]/d[CO2v1]
  J[108] -= dqdci; // dwdot[CO2v1]/d[CO2v1]
  // d()/dT
  J[276] += dqdT; // dwdot[CO2]/dT
  J[278] -= dqdT; // dwdot[CO2v1]/dT

  // reaction 25: AR + CO2v1 => AR + CO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[6];
  k_f = 4505;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] += q; // CO2
  wdot[6] -= q; // CO2v1
  // d()/d[AR]
  dqdci = +k_f * sc[6];
  J[55] += dqdci; // dwdot[CO2]/d[AR]
  J[57] -= dqdci; // dwdot[CO2v1]/d[AR]
  // d()/d[CO2v1]
  dqdci = +k_f * sc[3];
  J[106] += dqdci; // dwdot[CO2]/d[CO2v1]
  J[108] -= dqdci; // dwdot[CO2v1]/d[CO2v1]
  // d()/dT
  J[276] += dqdT; // dwdot[CO2]/dT
  J[278] -= dqdT; // dwdot[CO2v1]/dT

  // reaction 26: CO2 + CO2v2 => 2 CO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[7];
  k_f = 5.42;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] += q; // CO2
  wdot[7] -= q; // CO2v2
  // d()/d[CO2]
  dqdci = +k_f * sc[7];
  J[72] += dqdci; // dwdot[CO2]/d[CO2]
  J[75] -= dqdci; // dwdot[CO2v2]/d[CO2]
  // d()/d[CO2v2]
  dqdci = +k_f * sc[4];
  J[123] += dqdci; // dwdot[CO2]/d[CO2v2]
  J[126] -= dqdci; // dwdot[CO2v2]/d[CO2v2]
  // d()/dT
  J[276] += dqdT; // dwdot[CO2]/dT
  J[279] -= dqdT; // dwdot[CO2v2]/dT

  // reaction 27: CO + CO2v2 => CO + CO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[7];
  k_f = 16.8;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] += q; // CO2
  wdot[7] -= q; // CO2v2
  // d()/d[CO]
  dqdci = +k_f * sc[7];
  J[89] += dqdci; // dwdot[CO2]/d[CO]
  J[92] -= dqdci; // dwdot[CO2v2]/d[CO]
  // d()/d[CO2v2]
  dqdci = +k_f * sc[5];
  J[123] += dqdci; // dwdot[CO2]/d[CO2v2]
  J[126] -= dqdci; // dwdot[CO2v2]/d[CO2v2]
  // d()/dT
  J[276] += dqdT; // dwdot[CO2]/dT
  J[279] -= dqdT; // dwdot[CO2v2]/dT

  // reaction 28: CO2v2 + O2 => CO2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[7];
  k_f = 16.8;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] += q; // CO2
  wdot[7] -= q; // CO2v2
  // d()/d[O2]
  dqdci = +k_f * sc[7];
  J[38] += dqdci; // dwdot[CO2]/d[O2]
  J[41] -= dqdci; // dwdot[CO2v2]/d[O2]
  // d()/d[CO2v2]
  dqdci = +k_f * sc[2];
  J[123] += dqdci; // dwdot[CO2]/d[CO2v2]
  J[126] -= dqdci; // dwdot[CO2v2]/d[CO2v2]
  // d()/dT
  J[276] += dqdT; // dwdot[CO2]/dT
  J[279] -= dqdT; // dwdot[CO2v2]/dT

  // reaction 29: AR + CO2v2 => AR + CO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[7];
  k_f = 16.8;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] += q; // CO2
  wdot[7] -= q; // CO2v2
  // d()/d[AR]
  dqdci = +k_f * sc[7];
  J[55] += dqdci; // dwdot[CO2]/d[AR]
  J[58] -= dqdci; // dwdot[CO2v2]/d[AR]
  // d()/d[CO2v2]
  dqdci = +k_f * sc[3];
  J[123] += dqdci; // dwdot[CO2]/d[CO2v2]
  J[126] -= dqdci; // dwdot[CO2v2]/d[CO2v2]
  // d()/dT
  J[276] += dqdT; // dwdot[CO2]/dT
  J[279] -= dqdT; // dwdot[CO2v2]/dT

  // reaction 30: CO2 + CO2v2 => CO2 + CO2v1
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[7];
  k_f = 17460;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[6] += q; // CO2v1
  wdot[7] -= q; // CO2v2
  // d()/d[CO2]
  dqdci = +k_f * sc[7];
  J[74] += dqdci; // dwdot[CO2v1]/d[CO2]
  J[75] -= dqdci; // dwdot[CO2v2]/d[CO2]
  // d()/d[CO2v2]
  dqdci = +k_f * sc[4];
  J[125] += dqdci; // dwdot[CO2v1]/d[CO2v2]
  J[126] -= dqdci; // dwdot[CO2v2]/d[CO2v2]
  // d()/dT
  J[278] += dqdT; // dwdot[CO2v1]/dT
  J[279] -= dqdT; // dwdot[CO2v2]/dT

  // reaction 31: CO + CO2v2 => CO + CO2v1
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[7];
  k_f = 12220;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[6] += q; // CO2v1
  wdot[7] -= q; // CO2v2
  // d()/d[CO]
  dqdci = +k_f * sc[7];
  J[91] += dqdci; // dwdot[CO2v1]/d[CO]
  J[92] -= dqdci; // dwdot[CO2v2]/d[CO]
  // d()/d[CO2v2]
  dqdci = +k_f * sc[5];
  J[125] += dqdci; // dwdot[CO2v1]/d[CO2v2]
  J[126] -= dqdci; // dwdot[CO2v2]/d[CO2v2]
  // d()/dT
  J[278] += dqdT; // dwdot[CO2v1]/dT
  J[279] -= dqdT; // dwdot[CO2v2]/dT

  // reaction 32: CO2v2 + O2 => CO2v1 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[7];
  k_f = 12220;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[6] += q; // CO2v1
  wdot[7] -= q; // CO2v2
  // d()/d[O2]
  dqdci = +k_f * sc[7];
  J[40] += dqdci; // dwdot[CO2v1]/d[O2]
  J[41] -= dqdci; // dwdot[CO2v2]/d[O2]
  // d()/d[CO2v2]
  dqdci = +k_f * sc[2];
  J[125] += dqdci; // dwdot[CO2v1]/d[CO2v2]
  J[126] -= dqdci; // dwdot[CO2v2]/d[CO2v2]
  // d()/dT
  J[278] += dqdT; // dwdot[CO2v1]/dT
  J[279] -= dqdT; // dwdot[CO2v2]/dT

  // reaction 33: AR + CO2v2 => AR + CO2v1
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[7];
  k_f = 12220;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[6] += q; // CO2v1
  wdot[7] -= q; // CO2v2
  // d()/d[AR]
  dqdci = +k_f * sc[7];
  J[57] += dqdci; // dwdot[CO2v1]/d[AR]
  J[58] -= dqdci; // dwdot[CO2v2]/d[AR]
  // d()/d[CO2v2]
  dqdci = +k_f * sc[3];
  J[125] += dqdci; // dwdot[CO2v1]/d[CO2v2]
  J[126] -= dqdci; // dwdot[CO2v2]/d[CO2v2]
  // d()/dT
  J[278] += dqdT; // dwdot[CO2v1]/dT
  J[279] -= dqdT; // dwdot[CO2v2]/dT

  // reaction 34: CO2 + CO2v3 => CO2 + CO2v2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[8];
  k_f = 464.9;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[7] += q; // CO2v2
  wdot[8] -= q; // CO2v3
  // d()/d[CO2]
  dqdci = +k_f * sc[8];
  J[75] += dqdci; // dwdot[CO2v2]/d[CO2]
  J[76] -= dqdci; // dwdot[CO2v3]/d[CO2]
  // d()/d[CO2v3]
  dqdci = +k_f * sc[4];
  J[143] += dqdci; // dwdot[CO2v2]/d[CO2v3]
  J[144] -= dqdci; // dwdot[CO2v3]/d[CO2v3]
  // d()/dT
  J[279] += dqdT; // dwdot[CO2v2]/dT
  J[280] -= dqdT; // dwdot[CO2v3]/dT

  // reaction 35: CO + CO2v3 => CO + CO2v2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[8];
  k_f = 13.97;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[7] += q; // CO2v2
  wdot[8] -= q; // CO2v3
  // d()/d[CO]
  dqdci = +k_f * sc[8];
  J[92] += dqdci; // dwdot[CO2v2]/d[CO]
  J[93] -= dqdci; // dwdot[CO2v3]/d[CO]
  // d()/d[CO2v3]
  dqdci = +k_f * sc[5];
  J[143] += dqdci; // dwdot[CO2v2]/d[CO2v3]
  J[144] -= dqdci; // dwdot[CO2v3]/d[CO2v3]
  // d()/dT
  J[279] += dqdT; // dwdot[CO2v2]/dT
  J[280] -= dqdT; // dwdot[CO2v3]/dT

  // reaction 36: CO2v3 + O2 => CO2v2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[8];
  k_f = 186.1;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[7] += q; // CO2v2
  wdot[8] -= q; // CO2v3
  // d()/d[O2]
  dqdci = +k_f * sc[8];
  J[41] += dqdci; // dwdot[CO2v2]/d[O2]
  J[42] -= dqdci; // dwdot[CO2v3]/d[O2]
  // d()/d[CO2v3]
  dqdci = +k_f * sc[2];
  J[143] += dqdci; // dwdot[CO2v2]/d[CO2v3]
  J[144] -= dqdci; // dwdot[CO2v3]/d[CO2v3]
  // d()/dT
  J[279] += dqdT; // dwdot[CO2v2]/dT
  J[280] -= dqdT; // dwdot[CO2v3]/dT

  // reaction 37: AR + CO2v3 => AR + CO2v2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[8];
  k_f = 186.1;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[7] += q; // CO2v2
  wdot[8] -= q; // CO2v3
  // d()/d[AR]
  dqdci = +k_f * sc[8];
  J[58] += dqdci; // dwdot[CO2v2]/d[AR]
  J[59] -= dqdci; // dwdot[CO2v3]/d[AR]
  // d()/d[CO2v3]
  dqdci = +k_f * sc[3];
  J[143] += dqdci; // dwdot[CO2v2]/d[CO2v3]
  J[144] -= dqdci; // dwdot[CO2v3]/d[CO2v3]
  // d()/dT
  J[279] += dqdT; // dwdot[CO2v2]/dT
  J[280] -= dqdT; // dwdot[CO2v3]/dT

  // reaction 38: CO2 + CO2v3 => CO2 + CO2v4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[8];
  k_f = 3643;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[8] -= q; // CO2v3
  wdot[9] += q; // CO2v4
  // d()/d[CO2]
  dqdci = +k_f * sc[8];
  J[76] -= dqdci; // dwdot[CO2v3]/d[CO2]
  J[77] += dqdci; // dwdot[CO2v4]/d[CO2]
  // d()/d[CO2v3]
  dqdci = +k_f * sc[4];
  J[144] -= dqdci; // dwdot[CO2v3]/d[CO2v3]
  J[145] += dqdci; // dwdot[CO2v4]/d[CO2v3]
  // d()/dT
  J[280] -= dqdT; // dwdot[CO2v3]/dT
  J[281] += dqdT; // dwdot[CO2v4]/dT

  // reaction 39: CO + CO2v3 => CO + CO2v4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[8];
  k_f = 1090;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[8] -= q; // CO2v3
  wdot[9] += q; // CO2v4
  // d()/d[CO]
  dqdci = +k_f * sc[8];
  J[93] -= dqdci; // dwdot[CO2v3]/d[CO]
  J[94] += dqdci; // dwdot[CO2v4]/d[CO]
  // d()/d[CO2v3]
  dqdci = +k_f * sc[5];
  J[144] -= dqdci; // dwdot[CO2v3]/d[CO2v3]
  J[145] += dqdci; // dwdot[CO2v4]/d[CO2v3]
  // d()/dT
  J[280] -= dqdT; // dwdot[CO2v3]/dT
  J[281] += dqdT; // dwdot[CO2v4]/dT

  // reaction 40: CO2v3 + O2 => CO2v4 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[8];
  k_f = 1457;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[8] -= q; // CO2v3
  wdot[9] += q; // CO2v4
  // d()/d[O2]
  dqdci = +k_f * sc[8];
  J[42] -= dqdci; // dwdot[CO2v3]/d[O2]
  J[43] += dqdci; // dwdot[CO2v4]/d[O2]
  // d()/d[CO2v3]
  dqdci = +k_f * sc[2];
  J[144] -= dqdci; // dwdot[CO2v3]/d[CO2v3]
  J[145] += dqdci; // dwdot[CO2v4]/d[CO2v3]
  // d()/dT
  J[280] -= dqdT; // dwdot[CO2v3]/dT
  J[281] += dqdT; // dwdot[CO2v4]/dT

  // reaction 41: AR + CO2v3 => AR + CO2v4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[8];
  k_f = 1457;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[8] -= q; // CO2v3
  wdot[9] += q; // CO2v4
  // d()/d[AR]
  dqdci = +k_f * sc[8];
  J[59] -= dqdci; // dwdot[CO2v3]/d[AR]
  J[60] += dqdci; // dwdot[CO2v4]/d[AR]
  // d()/d[CO2v3]
  dqdci = +k_f * sc[3];
  J[144] -= dqdci; // dwdot[CO2v3]/d[CO2v3]
  J[145] += dqdci; // dwdot[CO2v4]/d[CO2v3]
  // d()/dT
  J[280] -= dqdT; // dwdot[CO2v3]/dT
  J[281] += dqdT; // dwdot[CO2v4]/dT

  // reaction 42: CO2 + CO2v3 => CO2v1 + CO2v2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[8];
  k_f = 1457;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] -= q; // CO2
  wdot[6] += q; // CO2v1
  wdot[7] += q; // CO2v2
  wdot[8] -= q; // CO2v3
  // d()/d[CO2]
  dqdci = +k_f * sc[8];
  J[72] -= dqdci; // dwdot[CO2]/d[CO2]
  J[74] += dqdci; // dwdot[CO2v1]/d[CO2]
  J[75] += dqdci; // dwdot[CO2v2]/d[CO2]
  J[76] -= dqdci; // dwdot[CO2v3]/d[CO2]
  // d()/d[CO2v3]
  dqdci = +k_f * sc[4];
  J[140] -= dqdci; // dwdot[CO2]/d[CO2v3]
  J[142] += dqdci; // dwdot[CO2v1]/d[CO2v3]
  J[143] += dqdci; // dwdot[CO2v2]/d[CO2v3]
  J[144] -= dqdci; // dwdot[CO2v3]/d[CO2v3]
  // d()/dT
  J[276] -= dqdT; // dwdot[CO2]/dT
  J[278] += dqdT; // dwdot[CO2v1]/dT
  J[279] += dqdT; // dwdot[CO2v2]/dT
  J[280] -= dqdT; // dwdot[CO2v3]/dT

  // reaction 43: CO2 + CO2v3 => CO2 + CO2v1
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[8];
  k_f = 1.024;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[6] += q; // CO2v1
  wdot[8] -= q; // CO2v3
  // d()/d[CO2]
  dqdci = +k_f * sc[8];
  J[74] += dqdci; // dwdot[CO2v1]/d[CO2]
  J[76] -= dqdci; // dwdot[CO2v3]/d[CO2]
  // d()/d[CO2v3]
  dqdci = +k_f * sc[4];
  J[142] += dqdci; // dwdot[CO2v1]/d[CO2v3]
  J[144] -= dqdci; // dwdot[CO2v3]/d[CO2v3]
  // d()/dT
  J[278] += dqdT; // dwdot[CO2v1]/dT
  J[280] -= dqdT; // dwdot[CO2v3]/dT

  // reaction 44: CO + CO2v3 => CO + CO2v1
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[8];
  k_f = 0.3071;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[6] += q; // CO2v1
  wdot[8] -= q; // CO2v3
  // d()/d[CO]
  dqdci = +k_f * sc[8];
  J[91] += dqdci; // dwdot[CO2v1]/d[CO]
  J[93] -= dqdci; // dwdot[CO2v3]/d[CO]
  // d()/d[CO2v3]
  dqdci = +k_f * sc[5];
  J[142] += dqdci; // dwdot[CO2v1]/d[CO2v3]
  J[144] -= dqdci; // dwdot[CO2v3]/d[CO2v3]
  // d()/dT
  J[278] += dqdT; // dwdot[CO2v1]/dT
  J[280] -= dqdT; // dwdot[CO2v3]/dT

  // reaction 45: CO2v3 + O2 => CO2v1 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[8];
  k_f = 0.4095;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[6] += q; // CO2v1
  wdot[8] -= q; // CO2v3
  // d()/d[O2]
  dqdci = +k_f * sc[8];
  J[40] += dqdci; // dwdot[CO2v1]/d[O2]
  J[42] -= dqdci; // dwdot[CO2v3]/d[O2]
  // d()/d[CO2v3]
  dqdci = +k_f * sc[2];
  J[142] += dqdci; // dwdot[CO2v1]/d[CO2v3]
  J[144] -= dqdci; // dwdot[CO2v3]/d[CO2v3]
  // d()/dT
  J[278] += dqdT; // dwdot[CO2v1]/dT
  J[280] -= dqdT; // dwdot[CO2v3]/dT

  // reaction 46: AR + CO2v3 => AR + CO2v1
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[8];
  k_f = 0.4095;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[6] += q; // CO2v1
  wdot[8] -= q; // CO2v3
  // d()/d[AR]
  dqdci = +k_f * sc[8];
  J[57] += dqdci; // dwdot[CO2v1]/d[AR]
  J[59] -= dqdci; // dwdot[CO2v3]/d[AR]
  // d()/d[CO2v3]
  dqdci = +k_f * sc[3];
  J[142] += dqdci; // dwdot[CO2v1]/d[CO2v3]
  J[144] -= dqdci; // dwdot[CO2v3]/d[CO2v3]
  // d()/dT
  J[278] += dqdT; // dwdot[CO2v1]/dT
  J[280] -= dqdT; // dwdot[CO2v3]/dT

  // reaction 47: CO2 + CO2v4 => CO2 + CO2v2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[9];
  k_f = 26080;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[7] += q; // CO2v2
  wdot[9] -= q; // CO2v4
  // d()/d[CO2]
  dqdci = +k_f * sc[9];
  J[75] += dqdci; // dwdot[CO2v2]/d[CO2]
  J[77] -= dqdci; // dwdot[CO2v4]/d[CO2]
  // d()/d[CO2v4]
  dqdci = +k_f * sc[4];
  J[160] += dqdci; // dwdot[CO2v2]/d[CO2v4]
  J[162] -= dqdci; // dwdot[CO2v4]/d[CO2v4]
  // d()/dT
  J[279] += dqdT; // dwdot[CO2v2]/dT
  J[281] -= dqdT; // dwdot[CO2v4]/dT

  // reaction 48: CO + CO2v4 => CO + CO2v2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[9];
  k_f = 18250;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[7] += q; // CO2v2
  wdot[9] -= q; // CO2v4
  // d()/d[CO]
  dqdci = +k_f * sc[9];
  J[92] += dqdci; // dwdot[CO2v2]/d[CO]
  J[94] -= dqdci; // dwdot[CO2v4]/d[CO]
  // d()/d[CO2v4]
  dqdci = +k_f * sc[5];
  J[160] += dqdci; // dwdot[CO2v2]/d[CO2v4]
  J[162] -= dqdci; // dwdot[CO2v4]/d[CO2v4]
  // d()/dT
  J[279] += dqdT; // dwdot[CO2v2]/dT
  J[281] -= dqdT; // dwdot[CO2v4]/dT

  // reaction 49: CO2v4 + O2 => CO2v2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[9];
  k_f = 18250;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[7] += q; // CO2v2
  wdot[9] -= q; // CO2v4
  // d()/d[O2]
  dqdci = +k_f * sc[9];
  J[41] += dqdci; // dwdot[CO2v2]/d[O2]
  J[43] -= dqdci; // dwdot[CO2v4]/d[O2]
  // d()/d[CO2v4]
  dqdci = +k_f * sc[2];
  J[160] += dqdci; // dwdot[CO2v2]/d[CO2v4]
  J[162] -= dqdci; // dwdot[CO2v4]/d[CO2v4]
  // d()/dT
  J[279] += dqdT; // dwdot[CO2v2]/dT
  J[281] -= dqdT; // dwdot[CO2v4]/dT

  // reaction 50: AR + CO2v4 => AR + CO2v2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[9];
  k_f = 18250;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[7] += q; // CO2v2
  wdot[9] -= q; // CO2v4
  // d()/d[AR]
  dqdci = +k_f * sc[9];
  J[58] += dqdci; // dwdot[CO2v2]/d[AR]
  J[60] -= dqdci; // dwdot[CO2v4]/d[AR]
  // d()/d[CO2v4]
  dqdci = +k_f * sc[3];
  J[160] += dqdci; // dwdot[CO2v2]/d[CO2v4]
  J[162] -= dqdci; // dwdot[CO2v4]/d[CO2v4]
  // d()/dT
  J[279] += dqdT; // dwdot[CO2v2]/dT
  J[281] -= dqdT; // dwdot[CO2v4]/dT

  // reaction 51: CO2 + CO2v4 => CO2 + CO2v1
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[9];
  k_f = 5.468;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[6] += q; // CO2v1
  wdot[9] -= q; // CO2v4
  // d()/d[CO2]
  dqdci = +k_f * sc[9];
  J[74] += dqdci; // dwdot[CO2v1]/d[CO2]
  J[77] -= dqdci; // dwdot[CO2v4]/d[CO2]
  // d()/d[CO2v4]
  dqdci = +k_f * sc[4];
  J[159] += dqdci; // dwdot[CO2v1]/d[CO2v4]
  J[162] -= dqdci; // dwdot[CO2v4]/d[CO2v4]
  // d()/dT
  J[278] += dqdT; // dwdot[CO2v1]/dT
  J[281] -= dqdT; // dwdot[CO2v4]/dT

  // reaction 52: CO + CO2v4 => CO + CO2v1
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[9];
  k_f = 3722;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[6] += q; // CO2v1
  wdot[9] -= q; // CO2v4
  // d()/d[CO]
  dqdci = +k_f * sc[9];
  J[91] += dqdci; // dwdot[CO2v1]/d[CO]
  J[94] -= dqdci; // dwdot[CO2v4]/d[CO]
  // d()/d[CO2v4]
  dqdci = +k_f * sc[5];
  J[159] += dqdci; // dwdot[CO2v1]/d[CO2v4]
  J[162] -= dqdci; // dwdot[CO2v4]/d[CO2v4]
  // d()/dT
  J[278] += dqdT; // dwdot[CO2v1]/dT
  J[281] -= dqdT; // dwdot[CO2v4]/dT

  // reaction 53: CO2v4 + O2 => CO2v1 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[9];
  k_f = 3722;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[6] += q; // CO2v1
  wdot[9] -= q; // CO2v4
  // d()/d[O2]
  dqdci = +k_f * sc[9];
  J[40] += dqdci; // dwdot[CO2v1]/d[O2]
  J[43] -= dqdci; // dwdot[CO2v4]/d[O2]
  // d()/d[CO2v4]
  dqdci = +k_f * sc[2];
  J[159] += dqdci; // dwdot[CO2v1]/d[CO2v4]
  J[162] -= dqdci; // dwdot[CO2v4]/d[CO2v4]
  // d()/dT
  J[278] += dqdT; // dwdot[CO2v1]/dT
  J[281] -= dqdT; // dwdot[CO2v4]/dT

  // reaction 54: AR + CO2v4 => AR + CO2v1
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[9];
  k_f = 3722;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[6] += q; // CO2v1
  wdot[9] -= q; // CO2v4
  // d()/d[AR]
  dqdci = +k_f * sc[9];
  J[57] += dqdci; // dwdot[CO2v1]/d[AR]
  J[60] -= dqdci; // dwdot[CO2v4]/d[AR]
  // d()/d[CO2v4]
  dqdci = +k_f * sc[3];
  J[159] += dqdci; // dwdot[CO2v1]/d[CO2v4]
  J[162] -= dqdci; // dwdot[CO2v4]/d[CO2v4]
  // d()/dT
  J[278] += dqdT; // dwdot[CO2v1]/dT
  J[281] -= dqdT; // dwdot[CO2v4]/dT

  // reaction 55: CO2 + Op => CO2p + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[12];
  k_f = 271000000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[1] += q;  // O
  wdot[4] -= q;  // CO2
  wdot[10] += q; // CO2p
  wdot[12] -= q; // Op
  // d()/d[CO2]
  dqdci = +k_f * sc[12];
  J[69] += dqdci; // dwdot[O]/d[CO2]
  J[72] -= dqdci; // dwdot[CO2]/d[CO2]
  J[78] += dqdci; // dwdot[CO2p]/d[CO2]
  J[80] -= dqdci; // dwdot[Op]/d[CO2]
  // d()/d[Op]
  dqdci = +k_f * sc[4];
  J[205] += dqdci; // dwdot[O]/d[Op]
  J[208] -= dqdci; // dwdot[CO2]/d[Op]
  J[214] += dqdci; // dwdot[CO2p]/d[Op]
  J[216] -= dqdci; // dwdot[Op]/d[Op]
  // d()/dT
  J[273] += dqdT; // dwdot[O]/dT
  J[276] -= dqdT; // dwdot[CO2]/dT
  J[282] += dqdT; // dwdot[CO2p]/dT
  J[284] -= dqdT; // dwdot[Op]/dT

  // reaction 56: CO2 + COp => CO + CO2p
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[13];
  k_f = 602200000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] -= q;  // CO2
  wdot[5] += q;  // CO
  wdot[10] += q; // CO2p
  wdot[13] -= q; // COp
  // d()/d[CO2]
  dqdci = +k_f * sc[13];
  J[72] -= dqdci; // dwdot[CO2]/d[CO2]
  J[73] += dqdci; // dwdot[CO]/d[CO2]
  J[78] += dqdci; // dwdot[CO2p]/d[CO2]
  J[81] -= dqdci; // dwdot[COp]/d[CO2]
  // d()/d[COp]
  dqdci = +k_f * sc[4];
  J[225] -= dqdci; // dwdot[CO2]/d[COp]
  J[226] += dqdci; // dwdot[CO]/d[COp]
  J[231] += dqdci; // dwdot[CO2p]/d[COp]
  J[234] -= dqdci; // dwdot[COp]/d[COp]
  // d()/dT
  J[276] -= dqdT; // dwdot[CO2]/dT
  J[277] += dqdT; // dwdot[CO]/dT
  J[282] += dqdT; // dwdot[CO2p]/dT
  J[285] -= dqdT; // dwdot[COp]/dT

  // reaction 57: CO + Op => COp + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[12];
  k_f = 0;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[1] += q;  // O
  wdot[5] -= q;  // CO
  wdot[12] -= q; // Op
  wdot[13] += q; // COp
  // d()/d[CO]
  dqdci = +k_f * sc[12];
  J[86] += dqdci; // dwdot[O]/d[CO]
  J[90] -= dqdci; // dwdot[CO]/d[CO]
  J[97] -= dqdci; // dwdot[Op]/d[CO]
  J[98] += dqdci; // dwdot[COp]/d[CO]
  // d()/d[Op]
  dqdci = +k_f * sc[5];
  J[205] += dqdci; // dwdot[O]/d[Op]
  J[209] -= dqdci; // dwdot[CO]/d[Op]
  J[216] -= dqdci; // dwdot[Op]/d[Op]
  J[217] += dqdci; // dwdot[COp]/d[Op]
  // d()/dT
  J[273] += dqdT; // dwdot[O]/dT
  J[277] -= dqdT; // dwdot[CO]/dT
  J[284] -= dqdT; // dwdot[Op]/dT
  J[285] += dqdT; // dwdot[COp]/dT

  // reaction 58: CO2p + O => CO2 + Op
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[10];
  k_f = 57930000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[1] -= q;  // O
  wdot[4] += q;  // CO2
  wdot[10] -= q; // CO2p
  wdot[12] += q; // Op
  // d()/d[O]
  dqdci = +k_f * sc[10];
  J[18] -= dqdci; // dwdot[O]/d[O]
  J[21] += dqdci; // dwdot[CO2]/d[O]
  J[27] -= dqdci; // dwdot[CO2p]/d[O]
  J[29] += dqdci; // dwdot[Op]/d[O]
  // d()/d[CO2p]
  dqdci = +k_f * sc[1];
  J[171] -= dqdci; // dwdot[O]/d[CO2p]
  J[174] += dqdci; // dwdot[CO2]/d[CO2p]
  J[180] -= dqdci; // dwdot[CO2p]/d[CO2p]
  J[182] += dqdci; // dwdot[Op]/d[CO2p]
  // d()/dT
  J[273] -= dqdT; // dwdot[O]/dT
  J[276] += dqdT; // dwdot[CO2]/dT
  J[282] -= dqdT; // dwdot[CO2p]/dT
  J[284] += dqdT; // dwdot[Op]/dT

  // reaction 59: CO + Om => CO2 + E
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[11];
  k_f = 331200000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] += q;  // E
  wdot[4] += q;  // CO2
  wdot[5] -= q;  // CO
  wdot[11] -= q; // Om
  // d()/d[CO]
  dqdci = +k_f * sc[11];
  J[85] += dqdci; // dwdot[E]/d[CO]
  J[89] += dqdci; // dwdot[CO2]/d[CO]
  J[90] -= dqdci; // dwdot[CO]/d[CO]
  J[96] -= dqdci; // dwdot[Om]/d[CO]
  // d()/d[Om]
  dqdci = +k_f * sc[5];
  J[187] += dqdci; // dwdot[E]/d[Om]
  J[191] += dqdci; // dwdot[CO2]/d[Om]
  J[192] -= dqdci; // dwdot[CO]/d[Om]
  J[198] -= dqdci; // dwdot[Om]/d[Om]
  // d()/dT
  J[272] += dqdT; // dwdot[E]/dT
  J[276] += dqdT; // dwdot[CO2]/dT
  J[277] -= dqdT; // dwdot[CO]/dT
  J[283] -= dqdT; // dwdot[Om]/dT

  // reaction 60: COp + O => CO + Op
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[13];
  k_f = 84310000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[1] -= q;  // O
  wdot[5] += q;  // CO
  wdot[12] += q; // Op
  wdot[13] -= q; // COp
  // d()/d[O]
  dqdci = +k_f * sc[13];
  J[18] -= dqdci; // dwdot[O]/d[O]
  J[22] += dqdci; // dwdot[CO]/d[O]
  J[29] += dqdci; // dwdot[Op]/d[O]
  J[30] -= dqdci; // dwdot[COp]/d[O]
  // d()/d[COp]
  dqdci = +k_f * sc[1];
  J[222] -= dqdci; // dwdot[O]/d[COp]
  J[226] += dqdci; // dwdot[CO]/d[COp]
  J[233] += dqdci; // dwdot[Op]/d[COp]
  J[234] -= dqdci; // dwdot[COp]/d[COp]
  // d()/dT
  J[273] -= dqdT; // dwdot[O]/dT
  J[277] += dqdT; // dwdot[CO]/dT
  J[284] += dqdT; // dwdot[Op]/dT
  J[285] -= dqdT; // dwdot[COp]/dT

  // reaction 61: O + Om => E + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[11];
  k_f = 138500000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] += q;  // E
  wdot[1] -= q;  // O
  wdot[2] += q;  // O2
  wdot[11] -= q; // Om
  // d()/d[O]
  dqdci = +k_f * sc[11];
  J[17] += dqdci; // dwdot[E]/d[O]
  J[18] -= dqdci; // dwdot[O]/d[O]
  J[19] += dqdci; // dwdot[O2]/d[O]
  J[28] -= dqdci; // dwdot[Om]/d[O]
  // d()/d[Om]
  dqdci = +k_f * sc[1];
  J[187] += dqdci; // dwdot[E]/d[Om]
  J[188] -= dqdci; // dwdot[O]/d[Om]
  J[189] += dqdci; // dwdot[O2]/d[Om]
  J[198] -= dqdci; // dwdot[Om]/d[Om]
  // d()/dT
  J[272] += dqdT; // dwdot[E]/dT
  J[273] -= dqdT; // dwdot[O]/dT
  J[274] += dqdT; // dwdot[O2]/dT
  J[283] -= dqdT; // dwdot[Om]/dT

  // reaction 62: Om + Op => 2 O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[12];
  k_f = 24090000000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[1] += 2 * q; // O
  wdot[11] -= q;    // Om
  wdot[12] -= q;    // Op
  // d()/d[Om]
  dqdci = +k_f * sc[12];
  J[188] += 2 * dqdci; // dwdot[O]/d[Om]
  J[198] -= dqdci;     // dwdot[Om]/d[Om]
  J[199] -= dqdci;     // dwdot[Op]/d[Om]
  // d()/d[Op]
  dqdci = +k_f * sc[11];
  J[205] += 2 * dqdci; // dwdot[O]/d[Op]
  J[215] -= dqdci;     // dwdot[Om]/d[Op]
  J[216] -= dqdci;     // dwdot[Op]/d[Op]
  // d()/dT
  J[273] += 2 * dqdT; // dwdot[O]/dT
  J[283] -= dqdT;     // dwdot[Om]/dT
  J[284] -= dqdT;     // dwdot[Op]/dT

  // reaction 64: CO2 + O => CO + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[4];
  k_f = 0;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[1] -= q; // O
  wdot[2] += q; // O2
  wdot[4] -= q; // CO2
  wdot[5] += q; // CO
  // d()/d[O]
  dqdci = +k_f * sc[4];
  J[18] -= dqdci; // dwdot[O]/d[O]
  J[19] += dqdci; // dwdot[O2]/d[O]
  J[21] -= dqdci; // dwdot[CO2]/d[O]
  J[22] += dqdci; // dwdot[CO]/d[O]
  // d()/d[CO2]
  dqdci = +k_f * sc[1];
  J[69] -= dqdci; // dwdot[O]/d[CO2]
  J[70] += dqdci; // dwdot[O2]/d[CO2]
  J[72] -= dqdci; // dwdot[CO2]/d[CO2]
  J[73] += dqdci; // dwdot[CO]/d[CO2]
  // d()/dT
  J[273] -= dqdT; // dwdot[O]/dT
  J[274] += dqdT; // dwdot[O2]/dT
  J[276] -= dqdT; // dwdot[CO2]/dT
  J[277] += dqdT; // dwdot[CO]/dT

  // reaction 66: CO + O2 => CO2 + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[5];
  k_f = 0;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[1] += q; // O
  wdot[2] -= q; // O2
  wdot[4] += q; // CO2
  wdot[5] -= q; // CO
  // d()/d[O2]
  dqdci = +k_f * sc[5];
  J[35] += dqdci; // dwdot[O]/d[O2]
  J[36] -= dqdci; // dwdot[O2]/d[O2]
  J[38] += dqdci; // dwdot[CO2]/d[O2]
  J[39] -= dqdci; // dwdot[CO]/d[O2]
  // d()/d[CO]
  dqdci = +k_f * sc[2];
  J[86] += dqdci; // dwdot[O]/d[CO]
  J[87] -= dqdci; // dwdot[O2]/d[CO]
  J[89] += dqdci; // dwdot[CO2]/d[CO]
  J[90] -= dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[273] += dqdT; // dwdot[O]/dT
  J[274] -= dqdT; // dwdot[O2]/dT
  J[276] += dqdT; // dwdot[CO2]/dT
  J[277] -= dqdT; // dwdot[CO]/dT

  amrex::Real c_R[16], dcRdT[16], e_RT[16];
  amrex::Real* eh_RT;
  if (HP == 1) {
    cp_R(c_R, tc);
    dcvpRdT(dcRdT, tc);
    eh_RT = &h_RT[0];
  } else {
    cv_R(c_R, tc);
    dcvpRdT(dcRdT, tc);
    speciesInternalEnergy(e_RT, tc);
    eh_RT = &e_RT[0];
  }

  amrex::Real cmix = 0.0, ehmix = 0.0, dcmixdT = 0.0, dehmixdT = 0.0;
  for (int k = 0; k < 16; ++k) {
    cmix += c_R[k] * sc[k];
    dcmixdT += dcRdT[k] * sc[k];
    ehmix += eh_RT[k] * wdot[k];
    dehmixdT += invT * (c_R[k] - eh_RT[k]) * wdot[k] + eh_RT[k] * J[272 + k];
  }

  amrex::Real cmixinv = 1.0 / cmix;
  amrex::Real tmp1 = ehmix * cmixinv;
  amrex::Real tmp3 = cmixinv * T;
  amrex::Real tmp2 = tmp1 * tmp3;
  amrex::Real dehmixdc;
  // dTdot/d[X]
  for (int k = 0; k < 16; ++k) {
    dehmixdc = 0.0;
    for (int m = 0; m < 16; ++m) {
      dehmixdc += eh_RT[m] * J[k * 17 + m];
    }
    J[k * 17 + 16] = tmp2 * c_R[k] - tmp3 * dehmixdc;
  }
  // dTdot/dT
  J[288] = -tmp1 + tmp2 * dcmixdT - tmp3 * dehmixdT;
#else
  amrex::Abort();
#endif
}

// compute an approx to the reaction Jacobian (for preconditioning)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
DWDOT_SIMPLIFIED(
  amrex::Real* J, const amrex::Real* sc, const amrex::Real* Tp, const int* HP)
{
  amrex::Real c[16];

  for (int k = 0; k < 16; k++) {
    c[k] = 1.e6 * sc[k];
  }

  aJacobian_precond(J, c, *Tp, *HP);

  // dwdot[k]/dT
  // dTdot/d[X]
  for (int k = 0; k < 16; k++) {
    J[272 + k] *= 1.e-6;
    J[k * 17 + 16] *= 1.e6;
  }
}

// compute the reaction Jacobian
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
aJacobian(
  amrex::Real* J, const amrex::Real* sc, const amrex::Real T, const int consP)
{

#if defined(PELE_COMPILE_AJACOBIAN) || !defined(AMREX_USE_HIP)
  for (int i = 0; i < 289; i++) {
    J[i] = 0.0;
  }

  amrex::Real wdot[16];
  for (auto& val : wdot) {
    val = 0.0;
  }

  const amrex::Real tc[5] = {
    log(T), T, T * T, T * T * T, T * T * T * T}; // temperature cache
  amrex::Real invT = 1.0 / tc[1];
  amrex::Real invT2 = invT * invT;

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  amrex::Real refC = 101325 / 8.31446 / T;
  amrex::Real refCinv = 1.0 / refC;

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int k = 0; k < 16; ++k) {
    mixture += sc[k];
  }

  // compute the Gibbs free energy
  amrex::Real g_RT[16];
  gibbs(g_RT, tc);

  // compute the species enthalpy
  amrex::Real h_RT[16];
  speciesEnthalpy(h_RT, tc);

  amrex::Real phi_f, k_f, k_r, phi_r, Kc, q, q_nocor, Corr, alpha;
  amrex::Real dlnkfdT, dlnk0dT, dlnKcdT, dkrdT, dqdT;
  amrex::Real dqdci, dcdc_fac, dqdc[16];
  amrex::Real Pr, fPr, F, k_0, logPr;
  amrex::Real logFcent, troe_c, troe_n, troePr_den, troePr, troe;
  amrex::Real Fcent1, Fcent2, Fcent3, Fcent;
  amrex::Real dlogFdc, dlogFdn, dlogFdcn_fac;
  amrex::Real dlogPrdT, dlogfPrdT, dlogFdT, dlogFcentdT, dlogFdlogPr, dlnCorrdT;
  const amrex::Real ln10 = log(10.0);
  const amrex::Real log10e = 1.0 / log(10.0);
  // reaction 5: CO2 + E => CO + O + E
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[4];
  k_f = 0;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[1] += q; // O
  wdot[4] -= q; // CO2
  wdot[5] += q; // CO
  // d()/d[E]
  dqdci = +k_f * sc[4];
  J[1] += dqdci; // dwdot[O]/d[E]
  J[4] -= dqdci; // dwdot[CO2]/d[E]
  J[5] += dqdci; // dwdot[CO]/d[E]
  // d()/d[CO2]
  dqdci = +k_f * sc[0];
  J[69] += dqdci; // dwdot[O]/d[CO2]
  J[72] -= dqdci; // dwdot[CO2]/d[CO2]
  J[73] += dqdci; // dwdot[CO]/d[CO2]
  // d()/dT
  J[273] += dqdT; // dwdot[O]/dT
  J[276] -= dqdT; // dwdot[CO2]/dT
  J[277] += dqdT; // dwdot[CO]/dT

  // reaction 6: CO2 + E => CO2p + E + E
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[4];
  k_f = 0;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] += q;  // E
  wdot[4] -= q;  // CO2
  wdot[10] += q; // CO2p
  // d()/d[E]
  dqdci = +k_f * sc[4];
  J[0] += dqdci;  // dwdot[E]/d[E]
  J[4] -= dqdci;  // dwdot[CO2]/d[E]
  J[10] += dqdci; // dwdot[CO2p]/d[E]
  // d()/d[CO2]
  dqdci = +k_f * sc[0];
  J[68] += dqdci; // dwdot[E]/d[CO2]
  J[72] -= dqdci; // dwdot[CO2]/d[CO2]
  J[78] += dqdci; // dwdot[CO2p]/d[CO2]
  // d()/dT
  J[272] += dqdT; // dwdot[E]/dT
  J[276] -= dqdT; // dwdot[CO2]/dT
  J[282] += dqdT; // dwdot[CO2p]/dT

  // reaction 10: CO + E => COp + E + E
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[5];
  k_f = 0;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] += q;  // E
  wdot[5] -= q;  // CO
  wdot[13] += q; // COp
  // d()/d[E]
  dqdci = +k_f * sc[5];
  J[0] += dqdci;  // dwdot[E]/d[E]
  J[5] -= dqdci;  // dwdot[CO]/d[E]
  J[13] += dqdci; // dwdot[COp]/d[E]
  // d()/d[CO]
  dqdci = +k_f * sc[0];
  J[85] += dqdci; // dwdot[E]/d[CO]
  J[90] -= dqdci; // dwdot[CO]/d[CO]
  J[98] += dqdci; // dwdot[COp]/d[CO]
  // d()/dT
  J[272] += dqdT; // dwdot[E]/dT
  J[277] -= dqdT; // dwdot[CO]/dT
  J[285] += dqdT; // dwdot[COp]/dT

  // reaction 13: AR + E => ARp + E + E
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[3];
  k_f = 0;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] += q;  // E
  wdot[3] -= q;  // AR
  wdot[15] += q; // ARp
  // d()/d[E]
  dqdci = +k_f * sc[3];
  J[0] += dqdci;  // dwdot[E]/d[E]
  J[3] -= dqdci;  // dwdot[AR]/d[E]
  J[15] += dqdci; // dwdot[ARp]/d[E]
  // d()/d[AR]
  dqdci = +k_f * sc[0];
  J[51] += dqdci; // dwdot[E]/d[AR]
  J[54] -= dqdci; // dwdot[AR]/d[AR]
  J[66] += dqdci; // dwdot[ARp]/d[AR]
  // d()/dT
  J[272] += dqdT; // dwdot[E]/dT
  J[275] -= dqdT; // dwdot[AR]/dT
  J[287] += dqdT; // dwdot[ARp]/dT

  // reaction 15: E + Op + M => O + M
  // a third-body and non-pressure-fall-off reaction
  // Irreversible reaction in _ajac_reaction may not work
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[0] * sc[12];
  k_f = 3626600000;
  dlnkfdT = 0.0;
  // rate of progress
  q_nocor = k_f * phi_f;
  q = alpha * q_nocor;
  dqdT = alpha * dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] -= q;  // E
  wdot[1] += q;  // O
  wdot[12] -= q; // Op
  // for convenience
  k_f *= alpha;
  if (consP == 1) {
    // d()/d[E]
    dqdci = +k_f * sc[12];
    J[0] -= dqdci;  // dwdot[E]/d[E]
    J[1] += dqdci;  // dwdot[O]/d[E]
    J[12] -= dqdci; // dwdot[Op]/d[E]
    // d()/d[Op]
    dqdci = +k_f * sc[0];
    J[204] -= dqdci; // dwdot[E]/d[Op]
    J[205] += dqdci; // dwdot[O]/d[Op]
    J[216] -= dqdci; // dwdot[Op]/d[Op]
  } else {
    dqdc[0] = q_nocor + k_f * sc[12];
    dqdc[1] = q_nocor;
    dqdc[2] = q_nocor;
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor + k_f * sc[0];
    dqdc[13] = q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    for (int k = 0; k < 16; k++) {
      J[17 * k + 0] -= dqdc[k];
      J[17 * k + 1] += dqdc[k];
      J[17 * k + 12] -= dqdc[k];
    }
  }
  J[272] -= dqdT; // dwdot[E]/dT
  J[273] += dqdT; // dwdot[O]/dT
  J[284] -= dqdT; // dwdot[Op]/dT

  // reaction 17: E + O + M => Om + M
  // a third-body and non-pressure-fall-off reaction
  // Irreversible reaction in _ajac_reaction may not work
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[0] * sc[1];
  k_f = 36266;
  dlnkfdT = 0.0;
  // rate of progress
  q_nocor = k_f * phi_f;
  q = alpha * q_nocor;
  dqdT = alpha * dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] -= q;  // E
  wdot[1] -= q;  // O
  wdot[11] += q; // Om
  // for convenience
  k_f *= alpha;
  if (consP == 1) {
    // d()/d[E]
    dqdci = +k_f * sc[1];
    J[0] -= dqdci;  // dwdot[E]/d[E]
    J[1] -= dqdci;  // dwdot[O]/d[E]
    J[11] += dqdci; // dwdot[Om]/d[E]
    // d()/d[O]
    dqdci = +k_f * sc[0];
    J[17] -= dqdci; // dwdot[E]/d[O]
    J[18] -= dqdci; // dwdot[O]/d[O]
    J[28] += dqdci; // dwdot[Om]/d[O]
  } else {
    dqdc[0] = q_nocor + k_f * sc[1];
    dqdc[1] = q_nocor + k_f * sc[0];
    dqdc[2] = q_nocor;
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    for (int k = 0; k < 16; k++) {
      J[17 * k + 0] -= dqdc[k];
      J[17 * k + 1] -= dqdc[k];
      J[17 * k + 11] += dqdc[k];
    }
  }
  J[272] -= dqdT; // dwdot[E]/dT
  J[273] -= dqdT; // dwdot[O]/dT
  J[283] += dqdT; // dwdot[Om]/dT

  // reaction 63: Om + Op + M => O2 + M
  // a third-body and non-pressure-fall-off reaction
  // Irreversible reaction in _ajac_reaction may not work
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[11] * sc[12];
  k_f = 72530000000;
  dlnkfdT = 0.0;
  // rate of progress
  q_nocor = k_f * phi_f;
  q = alpha * q_nocor;
  dqdT = alpha * dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[2] += q;  // O2
  wdot[11] -= q; // Om
  wdot[12] -= q; // Op
  // for convenience
  k_f *= alpha;
  if (consP == 1) {
    // d()/d[Om]
    dqdci = +k_f * sc[12];
    J[189] += dqdci; // dwdot[O2]/d[Om]
    J[198] -= dqdci; // dwdot[Om]/d[Om]
    J[199] -= dqdci; // dwdot[Op]/d[Om]
    // d()/d[Op]
    dqdci = +k_f * sc[11];
    J[206] += dqdci; // dwdot[O2]/d[Op]
    J[215] -= dqdci; // dwdot[Om]/d[Op]
    J[216] -= dqdci; // dwdot[Op]/d[Op]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = q_nocor;
    dqdc[2] = q_nocor;
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor + k_f * sc[12];
    dqdc[12] = q_nocor + k_f * sc[11];
    dqdc[13] = q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    for (int k = 0; k < 16; k++) {
      J[17 * k + 2] += dqdc[k];
      J[17 * k + 11] -= dqdc[k];
      J[17 * k + 12] -= dqdc[k];
    }
  }
  J[274] += dqdT; // dwdot[O2]/dT
  J[283] -= dqdT; // dwdot[Om]/dT
  J[284] -= dqdT; // dwdot[Op]/dT

  // reaction 65: CO + O + M => CO2 + M
  // a third-body and non-pressure-fall-off reaction
  // Irreversible reaction in _ajac_reaction may not work
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[1] * sc[5];
  k_f = 0;
  dlnkfdT = 0.0;
  // rate of progress
  q_nocor = k_f * phi_f;
  q = alpha * q_nocor;
  dqdT = alpha * dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[1] -= q; // O
  wdot[4] += q; // CO2
  wdot[5] -= q; // CO
  // for convenience
  k_f *= alpha;
  if (consP == 1) {
    // d()/d[O]
    dqdci = +k_f * sc[5];
    J[18] -= dqdci; // dwdot[O]/d[O]
    J[21] += dqdci; // dwdot[CO2]/d[O]
    J[22] -= dqdci; // dwdot[CO]/d[O]
    // d()/d[CO]
    dqdci = +k_f * sc[1];
    J[86] -= dqdci; // dwdot[O]/d[CO]
    J[89] += dqdci; // dwdot[CO2]/d[CO]
    J[90] -= dqdci; // dwdot[CO]/d[CO]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = q_nocor + k_f * sc[5];
    dqdc[2] = q_nocor;
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = q_nocor + k_f * sc[1];
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    for (int k = 0; k < 16; k++) {
      J[17 * k + 1] -= dqdc[k];
      J[17 * k + 4] += dqdc[k];
      J[17 * k + 5] -= dqdc[k];
    }
  }
  J[273] -= dqdT; // dwdot[O]/dT
  J[276] += dqdT; // dwdot[CO2]/dT
  J[277] -= dqdT; // dwdot[CO]/dT

  // reaction 67: 2 O + M => O2 + M
  // a third-body and non-pressure-fall-off reaction
  // Irreversible reaction in _ajac_reaction may not work
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = (sc[1] * sc[1]);
  k_f = 0;
  dlnkfdT = 0.0;
  // rate of progress
  q_nocor = k_f * phi_f;
  q = alpha * q_nocor;
  dqdT = alpha * dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[1] -= 2 * q; // O
  wdot[2] += q;     // O2
  // for convenience
  k_f *= alpha;
  if (consP == 1) {
    // d()/d[O]
    dqdci = +k_f * 2.000000 * sc[1];
    J[18] += -2 * dqdci; // dwdot[O]/d[O]
    J[19] += dqdci;      // dwdot[O2]/d[O]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = q_nocor + k_f * 2.000000 * sc[1];
    dqdc[2] = q_nocor;
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    for (int k = 0; k < 16; k++) {
      J[17 * k + 1] += -2 * dqdc[k];
      J[17 * k + 2] += dqdc[k];
    }
  }
  J[273] += -2 * dqdT; // dwdot[O]/dT
  J[274] += dqdT;      // dwdot[O2]/dT

  // reaction 0: CO2 + E => CO2 + E
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[4];
  k_f = 0;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  // d()/d[E]
  dqdci = +k_f * sc[4];
  // d()/d[CO2]
  dqdci = +k_f * sc[0];
  // d()/dT

  // reaction 1: CO2 + E => CO2v1 + E
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[4];
  k_f = 0;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] -= q; // CO2
  wdot[6] += q; // CO2v1
  // d()/d[E]
  dqdci = +k_f * sc[4];
  J[4] -= dqdci; // dwdot[CO2]/d[E]
  J[6] += dqdci; // dwdot[CO2v1]/d[E]
  // d()/d[CO2]
  dqdci = +k_f * sc[0];
  J[72] -= dqdci; // dwdot[CO2]/d[CO2]
  J[74] += dqdci; // dwdot[CO2v1]/d[CO2]
  // d()/dT
  J[276] -= dqdT; // dwdot[CO2]/dT
  J[278] += dqdT; // dwdot[CO2v1]/dT

  // reaction 2: CO2 + E => CO2v2 + E
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[4];
  k_f = 0;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] -= q; // CO2
  wdot[7] += q; // CO2v2
  // d()/d[E]
  dqdci = +k_f * sc[4];
  J[4] -= dqdci; // dwdot[CO2]/d[E]
  J[7] += dqdci; // dwdot[CO2v2]/d[E]
  // d()/d[CO2]
  dqdci = +k_f * sc[0];
  J[72] -= dqdci; // dwdot[CO2]/d[CO2]
  J[75] += dqdci; // dwdot[CO2v2]/d[CO2]
  // d()/dT
  J[276] -= dqdT; // dwdot[CO2]/dT
  J[279] += dqdT; // dwdot[CO2v2]/dT

  // reaction 3: CO2 + E => CO2v3 + E
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[4];
  k_f = 0;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] -= q; // CO2
  wdot[8] += q; // CO2v3
  // d()/d[E]
  dqdci = +k_f * sc[4];
  J[4] -= dqdci; // dwdot[CO2]/d[E]
  J[8] += dqdci; // dwdot[CO2v3]/d[E]
  // d()/d[CO2]
  dqdci = +k_f * sc[0];
  J[72] -= dqdci; // dwdot[CO2]/d[CO2]
  J[76] += dqdci; // dwdot[CO2v3]/d[CO2]
  // d()/dT
  J[276] -= dqdT; // dwdot[CO2]/dT
  J[280] += dqdT; // dwdot[CO2v3]/dT

  // reaction 4: CO2 + E => CO2v4 + E
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[4];
  k_f = 0;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] -= q; // CO2
  wdot[9] += q; // CO2v4
  // d()/d[E]
  dqdci = +k_f * sc[4];
  J[4] -= dqdci; // dwdot[CO2]/d[E]
  J[9] += dqdci; // dwdot[CO2v4]/d[E]
  // d()/d[CO2]
  dqdci = +k_f * sc[0];
  J[72] -= dqdci; // dwdot[CO2]/d[CO2]
  J[77] += dqdci; // dwdot[CO2v4]/d[CO2]
  // d()/dT
  J[276] -= dqdT; // dwdot[CO2]/dT
  J[281] += dqdT; // dwdot[CO2v4]/dT

  // reaction 7: CO2 + E => CO + 2 E + Op
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[4];
  k_f = 0;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] += q;  // E
  wdot[4] -= q;  // CO2
  wdot[5] += q;  // CO
  wdot[12] += q; // Op
  // d()/d[E]
  dqdci = +k_f * sc[4];
  J[0] += dqdci;  // dwdot[E]/d[E]
  J[4] -= dqdci;  // dwdot[CO2]/d[E]
  J[5] += dqdci;  // dwdot[CO]/d[E]
  J[12] += dqdci; // dwdot[Op]/d[E]
  // d()/d[CO2]
  dqdci = +k_f * sc[0];
  J[68] += dqdci; // dwdot[E]/d[CO2]
  J[72] -= dqdci; // dwdot[CO2]/d[CO2]
  J[73] += dqdci; // dwdot[CO]/d[CO2]
  J[80] += dqdci; // dwdot[Op]/d[CO2]
  // d()/dT
  J[272] += dqdT; // dwdot[E]/dT
  J[276] -= dqdT; // dwdot[CO2]/dT
  J[277] += dqdT; // dwdot[CO]/dT
  J[284] += dqdT; // dwdot[Op]/dT

  // reaction 8: CO2 + E => COp + 2 E + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[4];
  k_f = 0;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] += q;  // E
  wdot[1] += q;  // O
  wdot[4] -= q;  // CO2
  wdot[13] += q; // COp
  // d()/d[E]
  dqdci = +k_f * sc[4];
  J[0] += dqdci;  // dwdot[E]/d[E]
  J[1] += dqdci;  // dwdot[O]/d[E]
  J[4] -= dqdci;  // dwdot[CO2]/d[E]
  J[13] += dqdci; // dwdot[COp]/d[E]
  // d()/d[CO2]
  dqdci = +k_f * sc[0];
  J[68] += dqdci; // dwdot[E]/d[CO2]
  J[69] += dqdci; // dwdot[O]/d[CO2]
  J[72] -= dqdci; // dwdot[CO2]/d[CO2]
  J[81] += dqdci; // dwdot[COp]/d[CO2]
  // d()/dT
  J[272] += dqdT; // dwdot[E]/dT
  J[273] += dqdT; // dwdot[O]/dT
  J[276] -= dqdT; // dwdot[CO2]/dT
  J[285] += dqdT; // dwdot[COp]/dT

  // reaction 9: CO2 + E => CO + Om
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[4];
  k_f = 0;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] -= q;  // E
  wdot[4] -= q;  // CO2
  wdot[5] += q;  // CO
  wdot[11] += q; // Om
  // d()/d[E]
  dqdci = +k_f * sc[4];
  J[0] -= dqdci;  // dwdot[E]/d[E]
  J[4] -= dqdci;  // dwdot[CO2]/d[E]
  J[5] += dqdci;  // dwdot[CO]/d[E]
  J[11] += dqdci; // dwdot[Om]/d[E]
  // d()/d[CO2]
  dqdci = +k_f * sc[0];
  J[68] -= dqdci; // dwdot[E]/d[CO2]
  J[72] -= dqdci; // dwdot[CO2]/d[CO2]
  J[73] += dqdci; // dwdot[CO]/d[CO2]
  J[79] += dqdci; // dwdot[Om]/d[CO2]
  // d()/dT
  J[272] -= dqdT; // dwdot[E]/dT
  J[276] -= dqdT; // dwdot[CO2]/dT
  J[277] += dqdT; // dwdot[CO]/dT
  J[283] += dqdT; // dwdot[Om]/dT

  // reaction 11: AR + E => AR + E
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[3];
  k_f = 0;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  // d()/d[E]
  dqdci = +k_f * sc[3];
  // d()/d[AR]
  dqdci = +k_f * sc[0];
  // d()/dT

  // reaction 12: AR + E => ARe + E
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[3];
  k_f = 0;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[3] -= q;  // AR
  wdot[14] += q; // ARe
  // d()/d[E]
  dqdci = +k_f * sc[3];
  J[3] -= dqdci;  // dwdot[AR]/d[E]
  J[14] += dqdci; // dwdot[ARe]/d[E]
  // d()/d[AR]
  dqdci = +k_f * sc[0];
  J[54] -= dqdci; // dwdot[AR]/d[AR]
  J[65] += dqdci; // dwdot[ARe]/d[AR]
  // d()/dT
  J[275] -= dqdT; // dwdot[AR]/dT
  J[286] += dqdT; // dwdot[ARe]/dT

  // reaction 14: CO2p + E => CO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[10];
  k_f = 0;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] -= q;  // E
  wdot[1] += q;  // O
  wdot[5] += q;  // CO
  wdot[10] -= q; // CO2p
  // d()/d[E]
  dqdci = +k_f * sc[10];
  J[0] -= dqdci;  // dwdot[E]/d[E]
  J[1] += dqdci;  // dwdot[O]/d[E]
  J[5] += dqdci;  // dwdot[CO]/d[E]
  J[10] -= dqdci; // dwdot[CO2p]/d[E]
  // d()/d[CO2p]
  dqdci = +k_f * sc[0];
  J[170] -= dqdci; // dwdot[E]/d[CO2p]
  J[171] += dqdci; // dwdot[O]/d[CO2p]
  J[175] += dqdci; // dwdot[CO]/d[CO2p]
  J[180] -= dqdci; // dwdot[CO2p]/d[CO2p]
  // d()/dT
  J[272] -= dqdT; // dwdot[E]/dT
  J[273] += dqdT; // dwdot[O]/dT
  J[277] += dqdT; // dwdot[CO]/dT
  J[282] -= dqdT; // dwdot[CO2p]/dT

  // reaction 16: COp + E => CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[13];
  k_f = 0;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] -= q;  // E
  wdot[5] += q;  // CO
  wdot[13] -= q; // COp
  // d()/d[E]
  dqdci = +k_f * sc[13];
  J[0] -= dqdci;  // dwdot[E]/d[E]
  J[5] += dqdci;  // dwdot[CO]/d[E]
  J[13] -= dqdci; // dwdot[COp]/d[E]
  // d()/d[COp]
  dqdci = +k_f * sc[0];
  J[221] -= dqdci; // dwdot[E]/d[COp]
  J[226] += dqdci; // dwdot[CO]/d[COp]
  J[234] -= dqdci; // dwdot[COp]/d[COp]
  // d()/dT
  J[272] -= dqdT; // dwdot[E]/dT
  J[277] += dqdT; // dwdot[CO]/dT
  J[285] -= dqdT; // dwdot[COp]/dT

  // reaction 18: ARe + CO2 => AR + CO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[14];
  k_f = 319200000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[1] += q;  // O
  wdot[3] += q;  // AR
  wdot[4] -= q;  // CO2
  wdot[5] += q;  // CO
  wdot[14] -= q; // ARe
  // d()/d[CO2]
  dqdci = +k_f * sc[14];
  J[69] += dqdci; // dwdot[O]/d[CO2]
  J[71] += dqdci; // dwdot[AR]/d[CO2]
  J[72] -= dqdci; // dwdot[CO2]/d[CO2]
  J[73] += dqdci; // dwdot[CO]/d[CO2]
  J[82] -= dqdci; // dwdot[ARe]/d[CO2]
  // d()/d[ARe]
  dqdci = +k_f * sc[4];
  J[239] += dqdci; // dwdot[O]/d[ARe]
  J[241] += dqdci; // dwdot[AR]/d[ARe]
  J[242] -= dqdci; // dwdot[CO2]/d[ARe]
  J[243] += dqdci; // dwdot[CO]/d[ARe]
  J[252] -= dqdci; // dwdot[ARe]/d[ARe]
  // d()/dT
  J[273] += dqdT; // dwdot[O]/dT
  J[275] += dqdT; // dwdot[AR]/dT
  J[276] -= dqdT; // dwdot[CO2]/dT
  J[277] += dqdT; // dwdot[CO]/dT
  J[286] -= dqdT; // dwdot[ARe]/dT

  // reaction 19: ARp + CO2 => AR + CO + Op
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[15];
  k_f = 0;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[3] += q;  // AR
  wdot[4] -= q;  // CO2
  wdot[5] += q;  // CO
  wdot[12] += q; // Op
  wdot[15] -= q; // ARp
  // d()/d[CO2]
  dqdci = +k_f * sc[15];
  J[71] += dqdci; // dwdot[AR]/d[CO2]
  J[72] -= dqdci; // dwdot[CO2]/d[CO2]
  J[73] += dqdci; // dwdot[CO]/d[CO2]
  J[80] += dqdci; // dwdot[Op]/d[CO2]
  J[83] -= dqdci; // dwdot[ARp]/d[CO2]
  // d()/d[ARp]
  dqdci = +k_f * sc[4];
  J[258] += dqdci; // dwdot[AR]/d[ARp]
  J[259] -= dqdci; // dwdot[CO2]/d[ARp]
  J[260] += dqdci; // dwdot[CO]/d[ARp]
  J[267] += dqdci; // dwdot[Op]/d[ARp]
  J[270] -= dqdci; // dwdot[ARp]/d[ARp]
  // d()/dT
  J[275] += dqdT; // dwdot[AR]/dT
  J[276] -= dqdT; // dwdot[CO2]/dT
  J[277] += dqdT; // dwdot[CO]/dT
  J[284] += dqdT; // dwdot[Op]/dT
  J[287] -= dqdT; // dwdot[ARp]/dT

  // reaction 20: ARp + CO2 => AR + COp + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[15];
  k_f = 0;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[1] += q;  // O
  wdot[3] += q;  // AR
  wdot[4] -= q;  // CO2
  wdot[13] += q; // COp
  wdot[15] -= q; // ARp
  // d()/d[CO2]
  dqdci = +k_f * sc[15];
  J[69] += dqdci; // dwdot[O]/d[CO2]
  J[71] += dqdci; // dwdot[AR]/d[CO2]
  J[72] -= dqdci; // dwdot[CO2]/d[CO2]
  J[81] += dqdci; // dwdot[COp]/d[CO2]
  J[83] -= dqdci; // dwdot[ARp]/d[CO2]
  // d()/d[ARp]
  dqdci = +k_f * sc[4];
  J[256] += dqdci; // dwdot[O]/d[ARp]
  J[258] += dqdci; // dwdot[AR]/d[ARp]
  J[259] -= dqdci; // dwdot[CO2]/d[ARp]
  J[268] += dqdci; // dwdot[COp]/d[ARp]
  J[270] -= dqdci; // dwdot[ARp]/d[ARp]
  // d()/dT
  J[273] += dqdT; // dwdot[O]/dT
  J[275] += dqdT; // dwdot[AR]/dT
  J[276] -= dqdT; // dwdot[CO2]/dT
  J[285] += dqdT; // dwdot[COp]/dT
  J[287] -= dqdT; // dwdot[ARp]/dT

  // reaction 21: ARp + CO2 => AR + CO2p
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[15];
  k_f = 30110000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[3] += q;  // AR
  wdot[4] -= q;  // CO2
  wdot[10] += q; // CO2p
  wdot[15] -= q; // ARp
  // d()/d[CO2]
  dqdci = +k_f * sc[15];
  J[71] += dqdci; // dwdot[AR]/d[CO2]
  J[72] -= dqdci; // dwdot[CO2]/d[CO2]
  J[78] += dqdci; // dwdot[CO2p]/d[CO2]
  J[83] -= dqdci; // dwdot[ARp]/d[CO2]
  // d()/d[ARp]
  dqdci = +k_f * sc[4];
  J[258] += dqdci; // dwdot[AR]/d[ARp]
  J[259] -= dqdci; // dwdot[CO2]/d[ARp]
  J[265] += dqdci; // dwdot[CO2p]/d[ARp]
  J[270] -= dqdci; // dwdot[ARp]/d[ARp]
  // d()/dT
  J[275] += dqdT; // dwdot[AR]/dT
  J[276] -= dqdT; // dwdot[CO2]/dT
  J[282] += dqdT; // dwdot[CO2p]/dT
  J[287] -= dqdT; // dwdot[ARp]/dT

  // reaction 22: CO2 + CO2v1 => 2 CO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[6];
  k_f = 6444;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] += q; // CO2
  wdot[6] -= q; // CO2v1
  // d()/d[CO2]
  dqdci = +k_f * sc[6];
  J[72] += dqdci; // dwdot[CO2]/d[CO2]
  J[74] -= dqdci; // dwdot[CO2v1]/d[CO2]
  // d()/d[CO2v1]
  dqdci = +k_f * sc[4];
  J[106] += dqdci; // dwdot[CO2]/d[CO2v1]
  J[108] -= dqdci; // dwdot[CO2v1]/d[CO2v1]
  // d()/dT
  J[276] += dqdT; // dwdot[CO2]/dT
  J[278] -= dqdT; // dwdot[CO2v1]/dT

  // reaction 23: CO + CO2v1 => CO + CO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[6];
  k_f = 4505;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] += q; // CO2
  wdot[6] -= q; // CO2v1
  // d()/d[CO]
  dqdci = +k_f * sc[6];
  J[89] += dqdci; // dwdot[CO2]/d[CO]
  J[91] -= dqdci; // dwdot[CO2v1]/d[CO]
  // d()/d[CO2v1]
  dqdci = +k_f * sc[5];
  J[106] += dqdci; // dwdot[CO2]/d[CO2v1]
  J[108] -= dqdci; // dwdot[CO2v1]/d[CO2v1]
  // d()/dT
  J[276] += dqdT; // dwdot[CO2]/dT
  J[278] -= dqdT; // dwdot[CO2v1]/dT

  // reaction 24: CO2v1 + O2 => CO2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[6];
  k_f = 4505;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] += q; // CO2
  wdot[6] -= q; // CO2v1
  // d()/d[O2]
  dqdci = +k_f * sc[6];
  J[38] += dqdci; // dwdot[CO2]/d[O2]
  J[40] -= dqdci; // dwdot[CO2v1]/d[O2]
  // d()/d[CO2v1]
  dqdci = +k_f * sc[2];
  J[106] += dqdci; // dwdot[CO2]/d[CO2v1]
  J[108] -= dqdci; // dwdot[CO2v1]/d[CO2v1]
  // d()/dT
  J[276] += dqdT; // dwdot[CO2]/dT
  J[278] -= dqdT; // dwdot[CO2v1]/dT

  // reaction 25: AR + CO2v1 => AR + CO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[6];
  k_f = 4505;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] += q; // CO2
  wdot[6] -= q; // CO2v1
  // d()/d[AR]
  dqdci = +k_f * sc[6];
  J[55] += dqdci; // dwdot[CO2]/d[AR]
  J[57] -= dqdci; // dwdot[CO2v1]/d[AR]
  // d()/d[CO2v1]
  dqdci = +k_f * sc[3];
  J[106] += dqdci; // dwdot[CO2]/d[CO2v1]
  J[108] -= dqdci; // dwdot[CO2v1]/d[CO2v1]
  // d()/dT
  J[276] += dqdT; // dwdot[CO2]/dT
  J[278] -= dqdT; // dwdot[CO2v1]/dT

  // reaction 26: CO2 + CO2v2 => 2 CO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[7];
  k_f = 5.42;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] += q; // CO2
  wdot[7] -= q; // CO2v2
  // d()/d[CO2]
  dqdci = +k_f * sc[7];
  J[72] += dqdci; // dwdot[CO2]/d[CO2]
  J[75] -= dqdci; // dwdot[CO2v2]/d[CO2]
  // d()/d[CO2v2]
  dqdci = +k_f * sc[4];
  J[123] += dqdci; // dwdot[CO2]/d[CO2v2]
  J[126] -= dqdci; // dwdot[CO2v2]/d[CO2v2]
  // d()/dT
  J[276] += dqdT; // dwdot[CO2]/dT
  J[279] -= dqdT; // dwdot[CO2v2]/dT

  // reaction 27: CO + CO2v2 => CO + CO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[7];
  k_f = 16.8;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] += q; // CO2
  wdot[7] -= q; // CO2v2
  // d()/d[CO]
  dqdci = +k_f * sc[7];
  J[89] += dqdci; // dwdot[CO2]/d[CO]
  J[92] -= dqdci; // dwdot[CO2v2]/d[CO]
  // d()/d[CO2v2]
  dqdci = +k_f * sc[5];
  J[123] += dqdci; // dwdot[CO2]/d[CO2v2]
  J[126] -= dqdci; // dwdot[CO2v2]/d[CO2v2]
  // d()/dT
  J[276] += dqdT; // dwdot[CO2]/dT
  J[279] -= dqdT; // dwdot[CO2v2]/dT

  // reaction 28: CO2v2 + O2 => CO2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[7];
  k_f = 16.8;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] += q; // CO2
  wdot[7] -= q; // CO2v2
  // d()/d[O2]
  dqdci = +k_f * sc[7];
  J[38] += dqdci; // dwdot[CO2]/d[O2]
  J[41] -= dqdci; // dwdot[CO2v2]/d[O2]
  // d()/d[CO2v2]
  dqdci = +k_f * sc[2];
  J[123] += dqdci; // dwdot[CO2]/d[CO2v2]
  J[126] -= dqdci; // dwdot[CO2v2]/d[CO2v2]
  // d()/dT
  J[276] += dqdT; // dwdot[CO2]/dT
  J[279] -= dqdT; // dwdot[CO2v2]/dT

  // reaction 29: AR + CO2v2 => AR + CO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[7];
  k_f = 16.8;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] += q; // CO2
  wdot[7] -= q; // CO2v2
  // d()/d[AR]
  dqdci = +k_f * sc[7];
  J[55] += dqdci; // dwdot[CO2]/d[AR]
  J[58] -= dqdci; // dwdot[CO2v2]/d[AR]
  // d()/d[CO2v2]
  dqdci = +k_f * sc[3];
  J[123] += dqdci; // dwdot[CO2]/d[CO2v2]
  J[126] -= dqdci; // dwdot[CO2v2]/d[CO2v2]
  // d()/dT
  J[276] += dqdT; // dwdot[CO2]/dT
  J[279] -= dqdT; // dwdot[CO2v2]/dT

  // reaction 30: CO2 + CO2v2 => CO2 + CO2v1
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[7];
  k_f = 17460;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[6] += q; // CO2v1
  wdot[7] -= q; // CO2v2
  // d()/d[CO2]
  dqdci = +k_f * sc[7];
  J[74] += dqdci; // dwdot[CO2v1]/d[CO2]
  J[75] -= dqdci; // dwdot[CO2v2]/d[CO2]
  // d()/d[CO2v2]
  dqdci = +k_f * sc[4];
  J[125] += dqdci; // dwdot[CO2v1]/d[CO2v2]
  J[126] -= dqdci; // dwdot[CO2v2]/d[CO2v2]
  // d()/dT
  J[278] += dqdT; // dwdot[CO2v1]/dT
  J[279] -= dqdT; // dwdot[CO2v2]/dT

  // reaction 31: CO + CO2v2 => CO + CO2v1
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[7];
  k_f = 12220;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[6] += q; // CO2v1
  wdot[7] -= q; // CO2v2
  // d()/d[CO]
  dqdci = +k_f * sc[7];
  J[91] += dqdci; // dwdot[CO2v1]/d[CO]
  J[92] -= dqdci; // dwdot[CO2v2]/d[CO]
  // d()/d[CO2v2]
  dqdci = +k_f * sc[5];
  J[125] += dqdci; // dwdot[CO2v1]/d[CO2v2]
  J[126] -= dqdci; // dwdot[CO2v2]/d[CO2v2]
  // d()/dT
  J[278] += dqdT; // dwdot[CO2v1]/dT
  J[279] -= dqdT; // dwdot[CO2v2]/dT

  // reaction 32: CO2v2 + O2 => CO2v1 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[7];
  k_f = 12220;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[6] += q; // CO2v1
  wdot[7] -= q; // CO2v2
  // d()/d[O2]
  dqdci = +k_f * sc[7];
  J[40] += dqdci; // dwdot[CO2v1]/d[O2]
  J[41] -= dqdci; // dwdot[CO2v2]/d[O2]
  // d()/d[CO2v2]
  dqdci = +k_f * sc[2];
  J[125] += dqdci; // dwdot[CO2v1]/d[CO2v2]
  J[126] -= dqdci; // dwdot[CO2v2]/d[CO2v2]
  // d()/dT
  J[278] += dqdT; // dwdot[CO2v1]/dT
  J[279] -= dqdT; // dwdot[CO2v2]/dT

  // reaction 33: AR + CO2v2 => AR + CO2v1
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[7];
  k_f = 12220;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[6] += q; // CO2v1
  wdot[7] -= q; // CO2v2
  // d()/d[AR]
  dqdci = +k_f * sc[7];
  J[57] += dqdci; // dwdot[CO2v1]/d[AR]
  J[58] -= dqdci; // dwdot[CO2v2]/d[AR]
  // d()/d[CO2v2]
  dqdci = +k_f * sc[3];
  J[125] += dqdci; // dwdot[CO2v1]/d[CO2v2]
  J[126] -= dqdci; // dwdot[CO2v2]/d[CO2v2]
  // d()/dT
  J[278] += dqdT; // dwdot[CO2v1]/dT
  J[279] -= dqdT; // dwdot[CO2v2]/dT

  // reaction 34: CO2 + CO2v3 => CO2 + CO2v2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[8];
  k_f = 464.9;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[7] += q; // CO2v2
  wdot[8] -= q; // CO2v3
  // d()/d[CO2]
  dqdci = +k_f * sc[8];
  J[75] += dqdci; // dwdot[CO2v2]/d[CO2]
  J[76] -= dqdci; // dwdot[CO2v3]/d[CO2]
  // d()/d[CO2v3]
  dqdci = +k_f * sc[4];
  J[143] += dqdci; // dwdot[CO2v2]/d[CO2v3]
  J[144] -= dqdci; // dwdot[CO2v3]/d[CO2v3]
  // d()/dT
  J[279] += dqdT; // dwdot[CO2v2]/dT
  J[280] -= dqdT; // dwdot[CO2v3]/dT

  // reaction 35: CO + CO2v3 => CO + CO2v2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[8];
  k_f = 13.97;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[7] += q; // CO2v2
  wdot[8] -= q; // CO2v3
  // d()/d[CO]
  dqdci = +k_f * sc[8];
  J[92] += dqdci; // dwdot[CO2v2]/d[CO]
  J[93] -= dqdci; // dwdot[CO2v3]/d[CO]
  // d()/d[CO2v3]
  dqdci = +k_f * sc[5];
  J[143] += dqdci; // dwdot[CO2v2]/d[CO2v3]
  J[144] -= dqdci; // dwdot[CO2v3]/d[CO2v3]
  // d()/dT
  J[279] += dqdT; // dwdot[CO2v2]/dT
  J[280] -= dqdT; // dwdot[CO2v3]/dT

  // reaction 36: CO2v3 + O2 => CO2v2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[8];
  k_f = 186.1;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[7] += q; // CO2v2
  wdot[8] -= q; // CO2v3
  // d()/d[O2]
  dqdci = +k_f * sc[8];
  J[41] += dqdci; // dwdot[CO2v2]/d[O2]
  J[42] -= dqdci; // dwdot[CO2v3]/d[O2]
  // d()/d[CO2v3]
  dqdci = +k_f * sc[2];
  J[143] += dqdci; // dwdot[CO2v2]/d[CO2v3]
  J[144] -= dqdci; // dwdot[CO2v3]/d[CO2v3]
  // d()/dT
  J[279] += dqdT; // dwdot[CO2v2]/dT
  J[280] -= dqdT; // dwdot[CO2v3]/dT

  // reaction 37: AR + CO2v3 => AR + CO2v2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[8];
  k_f = 186.1;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[7] += q; // CO2v2
  wdot[8] -= q; // CO2v3
  // d()/d[AR]
  dqdci = +k_f * sc[8];
  J[58] += dqdci; // dwdot[CO2v2]/d[AR]
  J[59] -= dqdci; // dwdot[CO2v3]/d[AR]
  // d()/d[CO2v3]
  dqdci = +k_f * sc[3];
  J[143] += dqdci; // dwdot[CO2v2]/d[CO2v3]
  J[144] -= dqdci; // dwdot[CO2v3]/d[CO2v3]
  // d()/dT
  J[279] += dqdT; // dwdot[CO2v2]/dT
  J[280] -= dqdT; // dwdot[CO2v3]/dT

  // reaction 38: CO2 + CO2v3 => CO2 + CO2v4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[8];
  k_f = 3643;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[8] -= q; // CO2v3
  wdot[9] += q; // CO2v4
  // d()/d[CO2]
  dqdci = +k_f * sc[8];
  J[76] -= dqdci; // dwdot[CO2v3]/d[CO2]
  J[77] += dqdci; // dwdot[CO2v4]/d[CO2]
  // d()/d[CO2v3]
  dqdci = +k_f * sc[4];
  J[144] -= dqdci; // dwdot[CO2v3]/d[CO2v3]
  J[145] += dqdci; // dwdot[CO2v4]/d[CO2v3]
  // d()/dT
  J[280] -= dqdT; // dwdot[CO2v3]/dT
  J[281] += dqdT; // dwdot[CO2v4]/dT

  // reaction 39: CO + CO2v3 => CO + CO2v4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[8];
  k_f = 1090;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[8] -= q; // CO2v3
  wdot[9] += q; // CO2v4
  // d()/d[CO]
  dqdci = +k_f * sc[8];
  J[93] -= dqdci; // dwdot[CO2v3]/d[CO]
  J[94] += dqdci; // dwdot[CO2v4]/d[CO]
  // d()/d[CO2v3]
  dqdci = +k_f * sc[5];
  J[144] -= dqdci; // dwdot[CO2v3]/d[CO2v3]
  J[145] += dqdci; // dwdot[CO2v4]/d[CO2v3]
  // d()/dT
  J[280] -= dqdT; // dwdot[CO2v3]/dT
  J[281] += dqdT; // dwdot[CO2v4]/dT

  // reaction 40: CO2v3 + O2 => CO2v4 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[8];
  k_f = 1457;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[8] -= q; // CO2v3
  wdot[9] += q; // CO2v4
  // d()/d[O2]
  dqdci = +k_f * sc[8];
  J[42] -= dqdci; // dwdot[CO2v3]/d[O2]
  J[43] += dqdci; // dwdot[CO2v4]/d[O2]
  // d()/d[CO2v3]
  dqdci = +k_f * sc[2];
  J[144] -= dqdci; // dwdot[CO2v3]/d[CO2v3]
  J[145] += dqdci; // dwdot[CO2v4]/d[CO2v3]
  // d()/dT
  J[280] -= dqdT; // dwdot[CO2v3]/dT
  J[281] += dqdT; // dwdot[CO2v4]/dT

  // reaction 41: AR + CO2v3 => AR + CO2v4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[8];
  k_f = 1457;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[8] -= q; // CO2v3
  wdot[9] += q; // CO2v4
  // d()/d[AR]
  dqdci = +k_f * sc[8];
  J[59] -= dqdci; // dwdot[CO2v3]/d[AR]
  J[60] += dqdci; // dwdot[CO2v4]/d[AR]
  // d()/d[CO2v3]
  dqdci = +k_f * sc[3];
  J[144] -= dqdci; // dwdot[CO2v3]/d[CO2v3]
  J[145] += dqdci; // dwdot[CO2v4]/d[CO2v3]
  // d()/dT
  J[280] -= dqdT; // dwdot[CO2v3]/dT
  J[281] += dqdT; // dwdot[CO2v4]/dT

  // reaction 42: CO2 + CO2v3 => CO2v1 + CO2v2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[8];
  k_f = 1457;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] -= q; // CO2
  wdot[6] += q; // CO2v1
  wdot[7] += q; // CO2v2
  wdot[8] -= q; // CO2v3
  // d()/d[CO2]
  dqdci = +k_f * sc[8];
  J[72] -= dqdci; // dwdot[CO2]/d[CO2]
  J[74] += dqdci; // dwdot[CO2v1]/d[CO2]
  J[75] += dqdci; // dwdot[CO2v2]/d[CO2]
  J[76] -= dqdci; // dwdot[CO2v3]/d[CO2]
  // d()/d[CO2v3]
  dqdci = +k_f * sc[4];
  J[140] -= dqdci; // dwdot[CO2]/d[CO2v3]
  J[142] += dqdci; // dwdot[CO2v1]/d[CO2v3]
  J[143] += dqdci; // dwdot[CO2v2]/d[CO2v3]
  J[144] -= dqdci; // dwdot[CO2v3]/d[CO2v3]
  // d()/dT
  J[276] -= dqdT; // dwdot[CO2]/dT
  J[278] += dqdT; // dwdot[CO2v1]/dT
  J[279] += dqdT; // dwdot[CO2v2]/dT
  J[280] -= dqdT; // dwdot[CO2v3]/dT

  // reaction 43: CO2 + CO2v3 => CO2 + CO2v1
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[8];
  k_f = 1.024;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[6] += q; // CO2v1
  wdot[8] -= q; // CO2v3
  // d()/d[CO2]
  dqdci = +k_f * sc[8];
  J[74] += dqdci; // dwdot[CO2v1]/d[CO2]
  J[76] -= dqdci; // dwdot[CO2v3]/d[CO2]
  // d()/d[CO2v3]
  dqdci = +k_f * sc[4];
  J[142] += dqdci; // dwdot[CO2v1]/d[CO2v3]
  J[144] -= dqdci; // dwdot[CO2v3]/d[CO2v3]
  // d()/dT
  J[278] += dqdT; // dwdot[CO2v1]/dT
  J[280] -= dqdT; // dwdot[CO2v3]/dT

  // reaction 44: CO + CO2v3 => CO + CO2v1
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[8];
  k_f = 0.3071;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[6] += q; // CO2v1
  wdot[8] -= q; // CO2v3
  // d()/d[CO]
  dqdci = +k_f * sc[8];
  J[91] += dqdci; // dwdot[CO2v1]/d[CO]
  J[93] -= dqdci; // dwdot[CO2v3]/d[CO]
  // d()/d[CO2v3]
  dqdci = +k_f * sc[5];
  J[142] += dqdci; // dwdot[CO2v1]/d[CO2v3]
  J[144] -= dqdci; // dwdot[CO2v3]/d[CO2v3]
  // d()/dT
  J[278] += dqdT; // dwdot[CO2v1]/dT
  J[280] -= dqdT; // dwdot[CO2v3]/dT

  // reaction 45: CO2v3 + O2 => CO2v1 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[8];
  k_f = 0.4095;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[6] += q; // CO2v1
  wdot[8] -= q; // CO2v3
  // d()/d[O2]
  dqdci = +k_f * sc[8];
  J[40] += dqdci; // dwdot[CO2v1]/d[O2]
  J[42] -= dqdci; // dwdot[CO2v3]/d[O2]
  // d()/d[CO2v3]
  dqdci = +k_f * sc[2];
  J[142] += dqdci; // dwdot[CO2v1]/d[CO2v3]
  J[144] -= dqdci; // dwdot[CO2v3]/d[CO2v3]
  // d()/dT
  J[278] += dqdT; // dwdot[CO2v1]/dT
  J[280] -= dqdT; // dwdot[CO2v3]/dT

  // reaction 46: AR + CO2v3 => AR + CO2v1
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[8];
  k_f = 0.4095;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[6] += q; // CO2v1
  wdot[8] -= q; // CO2v3
  // d()/d[AR]
  dqdci = +k_f * sc[8];
  J[57] += dqdci; // dwdot[CO2v1]/d[AR]
  J[59] -= dqdci; // dwdot[CO2v3]/d[AR]
  // d()/d[CO2v3]
  dqdci = +k_f * sc[3];
  J[142] += dqdci; // dwdot[CO2v1]/d[CO2v3]
  J[144] -= dqdci; // dwdot[CO2v3]/d[CO2v3]
  // d()/dT
  J[278] += dqdT; // dwdot[CO2v1]/dT
  J[280] -= dqdT; // dwdot[CO2v3]/dT

  // reaction 47: CO2 + CO2v4 => CO2 + CO2v2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[9];
  k_f = 26080;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[7] += q; // CO2v2
  wdot[9] -= q; // CO2v4
  // d()/d[CO2]
  dqdci = +k_f * sc[9];
  J[75] += dqdci; // dwdot[CO2v2]/d[CO2]
  J[77] -= dqdci; // dwdot[CO2v4]/d[CO2]
  // d()/d[CO2v4]
  dqdci = +k_f * sc[4];
  J[160] += dqdci; // dwdot[CO2v2]/d[CO2v4]
  J[162] -= dqdci; // dwdot[CO2v4]/d[CO2v4]
  // d()/dT
  J[279] += dqdT; // dwdot[CO2v2]/dT
  J[281] -= dqdT; // dwdot[CO2v4]/dT

  // reaction 48: CO + CO2v4 => CO + CO2v2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[9];
  k_f = 18250;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[7] += q; // CO2v2
  wdot[9] -= q; // CO2v4
  // d()/d[CO]
  dqdci = +k_f * sc[9];
  J[92] += dqdci; // dwdot[CO2v2]/d[CO]
  J[94] -= dqdci; // dwdot[CO2v4]/d[CO]
  // d()/d[CO2v4]
  dqdci = +k_f * sc[5];
  J[160] += dqdci; // dwdot[CO2v2]/d[CO2v4]
  J[162] -= dqdci; // dwdot[CO2v4]/d[CO2v4]
  // d()/dT
  J[279] += dqdT; // dwdot[CO2v2]/dT
  J[281] -= dqdT; // dwdot[CO2v4]/dT

  // reaction 49: CO2v4 + O2 => CO2v2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[9];
  k_f = 18250;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[7] += q; // CO2v2
  wdot[9] -= q; // CO2v4
  // d()/d[O2]
  dqdci = +k_f * sc[9];
  J[41] += dqdci; // dwdot[CO2v2]/d[O2]
  J[43] -= dqdci; // dwdot[CO2v4]/d[O2]
  // d()/d[CO2v4]
  dqdci = +k_f * sc[2];
  J[160] += dqdci; // dwdot[CO2v2]/d[CO2v4]
  J[162] -= dqdci; // dwdot[CO2v4]/d[CO2v4]
  // d()/dT
  J[279] += dqdT; // dwdot[CO2v2]/dT
  J[281] -= dqdT; // dwdot[CO2v4]/dT

  // reaction 50: AR + CO2v4 => AR + CO2v2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[9];
  k_f = 18250;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[7] += q; // CO2v2
  wdot[9] -= q; // CO2v4
  // d()/d[AR]
  dqdci = +k_f * sc[9];
  J[58] += dqdci; // dwdot[CO2v2]/d[AR]
  J[60] -= dqdci; // dwdot[CO2v4]/d[AR]
  // d()/d[CO2v4]
  dqdci = +k_f * sc[3];
  J[160] += dqdci; // dwdot[CO2v2]/d[CO2v4]
  J[162] -= dqdci; // dwdot[CO2v4]/d[CO2v4]
  // d()/dT
  J[279] += dqdT; // dwdot[CO2v2]/dT
  J[281] -= dqdT; // dwdot[CO2v4]/dT

  // reaction 51: CO2 + CO2v4 => CO2 + CO2v1
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[9];
  k_f = 5.468;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[6] += q; // CO2v1
  wdot[9] -= q; // CO2v4
  // d()/d[CO2]
  dqdci = +k_f * sc[9];
  J[74] += dqdci; // dwdot[CO2v1]/d[CO2]
  J[77] -= dqdci; // dwdot[CO2v4]/d[CO2]
  // d()/d[CO2v4]
  dqdci = +k_f * sc[4];
  J[159] += dqdci; // dwdot[CO2v1]/d[CO2v4]
  J[162] -= dqdci; // dwdot[CO2v4]/d[CO2v4]
  // d()/dT
  J[278] += dqdT; // dwdot[CO2v1]/dT
  J[281] -= dqdT; // dwdot[CO2v4]/dT

  // reaction 52: CO + CO2v4 => CO + CO2v1
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[9];
  k_f = 3722;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[6] += q; // CO2v1
  wdot[9] -= q; // CO2v4
  // d()/d[CO]
  dqdci = +k_f * sc[9];
  J[91] += dqdci; // dwdot[CO2v1]/d[CO]
  J[94] -= dqdci; // dwdot[CO2v4]/d[CO]
  // d()/d[CO2v4]
  dqdci = +k_f * sc[5];
  J[159] += dqdci; // dwdot[CO2v1]/d[CO2v4]
  J[162] -= dqdci; // dwdot[CO2v4]/d[CO2v4]
  // d()/dT
  J[278] += dqdT; // dwdot[CO2v1]/dT
  J[281] -= dqdT; // dwdot[CO2v4]/dT

  // reaction 53: CO2v4 + O2 => CO2v1 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[9];
  k_f = 3722;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[6] += q; // CO2v1
  wdot[9] -= q; // CO2v4
  // d()/d[O2]
  dqdci = +k_f * sc[9];
  J[40] += dqdci; // dwdot[CO2v1]/d[O2]
  J[43] -= dqdci; // dwdot[CO2v4]/d[O2]
  // d()/d[CO2v4]
  dqdci = +k_f * sc[2];
  J[159] += dqdci; // dwdot[CO2v1]/d[CO2v4]
  J[162] -= dqdci; // dwdot[CO2v4]/d[CO2v4]
  // d()/dT
  J[278] += dqdT; // dwdot[CO2v1]/dT
  J[281] -= dqdT; // dwdot[CO2v4]/dT

  // reaction 54: AR + CO2v4 => AR + CO2v1
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[9];
  k_f = 3722;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[6] += q; // CO2v1
  wdot[9] -= q; // CO2v4
  // d()/d[AR]
  dqdci = +k_f * sc[9];
  J[57] += dqdci; // dwdot[CO2v1]/d[AR]
  J[60] -= dqdci; // dwdot[CO2v4]/d[AR]
  // d()/d[CO2v4]
  dqdci = +k_f * sc[3];
  J[159] += dqdci; // dwdot[CO2v1]/d[CO2v4]
  J[162] -= dqdci; // dwdot[CO2v4]/d[CO2v4]
  // d()/dT
  J[278] += dqdT; // dwdot[CO2v1]/dT
  J[281] -= dqdT; // dwdot[CO2v4]/dT

  // reaction 55: CO2 + Op => CO2p + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[12];
  k_f = 271000000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[1] += q;  // O
  wdot[4] -= q;  // CO2
  wdot[10] += q; // CO2p
  wdot[12] -= q; // Op
  // d()/d[CO2]
  dqdci = +k_f * sc[12];
  J[69] += dqdci; // dwdot[O]/d[CO2]
  J[72] -= dqdci; // dwdot[CO2]/d[CO2]
  J[78] += dqdci; // dwdot[CO2p]/d[CO2]
  J[80] -= dqdci; // dwdot[Op]/d[CO2]
  // d()/d[Op]
  dqdci = +k_f * sc[4];
  J[205] += dqdci; // dwdot[O]/d[Op]
  J[208] -= dqdci; // dwdot[CO2]/d[Op]
  J[214] += dqdci; // dwdot[CO2p]/d[Op]
  J[216] -= dqdci; // dwdot[Op]/d[Op]
  // d()/dT
  J[273] += dqdT; // dwdot[O]/dT
  J[276] -= dqdT; // dwdot[CO2]/dT
  J[282] += dqdT; // dwdot[CO2p]/dT
  J[284] -= dqdT; // dwdot[Op]/dT

  // reaction 56: CO2 + COp => CO + CO2p
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[13];
  k_f = 602200000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] -= q;  // CO2
  wdot[5] += q;  // CO
  wdot[10] += q; // CO2p
  wdot[13] -= q; // COp
  // d()/d[CO2]
  dqdci = +k_f * sc[13];
  J[72] -= dqdci; // dwdot[CO2]/d[CO2]
  J[73] += dqdci; // dwdot[CO]/d[CO2]
  J[78] += dqdci; // dwdot[CO2p]/d[CO2]
  J[81] -= dqdci; // dwdot[COp]/d[CO2]
  // d()/d[COp]
  dqdci = +k_f * sc[4];
  J[225] -= dqdci; // dwdot[CO2]/d[COp]
  J[226] += dqdci; // dwdot[CO]/d[COp]
  J[231] += dqdci; // dwdot[CO2p]/d[COp]
  J[234] -= dqdci; // dwdot[COp]/d[COp]
  // d()/dT
  J[276] -= dqdT; // dwdot[CO2]/dT
  J[277] += dqdT; // dwdot[CO]/dT
  J[282] += dqdT; // dwdot[CO2p]/dT
  J[285] -= dqdT; // dwdot[COp]/dT

  // reaction 57: CO + Op => COp + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[12];
  k_f = 0;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[1] += q;  // O
  wdot[5] -= q;  // CO
  wdot[12] -= q; // Op
  wdot[13] += q; // COp
  // d()/d[CO]
  dqdci = +k_f * sc[12];
  J[86] += dqdci; // dwdot[O]/d[CO]
  J[90] -= dqdci; // dwdot[CO]/d[CO]
  J[97] -= dqdci; // dwdot[Op]/d[CO]
  J[98] += dqdci; // dwdot[COp]/d[CO]
  // d()/d[Op]
  dqdci = +k_f * sc[5];
  J[205] += dqdci; // dwdot[O]/d[Op]
  J[209] -= dqdci; // dwdot[CO]/d[Op]
  J[216] -= dqdci; // dwdot[Op]/d[Op]
  J[217] += dqdci; // dwdot[COp]/d[Op]
  // d()/dT
  J[273] += dqdT; // dwdot[O]/dT
  J[277] -= dqdT; // dwdot[CO]/dT
  J[284] -= dqdT; // dwdot[Op]/dT
  J[285] += dqdT; // dwdot[COp]/dT

  // reaction 58: CO2p + O => CO2 + Op
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[10];
  k_f = 57930000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[1] -= q;  // O
  wdot[4] += q;  // CO2
  wdot[10] -= q; // CO2p
  wdot[12] += q; // Op
  // d()/d[O]
  dqdci = +k_f * sc[10];
  J[18] -= dqdci; // dwdot[O]/d[O]
  J[21] += dqdci; // dwdot[CO2]/d[O]
  J[27] -= dqdci; // dwdot[CO2p]/d[O]
  J[29] += dqdci; // dwdot[Op]/d[O]
  // d()/d[CO2p]
  dqdci = +k_f * sc[1];
  J[171] -= dqdci; // dwdot[O]/d[CO2p]
  J[174] += dqdci; // dwdot[CO2]/d[CO2p]
  J[180] -= dqdci; // dwdot[CO2p]/d[CO2p]
  J[182] += dqdci; // dwdot[Op]/d[CO2p]
  // d()/dT
  J[273] -= dqdT; // dwdot[O]/dT
  J[276] += dqdT; // dwdot[CO2]/dT
  J[282] -= dqdT; // dwdot[CO2p]/dT
  J[284] += dqdT; // dwdot[Op]/dT

  // reaction 59: CO + Om => CO2 + E
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[11];
  k_f = 331200000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] += q;  // E
  wdot[4] += q;  // CO2
  wdot[5] -= q;  // CO
  wdot[11] -= q; // Om
  // d()/d[CO]
  dqdci = +k_f * sc[11];
  J[85] += dqdci; // dwdot[E]/d[CO]
  J[89] += dqdci; // dwdot[CO2]/d[CO]
  J[90] -= dqdci; // dwdot[CO]/d[CO]
  J[96] -= dqdci; // dwdot[Om]/d[CO]
  // d()/d[Om]
  dqdci = +k_f * sc[5];
  J[187] += dqdci; // dwdot[E]/d[Om]
  J[191] += dqdci; // dwdot[CO2]/d[Om]
  J[192] -= dqdci; // dwdot[CO]/d[Om]
  J[198] -= dqdci; // dwdot[Om]/d[Om]
  // d()/dT
  J[272] += dqdT; // dwdot[E]/dT
  J[276] += dqdT; // dwdot[CO2]/dT
  J[277] -= dqdT; // dwdot[CO]/dT
  J[283] -= dqdT; // dwdot[Om]/dT

  // reaction 60: COp + O => CO + Op
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[13];
  k_f = 84310000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[1] -= q;  // O
  wdot[5] += q;  // CO
  wdot[12] += q; // Op
  wdot[13] -= q; // COp
  // d()/d[O]
  dqdci = +k_f * sc[13];
  J[18] -= dqdci; // dwdot[O]/d[O]
  J[22] += dqdci; // dwdot[CO]/d[O]
  J[29] += dqdci; // dwdot[Op]/d[O]
  J[30] -= dqdci; // dwdot[COp]/d[O]
  // d()/d[COp]
  dqdci = +k_f * sc[1];
  J[222] -= dqdci; // dwdot[O]/d[COp]
  J[226] += dqdci; // dwdot[CO]/d[COp]
  J[233] += dqdci; // dwdot[Op]/d[COp]
  J[234] -= dqdci; // dwdot[COp]/d[COp]
  // d()/dT
  J[273] -= dqdT; // dwdot[O]/dT
  J[277] += dqdT; // dwdot[CO]/dT
  J[284] += dqdT; // dwdot[Op]/dT
  J[285] -= dqdT; // dwdot[COp]/dT

  // reaction 61: O + Om => E + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[11];
  k_f = 138500000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] += q;  // E
  wdot[1] -= q;  // O
  wdot[2] += q;  // O2
  wdot[11] -= q; // Om
  // d()/d[O]
  dqdci = +k_f * sc[11];
  J[17] += dqdci; // dwdot[E]/d[O]
  J[18] -= dqdci; // dwdot[O]/d[O]
  J[19] += dqdci; // dwdot[O2]/d[O]
  J[28] -= dqdci; // dwdot[Om]/d[O]
  // d()/d[Om]
  dqdci = +k_f * sc[1];
  J[187] += dqdci; // dwdot[E]/d[Om]
  J[188] -= dqdci; // dwdot[O]/d[Om]
  J[189] += dqdci; // dwdot[O2]/d[Om]
  J[198] -= dqdci; // dwdot[Om]/d[Om]
  // d()/dT
  J[272] += dqdT; // dwdot[E]/dT
  J[273] -= dqdT; // dwdot[O]/dT
  J[274] += dqdT; // dwdot[O2]/dT
  J[283] -= dqdT; // dwdot[Om]/dT

  // reaction 62: Om + Op => 2 O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[12];
  k_f = 24090000000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[1] += 2 * q; // O
  wdot[11] -= q;    // Om
  wdot[12] -= q;    // Op
  // d()/d[Om]
  dqdci = +k_f * sc[12];
  J[188] += 2 * dqdci; // dwdot[O]/d[Om]
  J[198] -= dqdci;     // dwdot[Om]/d[Om]
  J[199] -= dqdci;     // dwdot[Op]/d[Om]
  // d()/d[Op]
  dqdci = +k_f * sc[11];
  J[205] += 2 * dqdci; // dwdot[O]/d[Op]
  J[215] -= dqdci;     // dwdot[Om]/d[Op]
  J[216] -= dqdci;     // dwdot[Op]/d[Op]
  // d()/dT
  J[273] += 2 * dqdT; // dwdot[O]/dT
  J[283] -= dqdT;     // dwdot[Om]/dT
  J[284] -= dqdT;     // dwdot[Op]/dT

  // reaction 64: CO2 + O => CO + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[4];
  k_f = 0;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[1] -= q; // O
  wdot[2] += q; // O2
  wdot[4] -= q; // CO2
  wdot[5] += q; // CO
  // d()/d[O]
  dqdci = +k_f * sc[4];
  J[18] -= dqdci; // dwdot[O]/d[O]
  J[19] += dqdci; // dwdot[O2]/d[O]
  J[21] -= dqdci; // dwdot[CO2]/d[O]
  J[22] += dqdci; // dwdot[CO]/d[O]
  // d()/d[CO2]
  dqdci = +k_f * sc[1];
  J[69] -= dqdci; // dwdot[O]/d[CO2]
  J[70] += dqdci; // dwdot[O2]/d[CO2]
  J[72] -= dqdci; // dwdot[CO2]/d[CO2]
  J[73] += dqdci; // dwdot[CO]/d[CO2]
  // d()/dT
  J[273] -= dqdT; // dwdot[O]/dT
  J[274] += dqdT; // dwdot[O2]/dT
  J[276] -= dqdT; // dwdot[CO2]/dT
  J[277] += dqdT; // dwdot[CO]/dT

  // reaction 66: CO + O2 => CO2 + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[5];
  k_f = 0;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[1] += q; // O
  wdot[2] -= q; // O2
  wdot[4] += q; // CO2
  wdot[5] -= q; // CO
  // d()/d[O2]
  dqdci = +k_f * sc[5];
  J[35] += dqdci; // dwdot[O]/d[O2]
  J[36] -= dqdci; // dwdot[O2]/d[O2]
  J[38] += dqdci; // dwdot[CO2]/d[O2]
  J[39] -= dqdci; // dwdot[CO]/d[O2]
  // d()/d[CO]
  dqdci = +k_f * sc[2];
  J[86] += dqdci; // dwdot[O]/d[CO]
  J[87] -= dqdci; // dwdot[O2]/d[CO]
  J[89] += dqdci; // dwdot[CO2]/d[CO]
  J[90] -= dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[273] += dqdT; // dwdot[O]/dT
  J[274] -= dqdT; // dwdot[O2]/dT
  J[276] += dqdT; // dwdot[CO2]/dT
  J[277] -= dqdT; // dwdot[CO]/dT

  amrex::Real c_R[16], dcRdT[16], e_RT[16];
  amrex::Real* eh_RT;
  if (consP == 1) {
    cp_R(c_R, tc);
    dcvpRdT(dcRdT, tc);
    eh_RT = &h_RT[0];
  } else {
    cv_R(c_R, tc);
    dcvpRdT(dcRdT, tc);
    speciesInternalEnergy(e_RT, tc);
    eh_RT = &e_RT[0];
  }

  amrex::Real cmix = 0.0, ehmix = 0.0, dcmixdT = 0.0, dehmixdT = 0.0;
  for (int k = 0; k < 16; ++k) {
    cmix += c_R[k] * sc[k];
    dcmixdT += dcRdT[k] * sc[k];
    ehmix += eh_RT[k] * wdot[k];
    dehmixdT += invT * (c_R[k] - eh_RT[k]) * wdot[k] + eh_RT[k] * J[272 + k];
  }

  amrex::Real cmixinv = 1.0 / cmix;
  amrex::Real tmp1 = ehmix * cmixinv;
  amrex::Real tmp3 = cmixinv * T;
  amrex::Real tmp2 = tmp1 * tmp3;
  amrex::Real dehmixdc;
  // dTdot/d[X]
  for (int k = 0; k < 16; ++k) {
    dehmixdc = 0.0;
    for (int m = 0; m < 16; ++m) {
      dehmixdc += eh_RT[m] * J[k * 17 + m];
    }
    J[k * 17 + 16] = tmp2 * c_R[k] - tmp3 * dehmixdc;
  }
  // dTdot/dT
  J[288] = -tmp1 + tmp2 * dcmixdT - tmp3 * dehmixdT;
#else
  amrex::Abort();
#endif
}

// compute the reaction Jacobian
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
DWDOT(
  amrex::Real* J,
  const amrex::Real* sc,
  const amrex::Real* Tp,
  const int* consP)
{
  amrex::Real c[16];

  for (int k = 0; k < 16; k++) {
    c[k] = 1.e6 * sc[k];
  }

  aJacobian(J, c, *Tp, *consP);

  // dwdot[k]/dT
  // dTdot/d[X]
  for (int k = 0; k < 16; k++) {
    J[272 + k] *= 1.e-6;
    J[k * 17 + 16] *= 1.e6;
  }
}

// Transport function declarations

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetLENIMC(int* LENIMC)
{
  *LENIMC = 65;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetLENRMC(int* LENRMC)
{
  *LENRMC = 5360;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetNO(int* NO)
{
  *NO = 4;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetKK(int* KK)
{
  *KK = 16;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetNLITE(int* NLITE)
{
  *NLITE = 1;
}

// Patm in ergs/cm3
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetPATM(amrex::Real* PATM)
{
  *PATM = 0.1013250000000000E+07;
}

// the molecular weights in g/mol
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetWT(amrex::Real* WT)
{
  WT[0] = 5.48579909E-04;
  WT[1] = 1.59990000E+01;
  WT[2] = 3.19980000E+01;
  WT[3] = 3.99500000E+01;
  WT[4] = 4.40090000E+01;
  WT[5] = 2.80100000E+01;
  WT[6] = 4.40090000E+01;
  WT[7] = 4.40090000E+01;
  WT[8] = 4.40090000E+01;
  WT[9] = 4.40090000E+01;
  WT[10] = 4.40084514E+01;
  WT[11] = 1.59995486E+01;
  WT[12] = 1.59984514E+01;
  WT[13] = 2.80094514E+01;
  WT[14] = 3.99500000E+01;
  WT[15] = 3.99494514E+01;
}

// the lennard-jones potential well depth eps/kb in K
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetEPS(amrex::Real* EPS)
{
  EPS[0] = 8.50000000E+02;
  EPS[1] = 8.00000000E+01;
  EPS[2] = 1.07400000E+02;
  EPS[3] = 1.36500000E+02;
  EPS[4] = 2.44000000E+02;
  EPS[5] = 9.81000000E+01;
  EPS[6] = 2.44000000E+02;
  EPS[7] = 2.44000000E+02;
  EPS[8] = 2.44000000E+02;
  EPS[9] = 2.44000000E+02;
  EPS[10] = 2.44000000E+02;
  EPS[11] = 8.00000000E+01;
  EPS[12] = 8.00000000E+01;
  EPS[13] = 9.81000000E+01;
  EPS[14] = 1.36500000E+02;
  EPS[15] = 1.36500000E+02;
}

// the lennard-jones collision diameter in Angstroms
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetSIG(amrex::Real* SIG)
{
  SIG[0] = 4.25000000E+02;
  SIG[1] = 2.75000000E+00;
  SIG[2] = 3.45800000E+00;
  SIG[3] = 3.33000000E+00;
  SIG[4] = 3.76300000E+00;
  SIG[5] = 3.65000000E+00;
  SIG[6] = 3.76300000E+00;
  SIG[7] = 3.76300000E+00;
  SIG[8] = 3.76300000E+00;
  SIG[9] = 3.76300000E+00;
  SIG[10] = 3.76300000E+00;
  SIG[11] = 2.75000000E+00;
  SIG[12] = 2.75000000E+00;
  SIG[13] = 3.65000000E+00;
  SIG[14] = 3.33000000E+00;
  SIG[15] = 3.33000000E+00;
}

// the dipole moment in Debye
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetDIP(amrex::Real* DIP)
{
  DIP[0] = 0.00000000E+00;
  DIP[1] = 0.00000000E+00;
  DIP[2] = 0.00000000E+00;
  DIP[3] = 0.00000000E+00;
  DIP[4] = 0.00000000E+00;
  DIP[5] = 0.00000000E+00;
  DIP[6] = 0.00000000E+00;
  DIP[7] = 0.00000000E+00;
  DIP[8] = 0.00000000E+00;
  DIP[9] = 0.00000000E+00;
  DIP[10] = 0.00000000E+00;
  DIP[11] = 0.00000000E+00;
  DIP[12] = 0.00000000E+00;
  DIP[13] = 0.00000000E+00;
  DIP[14] = 0.00000000E+00;
  DIP[15] = 0.00000000E+00;
}

// the polarizability in cubic Angstroms
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetPOL(amrex::Real* POL)
{
  POL[0] = 0.00000000E+00;
  POL[1] = 0.00000000E+00;
  POL[2] = 1.60000000E+00;
  POL[3] = 0.00000000E+00;
  POL[4] = 2.65000000E+00;
  POL[5] = 1.95000000E+00;
  POL[6] = 2.65000000E+00;
  POL[7] = 2.65000000E+00;
  POL[8] = 2.65000000E+00;
  POL[9] = 2.65000000E+00;
  POL[10] = 2.65000000E+00;
  POL[11] = 0.00000000E+00;
  POL[12] = 0.00000000E+00;
  POL[13] = 1.95000000E+00;
  POL[14] = 0.00000000E+00;
  POL[15] = 0.00000000E+00;
}

// the rotational relaxation collision number at 298 K
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetZROT(amrex::Real* ZROT)
{
  ZROT[0] = 1.00000000E+00;
  ZROT[1] = 0.00000000E+00;
  ZROT[2] = 3.80000000E+00;
  ZROT[3] = 0.00000000E+00;
  ZROT[4] = 2.10000000E+00;
  ZROT[5] = 1.80000000E+00;
  ZROT[6] = 2.10000000E+00;
  ZROT[7] = 2.10000000E+00;
  ZROT[8] = 2.10000000E+00;
  ZROT[9] = 2.10000000E+00;
  ZROT[10] = 2.10000000E+00;
  ZROT[11] = 0.00000000E+00;
  ZROT[12] = 0.00000000E+00;
  ZROT[13] = 1.80000000E+00;
  ZROT[14] = 0.00000000E+00;
  ZROT[15] = 0.00000000E+00;
}

// 0: monoatomic, 1: linear, 2: nonlinear
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetNLIN(int* NLIN)
{
  NLIN[0] = 0;
  NLIN[1] = 0;
  NLIN[2] = 1;
  NLIN[3] = 0;
  NLIN[4] = 1;
  NLIN[5] = 1;
  NLIN[6] = 1;
  NLIN[7] = 1;
  NLIN[8] = 1;
  NLIN[9] = 1;
  NLIN[10] = 1;
  NLIN[11] = 0;
  NLIN[12] = 0;
  NLIN[13] = 1;
  NLIN[14] = 0;
  NLIN[15] = 0;
}

// Poly fits for the viscosities, dim NO*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFETA(amrex::Real* COFETA)
{
  COFETA[0] = -2.18499525E+01;
  COFETA[1] = -3.03985219E+00;
  COFETA[2] = 6.46768575E-01;
  COFETA[3] = -3.43986573E-02;
  COFETA[4] = -1.48001711E+01;
  COFETA[5] = 1.79491990E+00;
  COFETA[6] = -1.54008440E-01;
  COFETA[7] = 6.86719439E-03;
  COFETA[8] = -1.68118998E+01;
  COFETA[9] = 2.52362554E+00;
  COFETA[10] = -2.49309128E-01;
  COFETA[11] = 1.10211025E-02;
  COFETA[12] = -1.86067352E+01;
  COFETA[13] = 3.27402596E+00;
  COFETA[14] = -3.45827972E-01;
  COFETA[15] = 1.51622680E-02;
  COFETA[16] = -2.36749638E+01;
  COFETA[17] = 4.99775518E+00;
  COFETA[18] = -5.52687718E-01;
  COFETA[19] = 2.34353338E-02;
  COFETA[20] = -1.63031343E+01;
  COFETA[21] = 2.26143219E+00;
  COFETA[22] = -2.15114671E-01;
  COFETA[23] = 9.53461976E-03;
  COFETA[24] = -2.36749638E+01;
  COFETA[25] = 4.99775518E+00;
  COFETA[26] = -5.52687718E-01;
  COFETA[27] = 2.34353338E-02;
  COFETA[28] = -2.36749638E+01;
  COFETA[29] = 4.99775518E+00;
  COFETA[30] = -5.52687718E-01;
  COFETA[31] = 2.34353338E-02;
  COFETA[32] = -2.36749638E+01;
  COFETA[33] = 4.99775518E+00;
  COFETA[34] = -5.52687718E-01;
  COFETA[35] = 2.34353338E-02;
  COFETA[36] = -2.36749638E+01;
  COFETA[37] = 4.99775518E+00;
  COFETA[38] = -5.52687718E-01;
  COFETA[39] = 2.34353338E-02;
  COFETA[40] = -2.36749700E+01;
  COFETA[41] = 4.99775518E+00;
  COFETA[42] = -5.52687718E-01;
  COFETA[43] = 2.34353338E-02;
  COFETA[44] = -1.48001540E+01;
  COFETA[45] = 1.79491990E+00;
  COFETA[46] = -1.54008440E-01;
  COFETA[47] = 6.86719439E-03;
  COFETA[48] = -1.48001882E+01;
  COFETA[49] = 1.79491990E+00;
  COFETA[50] = -1.54008440E-01;
  COFETA[51] = 6.86719439E-03;
  COFETA[52] = -1.63031441E+01;
  COFETA[53] = 2.26143219E+00;
  COFETA[54] = -2.15114671E-01;
  COFETA[55] = 9.53461976E-03;
  COFETA[56] = -1.86067352E+01;
  COFETA[57] = 3.27402596E+00;
  COFETA[58] = -3.45827972E-01;
  COFETA[59] = 1.51622680E-02;
  COFETA[60] = -1.86067421E+01;
  COFETA[61] = 3.27402596E+00;
  COFETA[62] = -3.45827972E-01;
  COFETA[63] = 1.51622680E-02;
}

// Poly fits for the conductivities, dim NO*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFLAM(amrex::Real* COFLAM)
{
  COFLAM[0] = 5.21607397E+00;
  COFLAM[1] = -3.03985219E+00;
  COFLAM[2] = 6.46768575E-01;
  COFLAM[3] = -3.43986573E-02;
  COFLAM[4] = 1.98515155E+00;
  COFLAM[5] = 1.79491990E+00;
  COFLAM[6] = -1.54008440E-01;
  COFLAM[7] = 6.86719439E-03;
  COFLAM[8] = -3.01283106E+00;
  COFLAM[9] = 3.37554996E+00;
  COFLAM[10] = -3.43353130E-01;
  COFLAM[11] = 1.51043449E-02;
  COFLAM[12] = -2.73651502E+00;
  COFLAM[13] = 3.27402596E+00;
  COFLAM[14] = -3.45827972E-01;
  COFLAM[15] = 1.51622680E-02;
  COFLAM[16] = -1.24047472E+01;
  COFLAM[17] = 6.34783072E+00;
  COFLAM[18] = -6.37857831E-01;
  COFLAM[19] = 2.37613806E-02;
  COFLAM[20] = 9.92460061E+00;
  COFLAM[21] = -2.28317864E+00;
  COFLAM[22] = 4.73113319E-01;
  COFLAM[23] = -2.40056449E-02;
  COFLAM[24] = -1.24047472E+01;
  COFLAM[25] = 6.34783072E+00;
  COFLAM[26] = -6.37857831E-01;
  COFLAM[27] = 2.37613806E-02;
  COFLAM[28] = -1.24047472E+01;
  COFLAM[29] = 6.34783072E+00;
  COFLAM[30] = -6.37857831E-01;
  COFLAM[31] = 2.37613806E-02;
  COFLAM[32] = -1.24047472E+01;
  COFLAM[33] = 6.34783072E+00;
  COFLAM[34] = -6.37857831E-01;
  COFLAM[35] = 2.37613806E-02;
  COFLAM[36] = -1.24047472E+01;
  COFLAM[37] = 6.34783072E+00;
  COFLAM[38] = -6.37857831E-01;
  COFLAM[39] = 2.37613806E-02;
  COFLAM[40] = -1.24047410E+01;
  COFLAM[41] = 6.34783072E+00;
  COFLAM[42] = -6.37857831E-01;
  COFLAM[43] = 2.37613806E-02;
  COFLAM[44] = 1.98513440E+00;
  COFLAM[45] = 1.79491990E+00;
  COFLAM[46] = -1.54008440E-01;
  COFLAM[47] = 6.86719439E-03;
  COFLAM[48] = 1.98516869E+00;
  COFLAM[49] = 1.79491990E+00;
  COFLAM[50] = -1.54008440E-01;
  COFLAM[51] = 6.86719439E-03;
  COFLAM[52] = 9.92461040E+00;
  COFLAM[53] = -2.28317864E+00;
  COFLAM[54] = 4.73113319E-01;
  COFLAM[55] = -2.40056449E-02;
  COFLAM[56] = -2.73651502E+00;
  COFLAM[57] = 3.27402596E+00;
  COFLAM[58] = -3.45827972E-01;
  COFLAM[59] = 1.51622680E-02;
  COFLAM[60] = -2.73650816E+00;
  COFLAM[61] = 3.27402596E+00;
  COFLAM[62] = -3.45827972E-01;
  COFLAM[63] = 1.51622680E-02;
}

// Poly fits for the diffusion coefficients, dim NO*KK*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFD(amrex::Real* COFD)
{
  COFD[0] = -1.47803548E+01;
  COFD[1] = 1.70835496E-01;
  COFD[2] = 3.31563490E-01;
  COFD[3] = -1.95427081E-02;
  COFD[4] = -2.42503398E+01;
  COFD[5] = 5.40793558E+00;
  COFD[6] = -4.67888803E-01;
  COFD[7] = 1.95062704E-02;
  COFD[8] = -2.47604202E+01;
  COFD[9] = 5.51868821E+00;
  COFD[10] = -4.73225401E-01;
  COFD[11] = 1.93849523E-02;
  COFD[12] = -2.49944590E+01;
  COFD[13] = 5.52779193E+00;
  COFD[14] = -4.65764754E-01;
  COFD[15] = 1.87288224E-02;
  COFD[16] = -2.38843968E+01;
  COFD[17] = 4.82941387E+00;
  COFD[18] = -3.46543093E-01;
  COFD[19] = 1.24648862E-02;
  COFD[20] = -2.46791388E+01;
  COFD[21] = 5.51562323E+00;
  COFD[22] = -4.75876136E-01;
  COFD[23] = 1.96184735E-02;
  COFD[24] = -2.38843968E+01;
  COFD[25] = 4.82941387E+00;
  COFD[26] = -3.46543093E-01;
  COFD[27] = 1.24648862E-02;
  COFD[28] = -2.38843968E+01;
  COFD[29] = 4.82941387E+00;
  COFD[30] = -3.46543093E-01;
  COFD[31] = 1.24648862E-02;
  COFD[32] = -2.38843968E+01;
  COFD[33] = 4.82941387E+00;
  COFD[34] = -3.46543093E-01;
  COFD[35] = 1.24648862E-02;
  COFD[36] = -2.38843968E+01;
  COFD[37] = 4.82941387E+00;
  COFD[38] = -3.46543093E-01;
  COFD[39] = 1.24648862E-02;
  COFD[40] = -2.38843968E+01;
  COFD[41] = 4.82941387E+00;
  COFD[42] = -3.46543093E-01;
  COFD[43] = 1.24648862E-02;
  COFD[44] = -2.42503398E+01;
  COFD[45] = 5.40793558E+00;
  COFD[46] = -4.67888803E-01;
  COFD[47] = 1.95062704E-02;
  COFD[48] = -2.42503398E+01;
  COFD[49] = 5.40793558E+00;
  COFD[50] = -4.67888803E-01;
  COFD[51] = 1.95062704E-02;
  COFD[52] = -2.46791388E+01;
  COFD[53] = 5.51562323E+00;
  COFD[54] = -4.75876136E-01;
  COFD[55] = 1.96184735E-02;
  COFD[56] = -2.49944590E+01;
  COFD[57] = 5.52779193E+00;
  COFD[58] = -4.65764754E-01;
  COFD[59] = 1.87288224E-02;
  COFD[60] = -2.49944590E+01;
  COFD[61] = 5.52779193E+00;
  COFD[62] = -4.65764754E-01;
  COFD[63] = 1.87288224E-02;
  COFD[64] = -2.42503398E+01;
  COFD[65] = 5.40793558E+00;
  COFD[66] = -4.67888803E-01;
  COFD[67] = 1.95062704E-02;
  COFD[68] = -1.29877255E+01;
  COFD[69] = 2.80841511E+00;
  COFD[70] = -1.52629888E-01;
  COFD[71] = 6.72604927E-03;
  COFD[72] = -1.40864784E+01;
  COFD[73] = 3.07458927E+00;
  COFD[74] = -1.86899591E-01;
  COFD[75] = 8.19829781E-03;
  COFD[76] = -1.47082519E+01;
  COFD[77] = 3.30683499E+00;
  COFD[78] = -2.16378602E-01;
  COFD[79] = 9.44670561E-03;
  COFD[80] = -1.67115471E+01;
  COFD[81] = 3.98859394E+00;
  COFD[82] = -3.02316219E-01;
  COFD[83] = 1.30661099E-02;
  COFD[84] = -1.39007309E+01;
  COFD[85] = 2.99164244E+00;
  COFD[86] = -1.76293106E-01;
  COFD[87] = 7.74575100E-03;
  COFD[88] = -1.67115471E+01;
  COFD[89] = 3.98859394E+00;
  COFD[90] = -3.02316219E-01;
  COFD[91] = 1.30661099E-02;
  COFD[92] = -1.67115471E+01;
  COFD[93] = 3.98859394E+00;
  COFD[94] = -3.02316219E-01;
  COFD[95] = 1.30661099E-02;
  COFD[96] = -1.67115471E+01;
  COFD[97] = 3.98859394E+00;
  COFD[98] = -3.02316219E-01;
  COFD[99] = 1.30661099E-02;
  COFD[100] = -1.67115471E+01;
  COFD[101] = 3.98859394E+00;
  COFD[102] = -3.02316219E-01;
  COFD[103] = 1.30661099E-02;
  COFD[104] = -1.67115454E+01;
  COFD[105] = 3.98859394E+00;
  COFD[106] = -3.02316219E-01;
  COFD[107] = 1.30661099E-02;
  COFD[108] = -1.29877340E+01;
  COFD[109] = 2.80841511E+00;
  COFD[110] = -1.52629888E-01;
  COFD[111] = 6.72604927E-03;
  COFD[112] = -1.29877169E+01;
  COFD[113] = 2.80841511E+00;
  COFD[114] = -1.52629888E-01;
  COFD[115] = 6.72604927E-03;
  COFD[116] = -1.39007273E+01;
  COFD[117] = 2.99164244E+00;
  COFD[118] = -1.76293106E-01;
  COFD[119] = 7.74575100E-03;
  COFD[120] = -1.47082519E+01;
  COFD[121] = 3.30683499E+00;
  COFD[122] = -2.16378602E-01;
  COFD[123] = 9.44670561E-03;
  COFD[124] = -1.47082500E+01;
  COFD[125] = 3.30683499E+00;
  COFD[126] = -2.16378602E-01;
  COFD[127] = 9.44670561E-03;
  COFD[128] = -2.47604202E+01;
  COFD[129] = 5.51868821E+00;
  COFD[130] = -4.73225401E-01;
  COFD[131] = 1.93849523E-02;
  COFD[132] = -1.40864784E+01;
  COFD[133] = 3.07458927E+00;
  COFD[134] = -1.86899591E-01;
  COFD[135] = 8.19829781E-03;
  COFD[136] = -1.53110597E+01;
  COFD[137] = 3.37317428E+00;
  COFD[138] = -2.24900439E-01;
  COFD[139] = 9.81228151E-03;
  COFD[140] = -1.59592241E+01;
  COFD[141] = 3.60186887E+00;
  COFD[142] = -2.53302622E-01;
  COFD[143] = 1.09893496E-02;
  COFD[144] = -1.81197250E+01;
  COFD[145] = 4.33684042E+00;
  COFD[146] = -3.44981265E-01;
  COFD[147] = 1.48142449E-02;
  COFD[148] = -1.50371688E+01;
  COFD[149] = 3.26249588E+00;
  COFD[150] = -2.10658287E-01;
  COFD[151] = 9.20032462E-03;
  COFD[152] = -1.81197250E+01;
  COFD[153] = 4.33684042E+00;
  COFD[154] = -3.44981265E-01;
  COFD[155] = 1.48142449E-02;
  COFD[156] = -1.81197250E+01;
  COFD[157] = 4.33684042E+00;
  COFD[158] = -3.44981265E-01;
  COFD[159] = 1.48142449E-02;
  COFD[160] = -1.81197250E+01;
  COFD[161] = 4.33684042E+00;
  COFD[162] = -3.44981265E-01;
  COFD[163] = 1.48142449E-02;
  COFD[164] = -1.81197250E+01;
  COFD[165] = 4.33684042E+00;
  COFD[166] = -3.44981265E-01;
  COFD[167] = 1.48142449E-02;
  COFD[168] = -1.81197224E+01;
  COFD[169] = 4.33684042E+00;
  COFD[170] = -3.44981265E-01;
  COFD[171] = 1.48142449E-02;
  COFD[172] = -1.40864898E+01;
  COFD[173] = 3.07458927E+00;
  COFD[174] = -1.86899591E-01;
  COFD[175] = 8.19829781E-03;
  COFD[176] = -1.40864669E+01;
  COFD[177] = 3.07458927E+00;
  COFD[178] = -1.86899591E-01;
  COFD[179] = 8.19829781E-03;
  COFD[180] = -1.50371635E+01;
  COFD[181] = 3.26249588E+00;
  COFD[182] = -2.10658287E-01;
  COFD[183] = 9.20032462E-03;
  COFD[184] = -1.59592241E+01;
  COFD[185] = 3.60186887E+00;
  COFD[186] = -2.53302622E-01;
  COFD[187] = 1.09893496E-02;
  COFD[188] = -1.59592210E+01;
  COFD[189] = 3.60186887E+00;
  COFD[190] = -2.53302622E-01;
  COFD[191] = 1.09893496E-02;
  COFD[192] = -2.49944590E+01;
  COFD[193] = 5.52779193E+00;
  COFD[194] = -4.65764754E-01;
  COFD[195] = 1.87288224E-02;
  COFD[196] = -1.47082519E+01;
  COFD[197] = 3.30683499E+00;
  COFD[198] = -2.16378602E-01;
  COFD[199] = 9.44670561E-03;
  COFD[200] = -1.59592241E+01;
  COFD[201] = 3.60186887E+00;
  COFD[202] = -2.53302622E-01;
  COFD[203] = 1.09893496E-02;
  COFD[204] = -1.68944987E+01;
  COFD[205] = 3.94346012E+00;
  COFD[206] = -2.96835271E-01;
  COFD[207] = 1.28438696E-02;
  COFD[208] = -1.90183604E+01;
  COFD[209] = 4.64763677E+00;
  COFD[210] = -3.82799418E-01;
  COFD[211] = 1.63539171E-02;
  COFD[212] = -1.57440492E+01;
  COFD[213] = 3.51861272E+00;
  COFD[214] = -2.43068621E-01;
  COFD[215] = 1.05698368E-02;
  COFD[216] = -1.90183604E+01;
  COFD[217] = 4.64763677E+00;
  COFD[218] = -3.82799418E-01;
  COFD[219] = 1.63539171E-02;
  COFD[220] = -1.90183604E+01;
  COFD[221] = 4.64763677E+00;
  COFD[222] = -3.82799418E-01;
  COFD[223] = 1.63539171E-02;
  COFD[224] = -1.90183604E+01;
  COFD[225] = 4.64763677E+00;
  COFD[226] = -3.82799418E-01;
  COFD[227] = 1.63539171E-02;
  COFD[228] = -1.90183604E+01;
  COFD[229] = 4.64763677E+00;
  COFD[230] = -3.82799418E-01;
  COFD[231] = 1.63539171E-02;
  COFD[232] = -1.90183574E+01;
  COFD[233] = 4.64763677E+00;
  COFD[234] = -3.82799418E-01;
  COFD[235] = 1.63539171E-02;
  COFD[236] = -1.47082642E+01;
  COFD[237] = 3.30683499E+00;
  COFD[238] = -2.16378602E-01;
  COFD[239] = 9.44670561E-03;
  COFD[240] = -1.47082397E+01;
  COFD[241] = 3.30683499E+00;
  COFD[242] = -2.16378602E-01;
  COFD[243] = 9.44670561E-03;
  COFD[244] = -1.57440435E+01;
  COFD[245] = 3.51861272E+00;
  COFD[246] = -2.43068621E-01;
  COFD[247] = 1.05698368E-02;
  COFD[248] = -1.68944987E+01;
  COFD[249] = 3.94346012E+00;
  COFD[250] = -2.96835271E-01;
  COFD[251] = 1.28438696E-02;
  COFD[252] = -1.68944953E+01;
  COFD[253] = 3.94346012E+00;
  COFD[254] = -2.96835271E-01;
  COFD[255] = 1.28438696E-02;
  COFD[256] = -2.38843968E+01;
  COFD[257] = 4.82941387E+00;
  COFD[258] = -3.46543093E-01;
  COFD[259] = 1.24648862E-02;
  COFD[260] = -1.67115471E+01;
  COFD[261] = 3.98859394E+00;
  COFD[262] = -3.02316219E-01;
  COFD[263] = 1.30661099E-02;
  COFD[264] = -1.81197250E+01;
  COFD[265] = 4.33684042E+00;
  COFD[266] = -3.44981265E-01;
  COFD[267] = 1.48142449E-02;
  COFD[268] = -1.90183604E+01;
  COFD[269] = 4.64763677E+00;
  COFD[270] = -3.82799418E-01;
  COFD[271] = 1.63539171E-02;
  COFD[272] = -2.10907633E+01;
  COFD[273] = 5.29211327E+00;
  COFD[274] = -4.56068366E-01;
  COFD[275] = 1.91195062E-02;
  COFD[276] = -1.77672912E+01;
  COFD[277] = 4.20234040E+00;
  COFD[278] = -3.28057658E-01;
  COFD[279] = 1.41006192E-02;
  COFD[280] = -2.10907633E+01;
  COFD[281] = 5.29211327E+00;
  COFD[282] = -4.56068366E-01;
  COFD[283] = 1.91195062E-02;
  COFD[284] = -2.10907633E+01;
  COFD[285] = 5.29211327E+00;
  COFD[286] = -4.56068366E-01;
  COFD[287] = 1.91195062E-02;
  COFD[288] = -2.10907633E+01;
  COFD[289] = 5.29211327E+00;
  COFD[290] = -4.56068366E-01;
  COFD[291] = 1.91195062E-02;
  COFD[292] = -2.10907633E+01;
  COFD[293] = 5.29211327E+00;
  COFD[294] = -4.56068366E-01;
  COFD[295] = 1.91195062E-02;
  COFD[296] = -2.10907602E+01;
  COFD[297] = 5.29211327E+00;
  COFD[298] = -4.56068366E-01;
  COFD[299] = 1.91195062E-02;
  COFD[300] = -1.67115597E+01;
  COFD[301] = 3.98859394E+00;
  COFD[302] = -3.02316219E-01;
  COFD[303] = 1.30661099E-02;
  COFD[304] = -1.67115345E+01;
  COFD[305] = 3.98859394E+00;
  COFD[306] = -3.02316219E-01;
  COFD[307] = 1.30661099E-02;
  COFD[308] = -1.77672852E+01;
  COFD[309] = 4.20234040E+00;
  COFD[310] = -3.28057658E-01;
  COFD[311] = 1.41006192E-02;
  COFD[312] = -1.90183604E+01;
  COFD[313] = 4.64763677E+00;
  COFD[314] = -3.82799418E-01;
  COFD[315] = 1.63539171E-02;
  COFD[316] = -1.90183568E+01;
  COFD[317] = 4.64763677E+00;
  COFD[318] = -3.82799418E-01;
  COFD[319] = 1.63539171E-02;
  COFD[320] = -2.46791388E+01;
  COFD[321] = 5.51562323E+00;
  COFD[322] = -4.75876136E-01;
  COFD[323] = 1.96184735E-02;
  COFD[324] = -1.39007309E+01;
  COFD[325] = 2.99164244E+00;
  COFD[326] = -1.76293106E-01;
  COFD[327] = 7.74575100E-03;
  COFD[328] = -1.50371688E+01;
  COFD[329] = 3.26249588E+00;
  COFD[330] = -2.10658287E-01;
  COFD[331] = 9.20032462E-03;
  COFD[332] = -1.57440492E+01;
  COFD[333] = 3.51861272E+00;
  COFD[334] = -2.43068621E-01;
  COFD[335] = 1.05698368E-02;
  COFD[336] = -1.77672912E+01;
  COFD[337] = 4.20234040E+00;
  COFD[338] = -3.28057658E-01;
  COFD[339] = 1.41006192E-02;
  COFD[340] = -1.48061406E+01;
  COFD[341] = 3.16912473E+00;
  COFD[342] = -1.98792456E-01;
  COFD[343] = 8.69726395E-03;
  COFD[344] = -1.77672912E+01;
  COFD[345] = 4.20234040E+00;
  COFD[346] = -3.28057658E-01;
  COFD[347] = 1.41006192E-02;
  COFD[348] = -1.77672912E+01;
  COFD[349] = 4.20234040E+00;
  COFD[350] = -3.28057658E-01;
  COFD[351] = 1.41006192E-02;
  COFD[352] = -1.77672912E+01;
  COFD[353] = 4.20234040E+00;
  COFD[354] = -3.28057658E-01;
  COFD[355] = 1.41006192E-02;
  COFD[356] = -1.77672912E+01;
  COFD[357] = 4.20234040E+00;
  COFD[358] = -3.28057658E-01;
  COFD[359] = 1.41006192E-02;
  COFD[360] = -1.77672888E+01;
  COFD[361] = 4.20234040E+00;
  COFD[362] = -3.28057658E-01;
  COFD[363] = 1.41006192E-02;
  COFD[364] = -1.39007418E+01;
  COFD[365] = 2.99164244E+00;
  COFD[366] = -1.76293106E-01;
  COFD[367] = 7.74575100E-03;
  COFD[368] = -1.39007200E+01;
  COFD[369] = 2.99164244E+00;
  COFD[370] = -1.76293106E-01;
  COFD[371] = 7.74575100E-03;
  COFD[372] = -1.48061357E+01;
  COFD[373] = 3.16912473E+00;
  COFD[374] = -1.98792456E-01;
  COFD[375] = 8.69726395E-03;
  COFD[376] = -1.57440492E+01;
  COFD[377] = 3.51861272E+00;
  COFD[378] = -2.43068621E-01;
  COFD[379] = 1.05698368E-02;
  COFD[380] = -1.57440464E+01;
  COFD[381] = 3.51861272E+00;
  COFD[382] = -2.43068621E-01;
  COFD[383] = 1.05698368E-02;
  COFD[384] = -2.38843968E+01;
  COFD[385] = 4.82941387E+00;
  COFD[386] = -3.46543093E-01;
  COFD[387] = 1.24648862E-02;
  COFD[388] = -1.67115471E+01;
  COFD[389] = 3.98859394E+00;
  COFD[390] = -3.02316219E-01;
  COFD[391] = 1.30661099E-02;
  COFD[392] = -1.81197250E+01;
  COFD[393] = 4.33684042E+00;
  COFD[394] = -3.44981265E-01;
  COFD[395] = 1.48142449E-02;
  COFD[396] = -1.90183604E+01;
  COFD[397] = 4.64763677E+00;
  COFD[398] = -3.82799418E-01;
  COFD[399] = 1.63539171E-02;
  COFD[400] = -2.10907633E+01;
  COFD[401] = 5.29211327E+00;
  COFD[402] = -4.56068366E-01;
  COFD[403] = 1.91195062E-02;
  COFD[404] = -1.77672912E+01;
  COFD[405] = 4.20234040E+00;
  COFD[406] = -3.28057658E-01;
  COFD[407] = 1.41006192E-02;
  COFD[408] = -2.10907633E+01;
  COFD[409] = 5.29211327E+00;
  COFD[410] = -4.56068366E-01;
  COFD[411] = 1.91195062E-02;
  COFD[412] = -2.10907633E+01;
  COFD[413] = 5.29211327E+00;
  COFD[414] = -4.56068366E-01;
  COFD[415] = 1.91195062E-02;
  COFD[416] = -2.10907633E+01;
  COFD[417] = 5.29211327E+00;
  COFD[418] = -4.56068366E-01;
  COFD[419] = 1.91195062E-02;
  COFD[420] = -2.10907633E+01;
  COFD[421] = 5.29211327E+00;
  COFD[422] = -4.56068366E-01;
  COFD[423] = 1.91195062E-02;
  COFD[424] = -2.10907602E+01;
  COFD[425] = 5.29211327E+00;
  COFD[426] = -4.56068366E-01;
  COFD[427] = 1.91195062E-02;
  COFD[428] = -1.67115597E+01;
  COFD[429] = 3.98859394E+00;
  COFD[430] = -3.02316219E-01;
  COFD[431] = 1.30661099E-02;
  COFD[432] = -1.67115345E+01;
  COFD[433] = 3.98859394E+00;
  COFD[434] = -3.02316219E-01;
  COFD[435] = 1.30661099E-02;
  COFD[436] = -1.77672852E+01;
  COFD[437] = 4.20234040E+00;
  COFD[438] = -3.28057658E-01;
  COFD[439] = 1.41006192E-02;
  COFD[440] = -1.90183604E+01;
  COFD[441] = 4.64763677E+00;
  COFD[442] = -3.82799418E-01;
  COFD[443] = 1.63539171E-02;
  COFD[444] = -1.90183568E+01;
  COFD[445] = 4.64763677E+00;
  COFD[446] = -3.82799418E-01;
  COFD[447] = 1.63539171E-02;
  COFD[448] = -2.38843968E+01;
  COFD[449] = 4.82941387E+00;
  COFD[450] = -3.46543093E-01;
  COFD[451] = 1.24648862E-02;
  COFD[452] = -1.67115471E+01;
  COFD[453] = 3.98859394E+00;
  COFD[454] = -3.02316219E-01;
  COFD[455] = 1.30661099E-02;
  COFD[456] = -1.81197250E+01;
  COFD[457] = 4.33684042E+00;
  COFD[458] = -3.44981265E-01;
  COFD[459] = 1.48142449E-02;
  COFD[460] = -1.90183604E+01;
  COFD[461] = 4.64763677E+00;
  COFD[462] = -3.82799418E-01;
  COFD[463] = 1.63539171E-02;
  COFD[464] = -2.10907633E+01;
  COFD[465] = 5.29211327E+00;
  COFD[466] = -4.56068366E-01;
  COFD[467] = 1.91195062E-02;
  COFD[468] = -1.77672912E+01;
  COFD[469] = 4.20234040E+00;
  COFD[470] = -3.28057658E-01;
  COFD[471] = 1.41006192E-02;
  COFD[472] = -2.10907633E+01;
  COFD[473] = 5.29211327E+00;
  COFD[474] = -4.56068366E-01;
  COFD[475] = 1.91195062E-02;
  COFD[476] = -2.10907633E+01;
  COFD[477] = 5.29211327E+00;
  COFD[478] = -4.56068366E-01;
  COFD[479] = 1.91195062E-02;
  COFD[480] = -2.10907633E+01;
  COFD[481] = 5.29211327E+00;
  COFD[482] = -4.56068366E-01;
  COFD[483] = 1.91195062E-02;
  COFD[484] = -2.10907633E+01;
  COFD[485] = 5.29211327E+00;
  COFD[486] = -4.56068366E-01;
  COFD[487] = 1.91195062E-02;
  COFD[488] = -2.10907602E+01;
  COFD[489] = 5.29211327E+00;
  COFD[490] = -4.56068366E-01;
  COFD[491] = 1.91195062E-02;
  COFD[492] = -1.67115597E+01;
  COFD[493] = 3.98859394E+00;
  COFD[494] = -3.02316219E-01;
  COFD[495] = 1.30661099E-02;
  COFD[496] = -1.67115345E+01;
  COFD[497] = 3.98859394E+00;
  COFD[498] = -3.02316219E-01;
  COFD[499] = 1.30661099E-02;
  COFD[500] = -1.77672852E+01;
  COFD[501] = 4.20234040E+00;
  COFD[502] = -3.28057658E-01;
  COFD[503] = 1.41006192E-02;
  COFD[504] = -1.90183604E+01;
  COFD[505] = 4.64763677E+00;
  COFD[506] = -3.82799418E-01;
  COFD[507] = 1.63539171E-02;
  COFD[508] = -1.90183568E+01;
  COFD[509] = 4.64763677E+00;
  COFD[510] = -3.82799418E-01;
  COFD[511] = 1.63539171E-02;
  COFD[512] = -2.38843968E+01;
  COFD[513] = 4.82941387E+00;
  COFD[514] = -3.46543093E-01;
  COFD[515] = 1.24648862E-02;
  COFD[516] = -1.67115471E+01;
  COFD[517] = 3.98859394E+00;
  COFD[518] = -3.02316219E-01;
  COFD[519] = 1.30661099E-02;
  COFD[520] = -1.81197250E+01;
  COFD[521] = 4.33684042E+00;
  COFD[522] = -3.44981265E-01;
  COFD[523] = 1.48142449E-02;
  COFD[524] = -1.90183604E+01;
  COFD[525] = 4.64763677E+00;
  COFD[526] = -3.82799418E-01;
  COFD[527] = 1.63539171E-02;
  COFD[528] = -2.10907633E+01;
  COFD[529] = 5.29211327E+00;
  COFD[530] = -4.56068366E-01;
  COFD[531] = 1.91195062E-02;
  COFD[532] = -1.77672912E+01;
  COFD[533] = 4.20234040E+00;
  COFD[534] = -3.28057658E-01;
  COFD[535] = 1.41006192E-02;
  COFD[536] = -2.10907633E+01;
  COFD[537] = 5.29211327E+00;
  COFD[538] = -4.56068366E-01;
  COFD[539] = 1.91195062E-02;
  COFD[540] = -2.10907633E+01;
  COFD[541] = 5.29211327E+00;
  COFD[542] = -4.56068366E-01;
  COFD[543] = 1.91195062E-02;
  COFD[544] = -2.10907633E+01;
  COFD[545] = 5.29211327E+00;
  COFD[546] = -4.56068366E-01;
  COFD[547] = 1.91195062E-02;
  COFD[548] = -2.10907633E+01;
  COFD[549] = 5.29211327E+00;
  COFD[550] = -4.56068366E-01;
  COFD[551] = 1.91195062E-02;
  COFD[552] = -2.10907602E+01;
  COFD[553] = 5.29211327E+00;
  COFD[554] = -4.56068366E-01;
  COFD[555] = 1.91195062E-02;
  COFD[556] = -1.67115597E+01;
  COFD[557] = 3.98859394E+00;
  COFD[558] = -3.02316219E-01;
  COFD[559] = 1.30661099E-02;
  COFD[560] = -1.67115345E+01;
  COFD[561] = 3.98859394E+00;
  COFD[562] = -3.02316219E-01;
  COFD[563] = 1.30661099E-02;
  COFD[564] = -1.77672852E+01;
  COFD[565] = 4.20234040E+00;
  COFD[566] = -3.28057658E-01;
  COFD[567] = 1.41006192E-02;
  COFD[568] = -1.90183604E+01;
  COFD[569] = 4.64763677E+00;
  COFD[570] = -3.82799418E-01;
  COFD[571] = 1.63539171E-02;
  COFD[572] = -1.90183568E+01;
  COFD[573] = 4.64763677E+00;
  COFD[574] = -3.82799418E-01;
  COFD[575] = 1.63539171E-02;
  COFD[576] = -2.38843968E+01;
  COFD[577] = 4.82941387E+00;
  COFD[578] = -3.46543093E-01;
  COFD[579] = 1.24648862E-02;
  COFD[580] = -1.67115471E+01;
  COFD[581] = 3.98859394E+00;
  COFD[582] = -3.02316219E-01;
  COFD[583] = 1.30661099E-02;
  COFD[584] = -1.81197250E+01;
  COFD[585] = 4.33684042E+00;
  COFD[586] = -3.44981265E-01;
  COFD[587] = 1.48142449E-02;
  COFD[588] = -1.90183604E+01;
  COFD[589] = 4.64763677E+00;
  COFD[590] = -3.82799418E-01;
  COFD[591] = 1.63539171E-02;
  COFD[592] = -2.10907633E+01;
  COFD[593] = 5.29211327E+00;
  COFD[594] = -4.56068366E-01;
  COFD[595] = 1.91195062E-02;
  COFD[596] = -1.77672912E+01;
  COFD[597] = 4.20234040E+00;
  COFD[598] = -3.28057658E-01;
  COFD[599] = 1.41006192E-02;
  COFD[600] = -2.10907633E+01;
  COFD[601] = 5.29211327E+00;
  COFD[602] = -4.56068366E-01;
  COFD[603] = 1.91195062E-02;
  COFD[604] = -2.10907633E+01;
  COFD[605] = 5.29211327E+00;
  COFD[606] = -4.56068366E-01;
  COFD[607] = 1.91195062E-02;
  COFD[608] = -2.10907633E+01;
  COFD[609] = 5.29211327E+00;
  COFD[610] = -4.56068366E-01;
  COFD[611] = 1.91195062E-02;
  COFD[612] = -2.10907633E+01;
  COFD[613] = 5.29211327E+00;
  COFD[614] = -4.56068366E-01;
  COFD[615] = 1.91195062E-02;
  COFD[616] = -2.10907602E+01;
  COFD[617] = 5.29211327E+00;
  COFD[618] = -4.56068366E-01;
  COFD[619] = 1.91195062E-02;
  COFD[620] = -1.67115597E+01;
  COFD[621] = 3.98859394E+00;
  COFD[622] = -3.02316219E-01;
  COFD[623] = 1.30661099E-02;
  COFD[624] = -1.67115345E+01;
  COFD[625] = 3.98859394E+00;
  COFD[626] = -3.02316219E-01;
  COFD[627] = 1.30661099E-02;
  COFD[628] = -1.77672852E+01;
  COFD[629] = 4.20234040E+00;
  COFD[630] = -3.28057658E-01;
  COFD[631] = 1.41006192E-02;
  COFD[632] = -1.90183604E+01;
  COFD[633] = 4.64763677E+00;
  COFD[634] = -3.82799418E-01;
  COFD[635] = 1.63539171E-02;
  COFD[636] = -1.90183568E+01;
  COFD[637] = 4.64763677E+00;
  COFD[638] = -3.82799418E-01;
  COFD[639] = 1.63539171E-02;
  COFD[640] = -2.38843968E+01;
  COFD[641] = 4.82941387E+00;
  COFD[642] = -3.46543093E-01;
  COFD[643] = 1.24648862E-02;
  COFD[644] = -1.67115454E+01;
  COFD[645] = 3.98859394E+00;
  COFD[646] = -3.02316219E-01;
  COFD[647] = 1.30661099E-02;
  COFD[648] = -1.81197224E+01;
  COFD[649] = 4.33684042E+00;
  COFD[650] = -3.44981265E-01;
  COFD[651] = 1.48142449E-02;
  COFD[652] = -1.90183574E+01;
  COFD[653] = 4.64763677E+00;
  COFD[654] = -3.82799418E-01;
  COFD[655] = 1.63539171E-02;
  COFD[656] = -2.10907602E+01;
  COFD[657] = 5.29211327E+00;
  COFD[658] = -4.56068366E-01;
  COFD[659] = 1.91195062E-02;
  COFD[660] = -1.77672888E+01;
  COFD[661] = 4.20234040E+00;
  COFD[662] = -3.28057658E-01;
  COFD[663] = 1.41006192E-02;
  COFD[664] = -2.10907602E+01;
  COFD[665] = 5.29211327E+00;
  COFD[666] = -4.56068366E-01;
  COFD[667] = 1.91195062E-02;
  COFD[668] = -2.10907602E+01;
  COFD[669] = 5.29211327E+00;
  COFD[670] = -4.56068366E-01;
  COFD[671] = 1.91195062E-02;
  COFD[672] = -2.10907602E+01;
  COFD[673] = 5.29211327E+00;
  COFD[674] = -4.56068366E-01;
  COFD[675] = 1.91195062E-02;
  COFD[676] = -2.10907602E+01;
  COFD[677] = 5.29211327E+00;
  COFD[678] = -4.56068366E-01;
  COFD[679] = 1.91195062E-02;
  COFD[680] = -2.10907571E+01;
  COFD[681] = 5.29211327E+00;
  COFD[682] = -4.56068366E-01;
  COFD[683] = 1.91195062E-02;
  COFD[684] = -1.67115580E+01;
  COFD[685] = 3.98859394E+00;
  COFD[686] = -3.02316219E-01;
  COFD[687] = 1.30661099E-02;
  COFD[688] = -1.67115329E+01;
  COFD[689] = 3.98859394E+00;
  COFD[690] = -3.02316219E-01;
  COFD[691] = 1.30661099E-02;
  COFD[692] = -1.77672828E+01;
  COFD[693] = 4.20234040E+00;
  COFD[694] = -3.28057658E-01;
  COFD[695] = 1.41006192E-02;
  COFD[696] = -1.90183574E+01;
  COFD[697] = 4.64763677E+00;
  COFD[698] = -3.82799418E-01;
  COFD[699] = 1.63539171E-02;
  COFD[700] = -1.90183538E+01;
  COFD[701] = 4.64763677E+00;
  COFD[702] = -3.82799418E-01;
  COFD[703] = 1.63539171E-02;
  COFD[704] = -2.42503398E+01;
  COFD[705] = 5.40793558E+00;
  COFD[706] = -4.67888803E-01;
  COFD[707] = 1.95062704E-02;
  COFD[708] = -1.29877340E+01;
  COFD[709] = 2.80841511E+00;
  COFD[710] = -1.52629888E-01;
  COFD[711] = 6.72604927E-03;
  COFD[712] = -1.40864898E+01;
  COFD[713] = 3.07458927E+00;
  COFD[714] = -1.86899591E-01;
  COFD[715] = 8.19829781E-03;
  COFD[716] = -1.47082642E+01;
  COFD[717] = 3.30683499E+00;
  COFD[718] = -2.16378602E-01;
  COFD[719] = 9.44670561E-03;
  COFD[720] = -1.67115597E+01;
  COFD[721] = 3.98859394E+00;
  COFD[722] = -3.02316219E-01;
  COFD[723] = 1.30661099E-02;
  COFD[724] = -1.39007418E+01;
  COFD[725] = 2.99164244E+00;
  COFD[726] = -1.76293106E-01;
  COFD[727] = 7.74575100E-03;
  COFD[728] = -1.67115597E+01;
  COFD[729] = 3.98859394E+00;
  COFD[730] = -3.02316219E-01;
  COFD[731] = 1.30661099E-02;
  COFD[732] = -1.67115597E+01;
  COFD[733] = 3.98859394E+00;
  COFD[734] = -3.02316219E-01;
  COFD[735] = 1.30661099E-02;
  COFD[736] = -1.67115597E+01;
  COFD[737] = 3.98859394E+00;
  COFD[738] = -3.02316219E-01;
  COFD[739] = 1.30661099E-02;
  COFD[740] = -1.67115597E+01;
  COFD[741] = 3.98859394E+00;
  COFD[742] = -3.02316219E-01;
  COFD[743] = 1.30661099E-02;
  COFD[744] = -1.67115580E+01;
  COFD[745] = 3.98859394E+00;
  COFD[746] = -3.02316219E-01;
  COFD[747] = 1.30661099E-02;
  COFD[748] = -1.29877426E+01;
  COFD[749] = 2.80841511E+00;
  COFD[750] = -1.52629888E-01;
  COFD[751] = 6.72604927E-03;
  COFD[752] = -1.29877255E+01;
  COFD[753] = 2.80841511E+00;
  COFD[754] = -1.52629888E-01;
  COFD[755] = 6.72604927E-03;
  COFD[756] = -1.39007382E+01;
  COFD[757] = 2.99164244E+00;
  COFD[758] = -1.76293106E-01;
  COFD[759] = 7.74575100E-03;
  COFD[760] = -1.47082642E+01;
  COFD[761] = 3.30683499E+00;
  COFD[762] = -2.16378602E-01;
  COFD[763] = 9.44670561E-03;
  COFD[764] = -1.47082622E+01;
  COFD[765] = 3.30683499E+00;
  COFD[766] = -2.16378602E-01;
  COFD[767] = 9.44670561E-03;
  COFD[768] = -2.42503398E+01;
  COFD[769] = 5.40793558E+00;
  COFD[770] = -4.67888803E-01;
  COFD[771] = 1.95062704E-02;
  COFD[772] = -1.29877169E+01;
  COFD[773] = 2.80841511E+00;
  COFD[774] = -1.52629888E-01;
  COFD[775] = 6.72604927E-03;
  COFD[776] = -1.40864669E+01;
  COFD[777] = 3.07458927E+00;
  COFD[778] = -1.86899591E-01;
  COFD[779] = 8.19829781E-03;
  COFD[780] = -1.47082397E+01;
  COFD[781] = 3.30683499E+00;
  COFD[782] = -2.16378602E-01;
  COFD[783] = 9.44670561E-03;
  COFD[784] = -1.67115345E+01;
  COFD[785] = 3.98859394E+00;
  COFD[786] = -3.02316219E-01;
  COFD[787] = 1.30661099E-02;
  COFD[788] = -1.39007200E+01;
  COFD[789] = 2.99164244E+00;
  COFD[790] = -1.76293106E-01;
  COFD[791] = 7.74575100E-03;
  COFD[792] = -1.67115345E+01;
  COFD[793] = 3.98859394E+00;
  COFD[794] = -3.02316219E-01;
  COFD[795] = 1.30661099E-02;
  COFD[796] = -1.67115345E+01;
  COFD[797] = 3.98859394E+00;
  COFD[798] = -3.02316219E-01;
  COFD[799] = 1.30661099E-02;
  COFD[800] = -1.67115345E+01;
  COFD[801] = 3.98859394E+00;
  COFD[802] = -3.02316219E-01;
  COFD[803] = 1.30661099E-02;
  COFD[804] = -1.67115345E+01;
  COFD[805] = 3.98859394E+00;
  COFD[806] = -3.02316219E-01;
  COFD[807] = 1.30661099E-02;
  COFD[808] = -1.67115329E+01;
  COFD[809] = 3.98859394E+00;
  COFD[810] = -3.02316219E-01;
  COFD[811] = 1.30661099E-02;
  COFD[812] = -1.29877255E+01;
  COFD[813] = 2.80841511E+00;
  COFD[814] = -1.52629888E-01;
  COFD[815] = 6.72604927E-03;
  COFD[816] = -1.29877083E+01;
  COFD[817] = 2.80841511E+00;
  COFD[818] = -1.52629888E-01;
  COFD[819] = 6.72604927E-03;
  COFD[820] = -1.39007164E+01;
  COFD[821] = 2.99164244E+00;
  COFD[822] = -1.76293106E-01;
  COFD[823] = 7.74575100E-03;
  COFD[824] = -1.47082397E+01;
  COFD[825] = 3.30683499E+00;
  COFD[826] = -2.16378602E-01;
  COFD[827] = 9.44670561E-03;
  COFD[828] = -1.47082377E+01;
  COFD[829] = 3.30683499E+00;
  COFD[830] = -2.16378602E-01;
  COFD[831] = 9.44670561E-03;
  COFD[832] = -2.46791388E+01;
  COFD[833] = 5.51562323E+00;
  COFD[834] = -4.75876136E-01;
  COFD[835] = 1.96184735E-02;
  COFD[836] = -1.39007273E+01;
  COFD[837] = 2.99164244E+00;
  COFD[838] = -1.76293106E-01;
  COFD[839] = 7.74575100E-03;
  COFD[840] = -1.50371635E+01;
  COFD[841] = 3.26249588E+00;
  COFD[842] = -2.10658287E-01;
  COFD[843] = 9.20032462E-03;
  COFD[844] = -1.57440435E+01;
  COFD[845] = 3.51861272E+00;
  COFD[846] = -2.43068621E-01;
  COFD[847] = 1.05698368E-02;
  COFD[848] = -1.77672852E+01;
  COFD[849] = 4.20234040E+00;
  COFD[850] = -3.28057658E-01;
  COFD[851] = 1.41006192E-02;
  COFD[852] = -1.48061357E+01;
  COFD[853] = 3.16912473E+00;
  COFD[854] = -1.98792456E-01;
  COFD[855] = 8.69726395E-03;
  COFD[856] = -1.77672852E+01;
  COFD[857] = 4.20234040E+00;
  COFD[858] = -3.28057658E-01;
  COFD[859] = 1.41006192E-02;
  COFD[860] = -1.77672852E+01;
  COFD[861] = 4.20234040E+00;
  COFD[862] = -3.28057658E-01;
  COFD[863] = 1.41006192E-02;
  COFD[864] = -1.77672852E+01;
  COFD[865] = 4.20234040E+00;
  COFD[866] = -3.28057658E-01;
  COFD[867] = 1.41006192E-02;
  COFD[868] = -1.77672852E+01;
  COFD[869] = 4.20234040E+00;
  COFD[870] = -3.28057658E-01;
  COFD[871] = 1.41006192E-02;
  COFD[872] = -1.77672828E+01;
  COFD[873] = 4.20234040E+00;
  COFD[874] = -3.28057658E-01;
  COFD[875] = 1.41006192E-02;
  COFD[876] = -1.39007382E+01;
  COFD[877] = 2.99164244E+00;
  COFD[878] = -1.76293106E-01;
  COFD[879] = 7.74575100E-03;
  COFD[880] = -1.39007164E+01;
  COFD[881] = 2.99164244E+00;
  COFD[882] = -1.76293106E-01;
  COFD[883] = 7.74575100E-03;
  COFD[884] = -1.48061308E+01;
  COFD[885] = 3.16912473E+00;
  COFD[886] = -1.98792456E-01;
  COFD[887] = 8.69726395E-03;
  COFD[888] = -1.57440435E+01;
  COFD[889] = 3.51861272E+00;
  COFD[890] = -2.43068621E-01;
  COFD[891] = 1.05698368E-02;
  COFD[892] = -1.57440406E+01;
  COFD[893] = 3.51861272E+00;
  COFD[894] = -2.43068621E-01;
  COFD[895] = 1.05698368E-02;
  COFD[896] = -2.49944590E+01;
  COFD[897] = 5.52779193E+00;
  COFD[898] = -4.65764754E-01;
  COFD[899] = 1.87288224E-02;
  COFD[900] = -1.47082519E+01;
  COFD[901] = 3.30683499E+00;
  COFD[902] = -2.16378602E-01;
  COFD[903] = 9.44670561E-03;
  COFD[904] = -1.59592241E+01;
  COFD[905] = 3.60186887E+00;
  COFD[906] = -2.53302622E-01;
  COFD[907] = 1.09893496E-02;
  COFD[908] = -1.68944987E+01;
  COFD[909] = 3.94346012E+00;
  COFD[910] = -2.96835271E-01;
  COFD[911] = 1.28438696E-02;
  COFD[912] = -1.90183604E+01;
  COFD[913] = 4.64763677E+00;
  COFD[914] = -3.82799418E-01;
  COFD[915] = 1.63539171E-02;
  COFD[916] = -1.57440492E+01;
  COFD[917] = 3.51861272E+00;
  COFD[918] = -2.43068621E-01;
  COFD[919] = 1.05698368E-02;
  COFD[920] = -1.90183604E+01;
  COFD[921] = 4.64763677E+00;
  COFD[922] = -3.82799418E-01;
  COFD[923] = 1.63539171E-02;
  COFD[924] = -1.90183604E+01;
  COFD[925] = 4.64763677E+00;
  COFD[926] = -3.82799418E-01;
  COFD[927] = 1.63539171E-02;
  COFD[928] = -1.90183604E+01;
  COFD[929] = 4.64763677E+00;
  COFD[930] = -3.82799418E-01;
  COFD[931] = 1.63539171E-02;
  COFD[932] = -1.90183604E+01;
  COFD[933] = 4.64763677E+00;
  COFD[934] = -3.82799418E-01;
  COFD[935] = 1.63539171E-02;
  COFD[936] = -1.90183574E+01;
  COFD[937] = 4.64763677E+00;
  COFD[938] = -3.82799418E-01;
  COFD[939] = 1.63539171E-02;
  COFD[940] = -1.47082642E+01;
  COFD[941] = 3.30683499E+00;
  COFD[942] = -2.16378602E-01;
  COFD[943] = 9.44670561E-03;
  COFD[944] = -1.47082397E+01;
  COFD[945] = 3.30683499E+00;
  COFD[946] = -2.16378602E-01;
  COFD[947] = 9.44670561E-03;
  COFD[948] = -1.57440435E+01;
  COFD[949] = 3.51861272E+00;
  COFD[950] = -2.43068621E-01;
  COFD[951] = 1.05698368E-02;
  COFD[952] = -1.68944987E+01;
  COFD[953] = 3.94346012E+00;
  COFD[954] = -2.96835271E-01;
  COFD[955] = 1.28438696E-02;
  COFD[956] = -1.68944953E+01;
  COFD[957] = 3.94346012E+00;
  COFD[958] = -2.96835271E-01;
  COFD[959] = 1.28438696E-02;
  COFD[960] = -2.49944590E+01;
  COFD[961] = 5.52779193E+00;
  COFD[962] = -4.65764754E-01;
  COFD[963] = 1.87288224E-02;
  COFD[964] = -1.47082500E+01;
  COFD[965] = 3.30683499E+00;
  COFD[966] = -2.16378602E-01;
  COFD[967] = 9.44670561E-03;
  COFD[968] = -1.59592210E+01;
  COFD[969] = 3.60186887E+00;
  COFD[970] = -2.53302622E-01;
  COFD[971] = 1.09893496E-02;
  COFD[972] = -1.68944953E+01;
  COFD[973] = 3.94346012E+00;
  COFD[974] = -2.96835271E-01;
  COFD[975] = 1.28438696E-02;
  COFD[976] = -1.90183568E+01;
  COFD[977] = 4.64763677E+00;
  COFD[978] = -3.82799418E-01;
  COFD[979] = 1.63539171E-02;
  COFD[980] = -1.57440464E+01;
  COFD[981] = 3.51861272E+00;
  COFD[982] = -2.43068621E-01;
  COFD[983] = 1.05698368E-02;
  COFD[984] = -1.90183568E+01;
  COFD[985] = 4.64763677E+00;
  COFD[986] = -3.82799418E-01;
  COFD[987] = 1.63539171E-02;
  COFD[988] = -1.90183568E+01;
  COFD[989] = 4.64763677E+00;
  COFD[990] = -3.82799418E-01;
  COFD[991] = 1.63539171E-02;
  COFD[992] = -1.90183568E+01;
  COFD[993] = 4.64763677E+00;
  COFD[994] = -3.82799418E-01;
  COFD[995] = 1.63539171E-02;
  COFD[996] = -1.90183568E+01;
  COFD[997] = 4.64763677E+00;
  COFD[998] = -3.82799418E-01;
  COFD[999] = 1.63539171E-02;
  COFD[1000] = -1.90183538E+01;
  COFD[1001] = 4.64763677E+00;
  COFD[1002] = -3.82799418E-01;
  COFD[1003] = 1.63539171E-02;
  COFD[1004] = -1.47082622E+01;
  COFD[1005] = 3.30683499E+00;
  COFD[1006] = -2.16378602E-01;
  COFD[1007] = 9.44670561E-03;
  COFD[1008] = -1.47082377E+01;
  COFD[1009] = 3.30683499E+00;
  COFD[1010] = -2.16378602E-01;
  COFD[1011] = 9.44670561E-03;
  COFD[1012] = -1.57440406E+01;
  COFD[1013] = 3.51861272E+00;
  COFD[1014] = -2.43068621E-01;
  COFD[1015] = 1.05698368E-02;
  COFD[1016] = -1.68944953E+01;
  COFD[1017] = 3.94346012E+00;
  COFD[1018] = -2.96835271E-01;
  COFD[1019] = 1.28438696E-02;
  COFD[1020] = -1.68944918E+01;
  COFD[1021] = 3.94346012E+00;
  COFD[1022] = -2.96835271E-01;
  COFD[1023] = 1.28438696E-02;
}

// List of specs with small weight, dim NLITE
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetKTDIF(int* KTDIF)
{
  KTDIF[0] = 0;
}

// Poly fits for thermal diff ratios, dim NO*NLITE*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFTD(amrex::Real* COFTD)
{
  COFTD[0] = 0.00000000E+00;
  COFTD[1] = 0.00000000E+00;
  COFTD[2] = 0.00000000E+00;
  COFTD[3] = 0.00000000E+00;
  COFTD[4] = -1.22051466E-01;
  COFTD[5] = 8.50463321E-04;
  COFTD[6] = -3.49880208E-07;
  COFTD[7] = 4.67982394E-11;
  COFTD[8] = -1.74367468E-01;
  COFTD[9] = 8.56399915E-04;
  COFTD[10] = -3.37494379E-07;
  COFTD[11] = 4.39622394E-11;
  COFTD[12] = -2.07906987E-01;
  COFTD[13] = 8.41105286E-04;
  COFTD[14] = -3.18091978E-07;
  COFTD[15] = 4.03681882E-11;
  COFTD[16] = -2.48073493E-01;
  COFTD[17] = 7.25180496E-04;
  COFTD[18] = -2.36929722E-07;
  COFTD[19] = 2.71093741E-11;
  COFTD[20] = -1.59489983E-01;
  COFTD[21] = 8.57405115E-04;
  COFTD[22] = -3.42640753E-07;
  COFTD[23] = 4.50206824E-11;
  COFTD[24] = -2.48073493E-01;
  COFTD[25] = 7.25180496E-04;
  COFTD[26] = -2.36929722E-07;
  COFTD[27] = 2.71093741E-11;
  COFTD[28] = -2.48073493E-01;
  COFTD[29] = 7.25180496E-04;
  COFTD[30] = -2.36929722E-07;
  COFTD[31] = 2.71093741E-11;
  COFTD[32] = -2.48073493E-01;
  COFTD[33] = 7.25180496E-04;
  COFTD[34] = -2.36929722E-07;
  COFTD[35] = 2.71093741E-11;
  COFTD[36] = -2.48073493E-01;
  COFTD[37] = 7.25180496E-04;
  COFTD[38] = -2.36929722E-07;
  COFTD[39] = 2.71093741E-11;
  COFTD[40] = -2.48073493E-01;
  COFTD[41] = 7.25180496E-04;
  COFTD[42] = -2.36929722E-07;
  COFTD[43] = 2.71093740E-11;
  COFTD[44] = -1.22051466E-01;
  COFTD[45] = 8.50463323E-04;
  COFTD[46] = -3.49880209E-07;
  COFTD[47] = 4.67982395E-11;
  COFTD[48] = -1.22051466E-01;
  COFTD[49] = 8.50463319E-04;
  COFTD[50] = -3.49880207E-07;
  COFTD[51] = 4.67982393E-11;
  COFTD[52] = -1.59489983E-01;
  COFTD[53] = 8.57405115E-04;
  COFTD[54] = -3.42640753E-07;
  COFTD[55] = 4.50206824E-11;
  COFTD[56] = -2.07906987E-01;
  COFTD[57] = 8.41105286E-04;
  COFTD[58] = -3.18091978E-07;
  COFTD[59] = 4.03681882E-11;
  COFTD[60] = -2.07906987E-01;
  COFTD[61] = 8.41105286E-04;
  COFTD[62] = -3.18091978E-07;
  COFTD[63] = 4.03681882E-11;
}

// compute the critical parameters for each species
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_CRITPARAMS(
  amrex::Real* Tci, amrex::Real* ai, amrex::Real* bi, amrex::Real* acentric_i)
{

  amrex::Real EPS[16];
  amrex::Real SIG[16];
  amrex::Real wt[16];
  amrex::Real Rcst = 83.144598; // in bar [CGS] !
  amrex::Real avogadro = 6.02214199e23;
  amrex::Real boltzmann = 1.3806503e-16; // we work in CGS

  egtransetEPS(EPS);
  egtransetSIG(SIG);
  get_mw(wt);

  // species 0: E
  Tci[0] = 1.316 * EPS[0];
  ai[0] = (5.55 * avogadro * avogadro * EPS[0] * boltzmann * 1e-24 * SIG[0] *
           SIG[0] * SIG[0]) /
          (wt[0] * wt[0]);
  bi[0] = 0.855 * avogadro * 1e-24 * SIG[0] * SIG[0] * SIG[0] / (wt[0]);
  acentric_i[0] = 0.0;

  // species 1: O
  Tci[1] = 1.316 * EPS[1];
  ai[1] = (5.55 * avogadro * avogadro * EPS[1] * boltzmann * 1e-24 * SIG[1] *
           SIG[1] * SIG[1]) /
          (wt[1] * wt[1]);
  bi[1] = 0.855 * avogadro * 1e-24 * SIG[1] * SIG[1] * SIG[1] / (wt[1]);
  acentric_i[1] = 0.0;

  // species 2: O2
  // Imported from NIST
  Tci[2] = 154.581000;
  ai[2] = 1e6 * 0.42748 * Rcst * Rcst * Tci[2] * Tci[2] /
          (31.998800 * 31.998800 * 50.430466);
  bi[2] = 0.08664 * Rcst * Tci[2] / (31.998800 * 50.430466);
  acentric_i[2] = 0.022200;

  // species 3: AR
  // Imported from NIST
  Tci[3] = 150.860000;
  ai[3] = 1e6 * 0.42748 * Rcst * Rcst * Tci[3] * Tci[3] /
          (39.948000 * 39.948000 * 48.980000);
  bi[3] = 0.08664 * Rcst * Tci[3] / (39.948000 * 48.980000);
  acentric_i[3] = -0.002000;

  // species 4: CO2
  // Imported from NIST
  Tci[4] = 304.120000;
  ai[4] = 1e6 * 0.42748 * Rcst * Rcst * Tci[4] * Tci[4] /
          (44.009950 * 44.009950 * 73.740000);
  bi[4] = 0.08664 * Rcst * Tci[4] / (44.009950 * 73.740000);
  acentric_i[4] = 0.225000;

  // species 5: CO
  // Imported from NIST
  Tci[5] = 132.850000;
  ai[5] = 1e6 * 0.42748 * Rcst * Rcst * Tci[5] * Tci[5] /
          (28.010000 * 28.010000 * 34.940000);
  bi[5] = 0.08664 * Rcst * Tci[5] / (28.010000 * 34.940000);
  acentric_i[5] = 0.045000;

  // species 6: CO2v1
  Tci[6] = 1.316 * EPS[6];
  ai[6] = (5.55 * avogadro * avogadro * EPS[6] * boltzmann * 1e-24 * SIG[6] *
           SIG[6] * SIG[6]) /
          (wt[6] * wt[6]);
  bi[6] = 0.855 * avogadro * 1e-24 * SIG[6] * SIG[6] * SIG[6] / (wt[6]);
  acentric_i[6] = 0.0;

  // species 7: CO2v2
  Tci[7] = 1.316 * EPS[7];
  ai[7] = (5.55 * avogadro * avogadro * EPS[7] * boltzmann * 1e-24 * SIG[7] *
           SIG[7] * SIG[7]) /
          (wt[7] * wt[7]);
  bi[7] = 0.855 * avogadro * 1e-24 * SIG[7] * SIG[7] * SIG[7] / (wt[7]);
  acentric_i[7] = 0.0;

  // species 8: CO2v3
  Tci[8] = 1.316 * EPS[8];
  ai[8] = (5.55 * avogadro * avogadro * EPS[8] * boltzmann * 1e-24 * SIG[8] *
           SIG[8] * SIG[8]) /
          (wt[8] * wt[8]);
  bi[8] = 0.855 * avogadro * 1e-24 * SIG[8] * SIG[8] * SIG[8] / (wt[8]);
  acentric_i[8] = 0.0;

  // species 9: CO2v4
  Tci[9] = 1.316 * EPS[9];
  ai[9] = (5.55 * avogadro * avogadro * EPS[9] * boltzmann * 1e-24 * SIG[9] *
           SIG[9] * SIG[9]) /
          (wt[9] * wt[9]);
  bi[9] = 0.855 * avogadro * 1e-24 * SIG[9] * SIG[9] * SIG[9] / (wt[9]);
  acentric_i[9] = 0.0;

  // species 10: CO2p
  Tci[10] = 1.316 * EPS[10];
  ai[10] = (5.55 * avogadro * avogadro * EPS[10] * boltzmann * 1e-24 * SIG[10] *
            SIG[10] * SIG[10]) /
           (wt[10] * wt[10]);
  bi[10] = 0.855 * avogadro * 1e-24 * SIG[10] * SIG[10] * SIG[10] / (wt[10]);
  acentric_i[10] = 0.0;

  // species 11: Om
  Tci[11] = 1.316 * EPS[11];
  ai[11] = (5.55 * avogadro * avogadro * EPS[11] * boltzmann * 1e-24 * SIG[11] *
            SIG[11] * SIG[11]) /
           (wt[11] * wt[11]);
  bi[11] = 0.855 * avogadro * 1e-24 * SIG[11] * SIG[11] * SIG[11] / (wt[11]);
  acentric_i[11] = 0.0;

  // species 12: Op
  Tci[12] = 1.316 * EPS[12];
  ai[12] = (5.55 * avogadro * avogadro * EPS[12] * boltzmann * 1e-24 * SIG[12] *
            SIG[12] * SIG[12]) /
           (wt[12] * wt[12]);
  bi[12] = 0.855 * avogadro * 1e-24 * SIG[12] * SIG[12] * SIG[12] / (wt[12]);
  acentric_i[12] = 0.0;

  // species 13: COp
  Tci[13] = 1.316 * EPS[13];
  ai[13] = (5.55 * avogadro * avogadro * EPS[13] * boltzmann * 1e-24 * SIG[13] *
            SIG[13] * SIG[13]) /
           (wt[13] * wt[13]);
  bi[13] = 0.855 * avogadro * 1e-24 * SIG[13] * SIG[13] * SIG[13] / (wt[13]);
  acentric_i[13] = 0.0;

  // species 14: ARe
  Tci[14] = 1.316 * EPS[14];
  ai[14] = (5.55 * avogadro * avogadro * EPS[14] * boltzmann * 1e-24 * SIG[14] *
            SIG[14] * SIG[14]) /
           (wt[14] * wt[14]);
  bi[14] = 0.855 * avogadro * 1e-24 * SIG[14] * SIG[14] * SIG[14] / (wt[14]);
  acentric_i[14] = 0.0;

  // species 15: ARp
  Tci[15] = 1.316 * EPS[15];
  ai[15] = (5.55 * avogadro * avogadro * EPS[15] * boltzmann * 1e-24 * SIG[15] *
            SIG[15] * SIG[15]) /
           (wt[15] * wt[15]);
  bi[15] = 0.855 * avogadro * 1e-24 * SIG[15] * SIG[15] * SIG[15] / (wt[15]);
  acentric_i[15] = 0.0;
}

// compute the critical parameter quantities for each species for SRK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_CRITPARAMS_SRK(
  amrex::Real* sqrtOneOverTc,
  amrex::Real* sqrtAsti,
  amrex::Real* Bi,
  amrex::Real* Fomega)
{

  // species 0: E
  // Computed from Lennard-Jones
  sqrtOneOverTc[0] = 2.9899408206870e-02;
  sqrtAsti[0] = 7.7623333318521e+12;
  Bi[0] = 7.2051661156636e+10;
  Fomega[0] = 4.8508000000000e-01;

  // species 1: O
  // Computed from Lennard-Jones
  sqrtOneOverTc[1] = 9.7460146948181e-02;
  sqrtAsti[1] = 4.2500156012386e+04;
  Bi[1] = 6.6930234851885e-01;
  Fomega[1] = 4.8508000000000e-01;

  // species 2: O2
  // Imported from NIST
  sqrtOneOverTc[2] = 8.0430717653241e-02;
  sqrtAsti[2] = 3.6980081924740e+04;
  Bi[2] = 6.9005216444999e-01;
  Fomega[2] = 5.1945301904908e-01;

  // species 3: AR
  // Imported from NIST
  sqrtOneOverTc[3] = 8.1416597423011e-02;
  sqrtAsti[3] = 2.9333346340060e+04;
  Bi[3] = 5.5540880812616e-01;
  Fomega[3] = 4.8197599354800e-01;

  // species 4: CO2
  // Imported from NIST
  sqrtOneOverTc[4] = 5.7342616962522e-02;
  sqrtAsti[4] = 4.3745610142919e+04;
  Bi[4] = 6.7506167841745e-01;
  Fomega[4] = 8.2653709187500e-01;

  // species 5: CO
  // Imported from NIST
  sqrtOneOverTc[5] = 8.6759935530451e-02;
  sqrtAsti[5] = 4.3619324712923e+04;
  Bi[5] = 9.7786303823350e-01;
  Fomega[5] = 5.5459948367500e-01;

  // species 6: CO2v1
  // Computed from Lennard-Jones
  sqrtOneOverTc[6] = 5.5805517804513e-02;
  sqrtAsti[6] = 4.3191080492127e+04;
  Bi[6] = 6.2341645380911e-01;
  Fomega[6] = 4.8508000000000e-01;

  // species 7: CO2v2
  // Computed from Lennard-Jones
  sqrtOneOverTc[7] = 5.5805517804513e-02;
  sqrtAsti[7] = 4.3191080492127e+04;
  Bi[7] = 6.2341645380911e-01;
  Fomega[7] = 4.8508000000000e-01;

  // species 8: CO2v3
  // Computed from Lennard-Jones
  sqrtOneOverTc[8] = 5.5805517804513e-02;
  sqrtAsti[8] = 4.3191080492127e+04;
  Bi[8] = 6.2341645380911e-01;
  Fomega[8] = 4.8508000000000e-01;

  // species 9: CO2v4
  // Computed from Lennard-Jones
  sqrtOneOverTc[9] = 5.5805517804513e-02;
  sqrtAsti[9] = 4.3191080492127e+04;
  Bi[9] = 6.2341645380911e-01;
  Fomega[9] = 4.8508000000000e-01;

  // species 10: CO2p
  // Computed from Lennard-Jones
  sqrtOneOverTc[10] = 5.5805517804513e-02;
  sqrtAsti[10] = 4.3191618883237e+04;
  Bi[10] = 6.2342422490149e-01;
  Fomega[10] = 4.8508000000000e-01;

  // species 11: Om
  // Computed from Lennard-Jones
  sqrtOneOverTc[11] = 9.7460146948181e-02;
  sqrtAsti[11] = 4.2498698800541e+04;
  Bi[11] = 6.6927940000755e-01;
  Fomega[11] = 4.8508000000000e-01;

  // species 12: Op
  // Computed from Lennard-Jones
  sqrtOneOverTc[12] = 9.7460146948181e-02;
  sqrtAsti[12] = 4.2501613324166e+04;
  Bi[12] = 6.6932529860394e-01;
  Fomega[12] = 4.8508000000000e-01;

  // species 13: COp
  // Computed from Lennard-Jones
  sqrtOneOverTc[13] = 8.8011120802094e-02;
  sqrtAsti[13] = 4.1106313094428e+04;
  Bi[13] = 8.9390444360913e-01;
  Fomega[13] = 4.8508000000000e-01;

  // species 14: ARe
  // Computed from Lennard-Jones
  sqrtOneOverTc[14] = 7.4611492866627e-02;
  sqrtAsti[14] = 2.9624785926633e+04;
  Bi[14] = 4.7591897732266e-01;
  Fomega[14] = 4.8508000000000e-01;

  // species 15: ARp
  // Computed from Lennard-Jones
  sqrtOneOverTc[15] = 7.4611492866627e-02;
  sqrtAsti[15] = 2.9625192729775e+04;
  Bi[15] = 4.7592551257108e-01;
  Fomega[15] = 4.8508000000000e-01;
}

// gauss-jordan solver external routine
// Replace this routine with the one generated by the Gauss Jordan solver of DW
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
sgjsolve(amrex::Real* /*A*/, amrex::Real* /*x*/, amrex::Real* /*b*/)
{
  amrex::Abort("sgjsolve not implemented, choose a different solver ");
}

// Replace this routine with the one generated by the Gauss Jordan solver of DW
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
sgjsolve_simplified(amrex::Real* /*A*/, amrex::Real* /*x*/, amrex::Real* /*b*/)
{
  amrex::Abort(
    "sgjsolve_simplified not implemented, choose a different solver ");
}

#endif
